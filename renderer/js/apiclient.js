(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
const {Jellyfin} = require("@thornbill/jellyfin-sdk");
},{"@thornbill/jellyfin-sdk":346}],3:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.AUTHORIZATION_HEADER = void 0;
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var axios_1 = __importDefault(require("axios"));
var generated_client_1 = require("./generated-client");
var utils_1 = require("./utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires
var buildFullPath = require('axios/lib/core/buildFullPath');
/** The authorization header field name. */
exports.AUTHORIZATION_HEADER = 'X-Emby-Authorization';
/** Class representing the Jellyfin API. */
var Api = /** @class */ (function () {
    function Api(basePath, clientInfo, deviceInfo, accessToken, axiosInstance) {
        if (accessToken === void 0) { accessToken = ''; }
        if (axiosInstance === void 0) { axiosInstance = axios_1.default; }
        this.basePath = basePath;
        this.clientInfo = clientInfo;
        this.deviceInfo = deviceInfo;
        this.accessToken = accessToken;
        this.axiosInstance = axiosInstance;
    }
    Object.defineProperty(Api.prototype, "configuration", {
        get: function () {
            return new generated_client_1.Configuration({
                basePath: this.basePath,
                apiKey: this.authorizationHeader
            });
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Convenience method for authenticating a user by name and updating the internal state.
     * @param username The username.
     * @param password The user password if required.
     */
    Api.prototype.authenticateUserByName = function (username, password) {
        var _a;
        var _this = this;
        return this.userApi.authenticateUserByName(
        // The axios client does some strange wrapping of the param object
        { authenticateUserByName: { Username: username, Pw: password } }, 
        // The authorization header is required for the request to succeed
        { headers: (_a = {}, _a[exports.AUTHORIZATION_HEADER] = this.authorizationHeader, _a) }).then(function (response) {
            // Update the current token and configuration object
            _this.accessToken = response.data.AccessToken || '';
            return response;
        });
    };
    /**
     * Convenience method for logging out and updating the internal state.
     */
    Api.prototype.logout = function () {
        var _this = this;
        return this.sessionApi.reportSessionEnded().then(function (response) {
            _this.accessToken = '';
            return response;
        });
    };
    /**
     * Get an item image URL.
     * @param itemId The Item ID.
     * @param imageType An optional Image Type (Primary by default).
     * @param params Additional request parameters.
     * @returns The image URL.
     */
    Api.prototype.getItemImageUrl = function (itemId, imageType, params) {
        if (imageType === void 0) { imageType = generated_client_1.ImageType.Primary; }
        if (params === void 0) { params = {}; }
        // TODO: We could probably use ImageApiAxiosParamCreator to make this more robust
        var uri = this.axiosInstance.getUri({
            url: "/Items/".concat(itemId, "/Images/").concat(imageType),
            params: params
        });
        // NOTE: This behavior will probably be the default in axios in the future
        // https://github.com/axios/axios/issues/2468
        return buildFullPath(this.basePath, uri);
    };
    Object.defineProperty(Api.prototype, "authorizationHeader", {
        get: function () {
            return (0, utils_1.getAuthorizationHeader)(this.clientInfo, this.deviceInfo, this.accessToken);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "activityLogApi", {
        get: function () {
            return new generated_client_1.ActivityLogApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "apiKeyApi", {
        get: function () {
            return new generated_client_1.ApiKeyApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "artistsApi", {
        get: function () {
            return new generated_client_1.ArtistsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "audioApi", {
        get: function () {
            return new generated_client_1.AudioApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "brandingApi", {
        get: function () {
            return new generated_client_1.BrandingApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "channelsApi", {
        get: function () {
            return new generated_client_1.ChannelsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "collectionApi", {
        get: function () {
            return new generated_client_1.CollectionApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "configurationApi", {
        get: function () {
            return new generated_client_1.ConfigurationApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "dashboardApi", {
        get: function () {
            return new generated_client_1.DashboardApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "devicesApi", {
        get: function () {
            return new generated_client_1.DevicesApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "displayPreferencesApi", {
        get: function () {
            return new generated_client_1.DisplayPreferencesApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "dlnaApi", {
        get: function () {
            return new generated_client_1.DlnaApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "dlnaServerApi", {
        get: function () {
            return new generated_client_1.DlnaServerApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "dynamicHlsApi", {
        get: function () {
            return new generated_client_1.DynamicHlsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "environmentApi", {
        get: function () {
            return new generated_client_1.EnvironmentApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "filterApi", {
        get: function () {
            return new generated_client_1.FilterApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "genresApi", {
        get: function () {
            return new generated_client_1.GenresApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "hlsSegmentApi", {
        get: function () {
            return new generated_client_1.HlsSegmentApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "imageApi", {
        get: function () {
            return new generated_client_1.ImageApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "imageByNameApi", {
        get: function () {
            return new generated_client_1.ImageByNameApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "instantMixApi", {
        get: function () {
            return new generated_client_1.InstantMixApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "itemLookupApi", {
        get: function () {
            return new generated_client_1.ItemLookupApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "itemRefreshApi", {
        get: function () {
            return new generated_client_1.ItemRefreshApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "itemUpdateApi", {
        get: function () {
            return new generated_client_1.ItemUpdateApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "itemsApi", {
        get: function () {
            return new generated_client_1.ItemsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "libraryApi", {
        get: function () {
            return new generated_client_1.LibraryApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "libraryStructureApi", {
        get: function () {
            return new generated_client_1.LibraryStructureApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "liveTvApi", {
        get: function () {
            return new generated_client_1.LiveTvApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "localizationApi", {
        get: function () {
            return new generated_client_1.LocalizationApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "mediaInfoApi", {
        get: function () {
            return new generated_client_1.MediaInfoApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "moviesApi", {
        get: function () {
            return new generated_client_1.MoviesApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "musicGenresApi", {
        get: function () {
            return new generated_client_1.MusicGenresApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "notificationsApi", {
        get: function () {
            return new generated_client_1.NotificationsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "packageApi", {
        get: function () {
            return new generated_client_1.PackageApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "personsApi", {
        get: function () {
            return new generated_client_1.PersonsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "playlistsApi", {
        get: function () {
            return new generated_client_1.PlaylistsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "playstateApi", {
        get: function () {
            return new generated_client_1.PlaystateApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "pluginsApi", {
        get: function () {
            return new generated_client_1.PluginsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "quickConnectApi", {
        get: function () {
            return new generated_client_1.QuickConnectApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "remoteImageApi", {
        get: function () {
            return new generated_client_1.RemoteImageApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "scheduledTasksApi", {
        get: function () {
            return new generated_client_1.ScheduledTasksApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "searchApi", {
        get: function () {
            return new generated_client_1.SearchApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "sessionApi", {
        get: function () {
            return new generated_client_1.SessionApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "startupApi", {
        get: function () {
            return new generated_client_1.StartupApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "studiosApi", {
        get: function () {
            return new generated_client_1.StudiosApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "subtitleApi", {
        get: function () {
            return new generated_client_1.SubtitleApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "suggestionsApi", {
        get: function () {
            return new generated_client_1.SuggestionsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "syncPlayApi", {
        get: function () {
            return new generated_client_1.SyncPlayApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "systemApi", {
        get: function () {
            return new generated_client_1.SystemApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "timeSyncApi", {
        get: function () {
            return new generated_client_1.TimeSyncApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "trailersApi", {
        get: function () {
            return new generated_client_1.TrailersApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "tvShowsApi", {
        get: function () {
            return new generated_client_1.TvShowsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "universalAudioApi", {
        get: function () {
            return new generated_client_1.UniversalAudioApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "userApi", {
        get: function () {
            return new generated_client_1.UserApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "userLibraryApi", {
        get: function () {
            return new generated_client_1.UserLibraryApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "userViewsApi", {
        get: function () {
            return new generated_client_1.UserViewsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "videoAttachmentsApi", {
        get: function () {
            return new generated_client_1.VideoAttachmentsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "videoHlsApi", {
        get: function () {
            return new generated_client_1.VideoHlsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "videosApi", {
        get: function () {
            return new generated_client_1.VideosApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "yearsApi", {
        get: function () {
            return new generated_client_1.YearsApi(this.configuration, undefined, this.axiosInstance);
        },
        enumerable: false,
        configurable: true
    });
    return Api;
}());
exports.Api = Api;

},{"./generated-client":71,"./utils":360,"axios":362,"axios/lib/core/buildFullPath":370}],4:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveryService = void 0;
var __1 = require("..");
var utils_1 = require("../utils");
var recommended_server_discovery_1 = require("./recommended-server-discovery");
/** Class used for discovering recommended servers. */
var DiscoveryService = /** @class */ (function () {
    function DiscoveryService(jellyfin) {
        this.jellyfin = jellyfin;
        this.recommendedServerDiscovery = new recommended_server_discovery_1.RecommendedServerDiscovery(this.jellyfin);
    }
    /**
     * Finds the best server from a list of recommended servers by score.
     * @param servers A list of recommended servers.
     * @returns The best scoring recommended server.
     */
    DiscoveryService.prototype.findBestServer = function (servers) {
        // First look for GREAT scores
        var best = servers.find(function (server) { return server.score === __1.RecommendedServerInfoScore.GREAT; });
        // If no GREAT scores, look for GOOD scores
        if (!best) {
            best = servers.find(function (server) { return server.score === __1.RecommendedServerInfoScore.GOOD; });
        }
        // If no GREAT or GOOD scores, look for OK scores
        if (!best) {
            best = servers.find(function (server) { return server.score === __1.RecommendedServerInfoScore.OK; });
        }
        // Do NOT return any BAD scores
        return best;
    };
    /**
     * Gets a list of address candidates url strings
     * from a provided url address string.
     * @param input A server url address string.
     * @returns A list of potential server addresses.
     */
    DiscoveryService.prototype.getAddressCandidates = function (input) {
        return (0, utils_1.getAddressCandidates)(input);
    };
    /**
     * Gets a list of recommended server information from a provided
     * list of possible server addresses.
     * @param servers A list of possible server addresses.
     * @param minimumScore The minimum server score to include in the results.
     * @returns A list of RecommendedServerInfo from the possible server addresses.
     */
    DiscoveryService.prototype.getRecommendedServers = function (servers, minimumScore) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.recommendedServerDiscovery.discover(servers, minimumScore)];
            });
        });
    };
    /**
     * Gets a list of recommended server information from the address
     * candidates of a potential server address.
     * @param input A potential server address.
     * @param minimumScore The minimum server score to include in the results.
     * @returns A list of RecommendedServerInfo from the address candidates.
     */
    DiscoveryService.prototype.getRecommendedServerCandidates = function (input, minimumScore) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getRecommendedServers(this.getAddressCandidates(input), minimumScore)];
            });
        });
    };
    return DiscoveryService;
}());
exports.DiscoveryService = DiscoveryService;

},{"..":346,"../utils":360,"./recommended-server-discovery":6}],5:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./discovery-service"), exports);
__exportStar(require("./recommended-server-discovery"), exports);

},{"./discovery-service":4,"./recommended-server-discovery":6}],6:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendedServerDiscovery = void 0;
var compare_versions_1 = require("compare-versions");
var __1 = require("..");
/** The expected product name in system info. */
var PRODUCT_NAME = 'Jellyfin Server';
/** Requests taking longer than 3s are considered slow. */
var SLOW_RESPONSE_TIME = 3000;
/** System info request timeout. */
var HTTP_TIMEOUT = 5000;
/** Get the minimum RecommendedServerInfoScore from an array. */
function getMinScore(scores, defaultScore) {
    if (defaultScore === void 0) { defaultScore = __1.RecommendedServerInfoScore.GREAT; }
    return scores.length > 0 ? Math.min.apply(Math, scores) : defaultScore;
}
/** Builds a RecommendedServerInfo from a SystemInfoResult. */
function toRecommendedServerInfo(result) {
    var _a, _b, _c;
    var issues = [];
    var scores = [];
    if (!((_a = result.response) === null || _a === void 0 ? void 0 : _a.data) || result.error) {
        // The response did not return valid data or returned an error
        issues.push(new __1.SystemInfoIssue(result.error));
        scores.push(__1.RecommendedServerInfoScore.BAD);
    }
    else if (result.response.data.ProductName !== PRODUCT_NAME) {
        // The product name returned was invalid
        issues.push(new __1.ProductNameIssue(result.response.data.ProductName));
        scores.push(__1.RecommendedServerInfoScore.BAD);
    }
    var version = (_b = result.response) === null || _b === void 0 ? void 0 : _b.data.Version;
    if (!version) {
        // No version was returned
        issues.push(new __1.VersionMissingIssue());
        scores.push(__1.RecommendedServerInfoScore.BAD);
    }
    else if ((0, compare_versions_1.compare)(version, __1.MINIMUM_VERSION, '<')) {
        // Version is less than the minimum supported
        issues.push(new __1.VersionUnsupportedIssue(version));
        scores.push(__1.RecommendedServerInfoScore.OK);
    }
    else if ((0, compare_versions_1.compare)(version, __1.API_VERSION, '<')) {
        // Version is less than the generated client, but above the minimum
        issues.push(new __1.VersionOutdatedIssue(version));
        scores.push(__1.RecommendedServerInfoScore.GOOD);
    }
    if (result.responseTime > SLOW_RESPONSE_TIME) {
        // Response was slow
        issues.push(new __1.SlowResponseIssue(result.responseTime));
        scores.push(__1.RecommendedServerInfoScore.GOOD);
    }
    return {
        address: result.address,
        responseTime: result.responseTime,
        score: getMinScore(scores),
        issues: issues,
        systemInfo: (_c = result.response) === null || _c === void 0 ? void 0 : _c.data
    };
}
/** Class to discover and evaluate potential servers. */
var RecommendedServerDiscovery = /** @class */ (function () {
    function RecommendedServerDiscovery(jellyfin) {
        this.jellyfin = jellyfin;
    }
    /**
     * Fetches the RecommendedServerInfo for a single server address.
     * @param address The server address.
     * @returns The resulting RecommendedServerInfo.
     */
    RecommendedServerDiscovery.prototype.fetchRecommendedServerInfo = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var api, startTime;
            return __generator(this, function (_a) {
                api = this.jellyfin.createApi(address);
                startTime = Date.now();
                return [2 /*return*/, api.systemApi.getPublicSystemInfo({ timeout: HTTP_TIMEOUT })
                        .then(function (response) { return ({
                        address: address,
                        response: response,
                        responseTime: Date.now() - startTime
                    }); })
                        .catch(function (error) { return ({
                        address: address,
                        error: error,
                        responseTime: Date.now() - startTime
                    }); })
                        .then(function (result) { return toRecommendedServerInfo(result); })];
            });
        });
    };
    /**
     * Fetches the RecommendedServerInfo for multiple server addresses.
     * @param servers An array of server addresses.
     * @returns The RecommendedServerInfo for each address.
     */
    RecommendedServerDiscovery.prototype.discover = function (servers, minimumScore) {
        if (minimumScore === void 0) { minimumScore = __1.RecommendedServerInfoScore.BAD; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(servers.map(function (server) { return _this.fetchRecommendedServerInfo(server); }))];
                    case 1: return [2 /*return*/, (_a.sent()).filter(function (serverInfo) { return serverInfo.score >= minimumScore; })];
                }
            });
        });
    };
    return RecommendedServerDiscovery;
}());
exports.RecommendedServerDiscovery = RecommendedServerDiscovery;

},{"..":346,"compare-versions":392}],7:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api/activity-log-api"), exports);
__exportStar(require("./api/api-key-api"), exports);
__exportStar(require("./api/artists-api"), exports);
__exportStar(require("./api/audio-api"), exports);
__exportStar(require("./api/branding-api"), exports);
__exportStar(require("./api/channels-api"), exports);
__exportStar(require("./api/collection-api"), exports);
__exportStar(require("./api/configuration-api"), exports);
__exportStar(require("./api/dashboard-api"), exports);
__exportStar(require("./api/devices-api"), exports);
__exportStar(require("./api/display-preferences-api"), exports);
__exportStar(require("./api/dlna-api"), exports);
__exportStar(require("./api/dlna-server-api"), exports);
__exportStar(require("./api/dynamic-hls-api"), exports);
__exportStar(require("./api/environment-api"), exports);
__exportStar(require("./api/filter-api"), exports);
__exportStar(require("./api/genres-api"), exports);
__exportStar(require("./api/hls-segment-api"), exports);
__exportStar(require("./api/image-api"), exports);
__exportStar(require("./api/image-by-name-api"), exports);
__exportStar(require("./api/instant-mix-api"), exports);
__exportStar(require("./api/item-lookup-api"), exports);
__exportStar(require("./api/item-refresh-api"), exports);
__exportStar(require("./api/item-update-api"), exports);
__exportStar(require("./api/items-api"), exports);
__exportStar(require("./api/library-api"), exports);
__exportStar(require("./api/library-structure-api"), exports);
__exportStar(require("./api/live-tv-api"), exports);
__exportStar(require("./api/localization-api"), exports);
__exportStar(require("./api/media-info-api"), exports);
__exportStar(require("./api/movies-api"), exports);
__exportStar(require("./api/music-genres-api"), exports);
__exportStar(require("./api/notifications-api"), exports);
__exportStar(require("./api/package-api"), exports);
__exportStar(require("./api/persons-api"), exports);
__exportStar(require("./api/playlists-api"), exports);
__exportStar(require("./api/playstate-api"), exports);
__exportStar(require("./api/plugins-api"), exports);
__exportStar(require("./api/quick-connect-api"), exports);
__exportStar(require("./api/remote-image-api"), exports);
__exportStar(require("./api/scheduled-tasks-api"), exports);
__exportStar(require("./api/search-api"), exports);
__exportStar(require("./api/session-api"), exports);
__exportStar(require("./api/startup-api"), exports);
__exportStar(require("./api/studios-api"), exports);
__exportStar(require("./api/subtitle-api"), exports);
__exportStar(require("./api/suggestions-api"), exports);
__exportStar(require("./api/sync-play-api"), exports);
__exportStar(require("./api/system-api"), exports);
__exportStar(require("./api/time-sync-api"), exports);
__exportStar(require("./api/trailers-api"), exports);
__exportStar(require("./api/tv-shows-api"), exports);
__exportStar(require("./api/universal-audio-api"), exports);
__exportStar(require("./api/user-api"), exports);
__exportStar(require("./api/user-library-api"), exports);
__exportStar(require("./api/user-views-api"), exports);
__exportStar(require("./api/video-attachments-api"), exports);
__exportStar(require("./api/video-hls-api"), exports);
__exportStar(require("./api/videos-api"), exports);
__exportStar(require("./api/years-api"), exports);

},{"./api/activity-log-api":8,"./api/api-key-api":9,"./api/artists-api":10,"./api/audio-api":11,"./api/branding-api":12,"./api/channels-api":13,"./api/collection-api":14,"./api/configuration-api":15,"./api/dashboard-api":16,"./api/devices-api":17,"./api/display-preferences-api":18,"./api/dlna-api":19,"./api/dlna-server-api":20,"./api/dynamic-hls-api":21,"./api/environment-api":22,"./api/filter-api":23,"./api/genres-api":24,"./api/hls-segment-api":25,"./api/image-api":26,"./api/image-by-name-api":27,"./api/instant-mix-api":28,"./api/item-lookup-api":29,"./api/item-refresh-api":30,"./api/item-update-api":31,"./api/items-api":32,"./api/library-api":33,"./api/library-structure-api":34,"./api/live-tv-api":35,"./api/localization-api":36,"./api/media-info-api":37,"./api/movies-api":38,"./api/music-genres-api":39,"./api/notifications-api":40,"./api/package-api":41,"./api/persons-api":42,"./api/playlists-api":43,"./api/playstate-api":44,"./api/plugins-api":45,"./api/quick-connect-api":46,"./api/remote-image-api":47,"./api/scheduled-tasks-api":48,"./api/search-api":49,"./api/session-api":50,"./api/startup-api":51,"./api/studios-api":52,"./api/subtitle-api":53,"./api/suggestions-api":54,"./api/sync-play-api":55,"./api/system-api":56,"./api/time-sync-api":57,"./api/trailers-api":58,"./api/tv-shows-api":59,"./api/universal-audio-api":60,"./api/user-api":61,"./api/user-library-api":62,"./api/user-views-api":63,"./api/video-attachments-api":64,"./api/video-hls-api":65,"./api/videos-api":66,"./api/years-api":67}],8:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityLogApi = exports.ActivityLogApiFactory = exports.ActivityLogApiFp = exports.ActivityLogApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ActivityLogApi - axios parameter creator
 * @export
 */
var ActivityLogApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets activity log entries.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [minDate] Optional. The minimum date. Format &#x3D; ISO.
         * @param {boolean} [hasUserId] Optional. Filter log entries if it has user id, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogEntries: function (startIndex, limit, minDate, hasUserId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/ActivityLog/Entries";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (minDate !== undefined) {
                                localVarQueryParameter['minDate'] = (minDate instanceof Date) ?
                                    minDate.toISOString() :
                                    minDate;
                            }
                            if (hasUserId !== undefined) {
                                localVarQueryParameter['hasUserId'] = hasUserId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ActivityLogApiAxiosParamCreator = ActivityLogApiAxiosParamCreator;
/**
 * ActivityLogApi - functional programming interface
 * @export
 */
var ActivityLogApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ActivityLogApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets activity log entries.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [minDate] Optional. The minimum date. Format &#x3D; ISO.
         * @param {boolean} [hasUserId] Optional. Filter log entries if it has user id, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogEntries: function (startIndex, limit, minDate, hasUserId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLogEntries(startIndex, limit, minDate, hasUserId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ActivityLogApiFp = ActivityLogApiFp;
/**
 * ActivityLogApi - factory interface
 * @export
 */
var ActivityLogApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ActivityLogApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets activity log entries.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [minDate] Optional. The minimum date. Format &#x3D; ISO.
         * @param {boolean} [hasUserId] Optional. Filter log entries if it has user id, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogEntries: function (startIndex, limit, minDate, hasUserId, options) {
            return localVarFp.getLogEntries(startIndex, limit, minDate, hasUserId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ActivityLogApiFactory = ActivityLogApiFactory;
/**
 * ActivityLogApi - object-oriented interface
 * @export
 * @class ActivityLogApi
 * @extends {BaseAPI}
 */
var ActivityLogApi = /** @class */ (function (_super) {
    __extends(ActivityLogApi, _super);
    function ActivityLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets activity log entries.
     * @param {ActivityLogApiGetLogEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    ActivityLogApi.prototype.getLogEntries = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ActivityLogApiFp)(this.configuration).getLogEntries(requestParameters.startIndex, requestParameters.limit, requestParameters.minDate, requestParameters.hasUserId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActivityLogApi;
}(base_1.BaseAPI));
exports.ActivityLogApi = ActivityLogApi;

},{"../base":68,"../common":69,"axios":362}],9:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyApi = exports.ApiKeyApiFactory = exports.ApiKeyApiFp = exports.ApiKeyApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
var ApiKeyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Create a new api key.
         * @param {string} app Name of the app using the authentication key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey: function (app, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'app' is not null or undefined
                            (0, common_1.assertParamExists)('createKey', 'app', app);
                            localVarPath = "/Auth/Keys";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (app !== undefined) {
                                localVarQueryParameter['app'] = app;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Auth/Keys";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove an api key.
         * @param {string} key The access token to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeKey: function (key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('revokeKey', 'key', key);
                            localVarPath = "/Auth/Keys/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ApiKeyApiAxiosParamCreator = ApiKeyApiAxiosParamCreator;
/**
 * ApiKeyApi - functional programming interface
 * @export
 */
var ApiKeyApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ApiKeyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a new api key.
         * @param {string} app Name of the app using the authentication key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey: function (app, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createKey(app, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getKeys(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove an api key.
         * @param {string} key The access token to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeKey: function (key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.revokeKey(key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ApiKeyApiFp = ApiKeyApiFp;
/**
 * ApiKeyApi - factory interface
 * @export
 */
var ApiKeyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ApiKeyApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a new api key.
         * @param {string} app Name of the app using the authentication key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey: function (app, options) {
            return localVarFp.createKey(app, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (options) {
            return localVarFp.getKeys(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove an api key.
         * @param {string} key The access token to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeKey: function (key, options) {
            return localVarFp.revokeKey(key, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ApiKeyApiFactory = ApiKeyApiFactory;
/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
var ApiKeyApi = /** @class */ (function (_super) {
    __extends(ApiKeyApi, _super);
    function ApiKeyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a new api key.
     * @param {ApiKeyApiCreateKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    ApiKeyApi.prototype.createKey = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ApiKeyApiFp)(this.configuration).createKey(requestParameters.app, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    ApiKeyApi.prototype.getKeys = function (options) {
        var _this = this;
        return (0, exports.ApiKeyApiFp)(this.configuration).getKeys(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove an api key.
     * @param {ApiKeyApiRevokeKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    ApiKeyApi.prototype.revokeKey = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ApiKeyApiFp)(this.configuration).revokeKey(requestParameters.key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ApiKeyApi;
}(base_1.BaseAPI));
exports.ApiKeyApi = ApiKeyApi;

},{"../base":68,"../common":69,"axios":362}],10:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtistsApi = exports.ArtistsApiFactory = exports.ArtistsApiFp = exports.ArtistsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ArtistsApi - axios parameter creator
 * @export
 */
var ArtistsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets all album artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Artists/AlbumArtists";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (minCommunityRating !== undefined) {
                                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (officialRatings) {
                                localVarQueryParameter['officialRatings'] = officialRatings;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags;
                            }
                            if (years) {
                                localVarQueryParameter['years'] = years;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (person !== undefined) {
                                localVarQueryParameter['person'] = person;
                            }
                            if (personIds) {
                                localVarQueryParameter['personIds'] = personIds;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (studios) {
                                localVarQueryParameter['studios'] = studios;
                            }
                            if (studioIds) {
                                localVarQueryParameter['studioIds'] = studioIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an artist by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistByName: function (name, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getArtistByName', 'name', name);
                            localVarPath = "/Artists/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Artists";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (minCommunityRating !== undefined) {
                                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (officialRatings) {
                                localVarQueryParameter['officialRatings'] = officialRatings;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags;
                            }
                            if (years) {
                                localVarQueryParameter['years'] = years;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (person !== undefined) {
                                localVarQueryParameter['person'] = person;
                            }
                            if (personIds) {
                                localVarQueryParameter['personIds'] = personIds;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (studios) {
                                localVarQueryParameter['studios'] = studios;
                            }
                            if (studioIds) {
                                localVarQueryParameter['studioIds'] = studioIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ArtistsApiAxiosParamCreator = ArtistsApiAxiosParamCreator;
/**
 * ArtistsApi - functional programming interface
 * @export
 */
var ArtistsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ArtistsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets all album artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAlbumArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an artist by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistByName: function (name, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArtistByName(name, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ArtistsApiFp = ArtistsApiFp;
/**
 * ArtistsApi - factory interface
 * @export
 */
var ArtistsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ArtistsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets all album artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return localVarFp.getAlbumArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an artist by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistByName: function (name, userId, options) {
            return localVarFp.getArtistByName(name, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all artists from a given item, folder, or the entire library.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person ids.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtists: function (minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return localVarFp.getArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ArtistsApiFactory = ArtistsApiFactory;
/**
 * ArtistsApi - object-oriented interface
 * @export
 * @class ArtistsApi
 * @extends {BaseAPI}
 */
var ArtistsApi = /** @class */ (function (_super) {
    __extends(ArtistsApi, _super);
    function ArtistsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets all album artists from a given item, folder, or the entire library.
     * @param {ArtistsApiGetAlbumArtistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    ArtistsApi.prototype.getAlbumArtists = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ArtistsApiFp)(this.configuration).getAlbumArtists(requestParameters.minCommunityRating, requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.genres, requestParameters.genreIds, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.studioIds, requestParameters.userId, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.enableImages, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an artist by name.
     * @param {ArtistsApiGetArtistByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    ArtistsApi.prototype.getArtistByName = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ArtistsApiFp)(this.configuration).getArtistByName(requestParameters.name, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all artists from a given item, folder, or the entire library.
     * @param {ArtistsApiGetArtistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    ArtistsApi.prototype.getArtists = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ArtistsApiFp)(this.configuration).getArtists(requestParameters.minCommunityRating, requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.genres, requestParameters.genreIds, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.studioIds, requestParameters.userId, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.enableImages, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtistsApi;
}(base_1.BaseAPI));
exports.ArtistsApi = ArtistsApi;

},{"../base":68,"../common":69,"axios":362}],11:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioApi = exports.AudioApiFactory = exports.AudioApiFp = exports.AudioApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * AudioApi - axios parameter creator
 * @export
 */
var AudioApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getAudioStream', 'itemId', itemId);
                    localVarPath = "/Audio/{itemId}/stream"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (container !== undefined) {
                        localVarQueryParameter['container'] = container;
                    }
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getAudioStreamByContainer', 'itemId', itemId);
                    // verify required parameter 'container' is not null or undefined
                    (0, common_1.assertParamExists)('getAudioStreamByContainer', 'container', container);
                    localVarPath = "/Audio/{itemId}/stream.{container}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headAudioStream', 'itemId', itemId);
                    localVarPath = "/Audio/{itemId}/stream"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (container !== undefined) {
                        localVarQueryParameter['container'] = container;
                    }
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headAudioStreamByContainer', 'itemId', itemId);
                    // verify required parameter 'container' is not null or undefined
                    (0, common_1.assertParamExists)('headAudioStreamByContainer', 'container', container);
                    localVarPath = "/Audio/{itemId}/stream.{container}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AudioApiAxiosParamCreator = AudioApiAxiosParamCreator;
/**
 * AudioApi - functional programming interface
 * @export
 */
var AudioApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AudioApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AudioApiFp = AudioApiFp;
/**
 * AudioApi - factory interface
 * @export
 */
var AudioApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AudioApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.headAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {string} container The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamporphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.headAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AudioApiFactory = AudioApiFactory;
/**
 * AudioApi - object-oriented interface
 * @export
 * @class AudioApi
 * @extends {BaseAPI}
 */
var AudioApi = /** @class */ (function (_super) {
    __extends(AudioApi, _super);
    function AudioApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets an audio stream.
     * @param {AudioApiGetAudioStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    AudioApi.prototype.getAudioStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AudioApiFp)(this.configuration).getAudioStream(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio stream.
     * @param {AudioApiGetAudioStreamByContainerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    AudioApi.prototype.getAudioStreamByContainer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AudioApiFp)(this.configuration).getAudioStreamByContainer(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio stream.
     * @param {AudioApiHeadAudioStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    AudioApi.prototype.headAudioStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AudioApiFp)(this.configuration).headAudioStream(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio stream.
     * @param {AudioApiHeadAudioStreamByContainerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    AudioApi.prototype.headAudioStreamByContainer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AudioApiFp)(this.configuration).headAudioStreamByContainer(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AudioApi;
}(base_1.BaseAPI));
exports.AudioApi = AudioApi;

},{"../base":68,"../common":69,"axios":362}],12:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrandingApi = exports.BrandingApiFactory = exports.BrandingApiFp = exports.BrandingApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * BrandingApi - axios parameter creator
 * @export
 */
var BrandingApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/Branding/Css";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss2: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/Branding/Css.css";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets branding configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingOptions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/Branding/Configuration";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BrandingApiAxiosParamCreator = BrandingApiAxiosParamCreator;
/**
 * BrandingApi - functional programming interface
 * @export
 */
var BrandingApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BrandingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBrandingCss(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss2: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBrandingCss2(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets branding configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingOptions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBrandingOptions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.BrandingApiFp = BrandingApiFp;
/**
 * BrandingApi - factory interface
 * @export
 */
var BrandingApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BrandingApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss: function (options) {
            return localVarFp.getBrandingCss(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets branding css.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss2: function (options) {
            return localVarFp.getBrandingCss2(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets branding configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingOptions: function (options) {
            return localVarFp.getBrandingOptions(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BrandingApiFactory = BrandingApiFactory;
/**
 * BrandingApi - object-oriented interface
 * @export
 * @class BrandingApi
 * @extends {BaseAPI}
 */
var BrandingApi = /** @class */ (function (_super) {
    __extends(BrandingApi, _super);
    function BrandingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets branding css.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    BrandingApi.prototype.getBrandingCss = function (options) {
        var _this = this;
        return (0, exports.BrandingApiFp)(this.configuration).getBrandingCss(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets branding css.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    BrandingApi.prototype.getBrandingCss2 = function (options) {
        var _this = this;
        return (0, exports.BrandingApiFp)(this.configuration).getBrandingCss2(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets branding configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    BrandingApi.prototype.getBrandingOptions = function (options) {
        var _this = this;
        return (0, exports.BrandingApiFp)(this.configuration).getBrandingOptions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BrandingApi;
}(base_1.BaseAPI));
exports.BrandingApi = BrandingApi;

},{"../base":68,"../common":69,"axios":362}],13:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelsApi = exports.ChannelsApiFactory = exports.ChannelsApiFp = exports.ChannelsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
var ChannelsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get all channel features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChannelFeatures: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Channels/Features";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel features.
         * @param {string} channelId Channel id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelFeatures: function (channelId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'channelId' is not null or undefined
                            (0, common_1.assertParamExists)('getChannelFeatures', 'channelId', channelId);
                            localVarPath = "/Channels/{channelId}/Features"
                                .replace("{".concat("channelId", "}"), encodeURIComponent(String(channelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel items.
         * @param {string} channelId Channel Id.
         * @param {string} [folderId] Optional. Folder Id.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Optional. Sort Order - Ascending,Descending.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelItems: function (channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'channelId' is not null or undefined
                            (0, common_1.assertParamExists)('getChannelItems', 'channelId', channelId);
                            localVarPath = "/Channels/{channelId}/Items"
                                .replace("{".concat("channelId", "}"), encodeURIComponent(String(channelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (folderId !== undefined) {
                                localVarQueryParameter['folderId'] = folderId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available channels.
         * @param {string} [userId] User Id to filter by. Use System.Guid.Empty to not filter by user.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [supportsLatestItems] Optional. Filter by channels that support getting latest items.
         * @param {boolean} [supportsMediaDeletion] Optional. Filter by channels that support media deletion.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: function (userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Channels";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (supportsLatestItems !== undefined) {
                                localVarQueryParameter['supportsLatestItems'] = supportsLatestItems;
                            }
                            if (supportsMediaDeletion !== undefined) {
                                localVarQueryParameter['supportsMediaDeletion'] = supportsMediaDeletion;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets latest channel items.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [channelIds] Optional. Specify one or more channel id\&#39;s, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestChannelItems: function (userId, startIndex, limit, filters, fields, channelIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Channels/Items/Latest";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (channelIds) {
                                localVarQueryParameter['channelIds'] = channelIds;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ChannelsApiAxiosParamCreator = ChannelsApiAxiosParamCreator;
/**
 * ChannelsApi - functional programming interface
 * @export
 */
var ChannelsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ChannelsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all channel features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChannelFeatures: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllChannelFeatures(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel features.
         * @param {string} channelId Channel id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelFeatures: function (channelId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getChannelFeatures(channelId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel items.
         * @param {string} channelId Channel Id.
         * @param {string} [folderId] Optional. Folder Id.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Optional. Sort Order - Ascending,Descending.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelItems: function (channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getChannelItems(channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available channels.
         * @param {string} [userId] User Id to filter by. Use System.Guid.Empty to not filter by user.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [supportsLatestItems] Optional. Filter by channels that support getting latest items.
         * @param {boolean} [supportsMediaDeletion] Optional. Filter by channels that support media deletion.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: function (userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getChannels(userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets latest channel items.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [channelIds] Optional. Specify one or more channel id\&#39;s, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestChannelItems: function (userId, startIndex, limit, filters, fields, channelIds, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestChannelItems(userId, startIndex, limit, filters, fields, channelIds, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ChannelsApiFp = ChannelsApiFp;
/**
 * ChannelsApi - factory interface
 * @export
 */
var ChannelsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ChannelsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all channel features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChannelFeatures: function (options) {
            return localVarFp.getAllChannelFeatures(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get channel features.
         * @param {string} channelId Channel id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelFeatures: function (channelId, options) {
            return localVarFp.getChannelFeatures(channelId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get channel items.
         * @param {string} channelId Channel Id.
         * @param {string} [folderId] Optional. Folder Id.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Optional. Sort Order - Ascending,Descending.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelItems: function (channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, options) {
            return localVarFp.getChannelItems(channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available channels.
         * @param {string} [userId] User Id to filter by. Use System.Guid.Empty to not filter by user.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [supportsLatestItems] Optional. Filter by channels that support getting latest items.
         * @param {boolean} [supportsMediaDeletion] Optional. Filter by channels that support media deletion.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: function (userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, options) {
            return localVarFp.getChannels(userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets latest channel items.
         * @param {string} [userId] Optional. User Id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [channelIds] Optional. Specify one or more channel id\&#39;s, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestChannelItems: function (userId, startIndex, limit, filters, fields, channelIds, options) {
            return localVarFp.getLatestChannelItems(userId, startIndex, limit, filters, fields, channelIds, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ChannelsApiFactory = ChannelsApiFactory;
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
var ChannelsApi = /** @class */ (function (_super) {
    __extends(ChannelsApi, _super);
    function ChannelsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all channel features.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    ChannelsApi.prototype.getAllChannelFeatures = function (options) {
        var _this = this;
        return (0, exports.ChannelsApiFp)(this.configuration).getAllChannelFeatures(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get channel features.
     * @param {ChannelsApiGetChannelFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    ChannelsApi.prototype.getChannelFeatures = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ChannelsApiFp)(this.configuration).getChannelFeatures(requestParameters.channelId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get channel items.
     * @param {ChannelsApiGetChannelItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    ChannelsApi.prototype.getChannelItems = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ChannelsApiFp)(this.configuration).getChannelItems(requestParameters.channelId, requestParameters.folderId, requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.sortOrder, requestParameters.filters, requestParameters.sortBy, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available channels.
     * @param {ChannelsApiGetChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    ChannelsApi.prototype.getChannels = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ChannelsApiFp)(this.configuration).getChannels(requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.supportsLatestItems, requestParameters.supportsMediaDeletion, requestParameters.isFavorite, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets latest channel items.
     * @param {ChannelsApiGetLatestChannelItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    ChannelsApi.prototype.getLatestChannelItems = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ChannelsApiFp)(this.configuration).getLatestChannelItems(requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.filters, requestParameters.fields, requestParameters.channelIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ChannelsApi;
}(base_1.BaseAPI));
exports.ChannelsApi = ChannelsApi;

},{"../base":68,"../common":69,"axios":362}],14:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionApi = exports.CollectionApiFactory = exports.CollectionApiFp = exports.CollectionApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * CollectionApi - axios parameter creator
 * @export
 */
var CollectionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Adds items to a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollection: function (collectionId, ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'collectionId' is not null or undefined
                            (0, common_1.assertParamExists)('addToCollection', 'collectionId', collectionId);
                            // verify required parameter 'ids' is not null or undefined
                            (0, common_1.assertParamExists)('addToCollection', 'ids', ids);
                            localVarPath = "/Collections/{collectionId}/Items"
                                .replace("{".concat("collectionId", "}"), encodeURIComponent(String(collectionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a new collection.
         * @param {string} [name] The name of the collection.
         * @param {Array<string>} [ids] Item Ids to add to the collection.
         * @param {string} [parentId] Optional. Create the collection within a specific folder.
         * @param {boolean} [isLocked] Whether or not to lock the new collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (name, ids, parentId, isLocked, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Collections";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (isLocked !== undefined) {
                                localVarQueryParameter['isLocked'] = isLocked;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes items from a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection: function (collectionId, ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'collectionId' is not null or undefined
                            (0, common_1.assertParamExists)('removeFromCollection', 'collectionId', collectionId);
                            // verify required parameter 'ids' is not null or undefined
                            (0, common_1.assertParamExists)('removeFromCollection', 'ids', ids);
                            localVarPath = "/Collections/{collectionId}/Items"
                                .replace("{".concat("collectionId", "}"), encodeURIComponent(String(collectionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CollectionApiAxiosParamCreator = CollectionApiAxiosParamCreator;
/**
 * CollectionApi - functional programming interface
 * @export
 */
var CollectionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CollectionApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Adds items to a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollection: function (collectionId, ids, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addToCollection(collectionId, ids, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a new collection.
         * @param {string} [name] The name of the collection.
         * @param {Array<string>} [ids] Item Ids to add to the collection.
         * @param {string} [parentId] Optional. Create the collection within a specific folder.
         * @param {boolean} [isLocked] Whether or not to lock the new collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (name, ids, parentId, isLocked, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCollection(name, ids, parentId, isLocked, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes items from a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection: function (collectionId, ids, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeFromCollection(collectionId, ids, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CollectionApiFp = CollectionApiFp;
/**
 * CollectionApi - factory interface
 * @export
 */
var CollectionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CollectionApiFp)(configuration);
    return {
        /**
         *
         * @summary Adds items to a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollection: function (collectionId, ids, options) {
            return localVarFp.addToCollection(collectionId, ids, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a new collection.
         * @param {string} [name] The name of the collection.
         * @param {Array<string>} [ids] Item Ids to add to the collection.
         * @param {string} [parentId] Optional. Create the collection within a specific folder.
         * @param {boolean} [isLocked] Whether or not to lock the new collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (name, ids, parentId, isLocked, options) {
            return localVarFp.createCollection(name, ids, parentId, isLocked, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes items from a collection.
         * @param {string} collectionId The collection id.
         * @param {Array<string>} ids Item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection: function (collectionId, ids, options) {
            return localVarFp.removeFromCollection(collectionId, ids, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CollectionApiFactory = CollectionApiFactory;
/**
 * CollectionApi - object-oriented interface
 * @export
 * @class CollectionApi
 * @extends {BaseAPI}
 */
var CollectionApi = /** @class */ (function (_super) {
    __extends(CollectionApi, _super);
    function CollectionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Adds items to a collection.
     * @param {CollectionApiAddToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    CollectionApi.prototype.addToCollection = function (requestParameters, options) {
        var _this = this;
        return (0, exports.CollectionApiFp)(this.configuration).addToCollection(requestParameters.collectionId, requestParameters.ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a new collection.
     * @param {CollectionApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    CollectionApi.prototype.createCollection = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CollectionApiFp)(this.configuration).createCollection(requestParameters.name, requestParameters.ids, requestParameters.parentId, requestParameters.isLocked, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes items from a collection.
     * @param {CollectionApiRemoveFromCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    CollectionApi.prototype.removeFromCollection = function (requestParameters, options) {
        var _this = this;
        return (0, exports.CollectionApiFp)(this.configuration).removeFromCollection(requestParameters.collectionId, requestParameters.ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CollectionApi;
}(base_1.BaseAPI));
exports.CollectionApi = CollectionApi;

},{"../base":68,"../common":69,"axios":362}],15:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationApi = exports.ConfigurationApiFactory = exports.ConfigurationApiFp = exports.ConfigurationApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ConfigurationApi - axios parameter creator
 * @export
 */
var ConfigurationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets application configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a default MetadataOptions object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultMetadataOptions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Configuration/MetadataOptions/Default";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamedConfiguration: function (key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('getNamedConfiguration', 'key', key);
                            localVarPath = "/System/Configuration/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates application configuration.
         * @param {ServerConfiguration} serverConfiguration Configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (serverConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serverConfiguration' is not null or undefined
                            (0, common_1.assertParamExists)('updateConfiguration', 'serverConfiguration', serverConfiguration);
                            localVarPath = "/System/Configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serverConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates the path to the media encoder.
         * @param {MediaEncoderPathDto} mediaEncoderPathDto Media encoder path form body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaEncoderPath: function (mediaEncoderPathDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mediaEncoderPathDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateMediaEncoderPath', 'mediaEncoderPathDto', mediaEncoderPathDto);
                            localVarPath = "/System/MediaEncoder/Path";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mediaEncoderPathDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNamedConfiguration: function (key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('updateNamedConfiguration', 'key', key);
                            localVarPath = "/System/Configuration/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ConfigurationApiAxiosParamCreator = ConfigurationApiAxiosParamCreator;
/**
 * ConfigurationApi - functional programming interface
 * @export
 */
var ConfigurationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ConfigurationApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets application configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfiguration(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a default MetadataOptions object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultMetadataOptions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultMetadataOptions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamedConfiguration: function (key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNamedConfiguration(key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates application configuration.
         * @param {ServerConfiguration} serverConfiguration Configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (serverConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateConfiguration(serverConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates the path to the media encoder.
         * @param {MediaEncoderPathDto} mediaEncoderPathDto Media encoder path form body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaEncoderPath: function (mediaEncoderPathDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMediaEncoderPath(mediaEncoderPathDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNamedConfiguration: function (key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateNamedConfiguration(key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ConfigurationApiFp = ConfigurationApiFp;
/**
 * ConfigurationApi - factory interface
 * @export
 */
var ConfigurationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ConfigurationApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets application configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: function (options) {
            return localVarFp.getConfiguration(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a default MetadataOptions object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultMetadataOptions: function (options) {
            return localVarFp.getDefaultMetadataOptions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamedConfiguration: function (key, options) {
            return localVarFp.getNamedConfiguration(key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates application configuration.
         * @param {ServerConfiguration} serverConfiguration Configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (serverConfiguration, options) {
            return localVarFp.updateConfiguration(serverConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates the path to the media encoder.
         * @param {MediaEncoderPathDto} mediaEncoderPathDto Media encoder path form body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaEncoderPath: function (mediaEncoderPathDto, options) {
            return localVarFp.updateMediaEncoderPath(mediaEncoderPathDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates named configuration.
         * @param {string} key Configuration key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNamedConfiguration: function (key, options) {
            return localVarFp.updateNamedConfiguration(key, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConfigurationApiFactory = ConfigurationApiFactory;
/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
var ConfigurationApi = /** @class */ (function (_super) {
    __extends(ConfigurationApi, _super);
    function ConfigurationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets application configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.getConfiguration = function (options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).getConfiguration(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a default MetadataOptions object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.getDefaultMetadataOptions = function (options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).getDefaultMetadataOptions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a named configuration.
     * @param {ConfigurationApiGetNamedConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.getNamedConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).getNamedConfiguration(requestParameters.key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates application configuration.
     * @param {ConfigurationApiUpdateConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.updateConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).updateConfiguration(requestParameters.serverConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates the path to the media encoder.
     * @param {ConfigurationApiUpdateMediaEncoderPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.updateMediaEncoderPath = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).updateMediaEncoderPath(requestParameters.mediaEncoderPathDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates named configuration.
     * @param {ConfigurationApiUpdateNamedConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.updateNamedConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ConfigurationApiFp)(this.configuration).updateNamedConfiguration(requestParameters.key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfigurationApi;
}(base_1.BaseAPI));
exports.ConfigurationApi = ConfigurationApi;

},{"../base":68,"../common":69,"axios":362}],16:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardApi = exports.DashboardApiFactory = exports.DashboardApiFp = exports.DashboardApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DashboardApi - axios parameter creator
 * @export
 */
var DashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets the configuration pages.
         * @param {boolean} [enableInMainMenu] Whether to enable in the main menu.
         * @param {ConfigurationPageType} [pageType] The Jellyfin.Api.Models.ConfigurationPageInfo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationPages: function (enableInMainMenu, pageType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/web/ConfigurationPages";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enableInMainMenu !== undefined) {
                        localVarQueryParameter['enableInMainMenu'] = enableInMainMenu;
                    }
                    if (pageType !== undefined) {
                        localVarQueryParameter['pageType'] = pageType;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a dashboard configuration page.
         * @param {string} [name] The name of the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardConfigurationPage: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/web/ConfigurationPage";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (name !== undefined) {
                        localVarQueryParameter['name'] = name;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DashboardApiAxiosParamCreator = DashboardApiAxiosParamCreator;
/**
 * DashboardApi - functional programming interface
 * @export
 */
var DashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets the configuration pages.
         * @param {boolean} [enableInMainMenu] Whether to enable in the main menu.
         * @param {ConfigurationPageType} [pageType] The Jellyfin.Api.Models.ConfigurationPageInfo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationPages: function (enableInMainMenu, pageType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfigurationPages(enableInMainMenu, pageType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a dashboard configuration page.
         * @param {string} [name] The name of the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardConfigurationPage: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDashboardConfigurationPage(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DashboardApiFp = DashboardApiFp;
/**
 * DashboardApi - factory interface
 * @export
 */
var DashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DashboardApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets the configuration pages.
         * @param {boolean} [enableInMainMenu] Whether to enable in the main menu.
         * @param {ConfigurationPageType} [pageType] The Jellyfin.Api.Models.ConfigurationPageInfo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationPages: function (enableInMainMenu, pageType, options) {
            return localVarFp.getConfigurationPages(enableInMainMenu, pageType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a dashboard configuration page.
         * @param {string} [name] The name of the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardConfigurationPage: function (name, options) {
            return localVarFp.getDashboardConfigurationPage(name, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DashboardApiFactory = DashboardApiFactory;
/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
var DashboardApi = /** @class */ (function (_super) {
    __extends(DashboardApi, _super);
    function DashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets the configuration pages.
     * @param {DashboardApiGetConfigurationPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    DashboardApi.prototype.getConfigurationPages = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DashboardApiFp)(this.configuration).getConfigurationPages(requestParameters.enableInMainMenu, requestParameters.pageType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a dashboard configuration page.
     * @param {DashboardApiGetDashboardConfigurationPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    DashboardApi.prototype.getDashboardConfigurationPage = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DashboardApiFp)(this.configuration).getDashboardConfigurationPage(requestParameters.name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DashboardApi;
}(base_1.BaseAPI));
exports.DashboardApi = DashboardApi;

},{"../base":68,"../common":69,"axios":362}],17:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevicesApi = exports.DevicesApiFactory = exports.DevicesApiFp = exports.DevicesApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DevicesApi - axios parameter creator
 * @export
 */
var DevicesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Deletes a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteDevice', 'id', id);
                            localVarPath = "/Devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get info for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceInfo: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getDeviceInfo', 'id', id);
                            localVarPath = "/Devices/Info";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get options for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceOptions: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getDeviceOptions', 'id', id);
                            localVarPath = "/Devices/Options";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Devices.
         * @param {boolean} [supportsSync] Gets or sets a value indicating whether [supports synchronize].
         * @param {string} [userId] Gets or sets the user identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: function (supportsSync, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (supportsSync !== undefined) {
                                localVarQueryParameter['supportsSync'] = supportsSync;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update device options.
         * @param {string} id Device Id.
         * @param {DeviceOptions} deviceOptions Device Options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceOptions: function (id, deviceOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateDeviceOptions', 'id', id);
                            // verify required parameter 'deviceOptions' is not null or undefined
                            (0, common_1.assertParamExists)('updateDeviceOptions', 'deviceOptions', deviceOptions);
                            localVarPath = "/Devices/Options";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceOptions, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DevicesApiAxiosParamCreator = DevicesApiAxiosParamCreator;
/**
 * DevicesApi - functional programming interface
 * @export
 */
var DevicesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DevicesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDevice(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get info for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceInfo: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDeviceInfo(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get options for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceOptions: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDeviceOptions(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Devices.
         * @param {boolean} [supportsSync] Gets or sets a value indicating whether [supports synchronize].
         * @param {string} [userId] Gets or sets the user identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: function (supportsSync, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDevices(supportsSync, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update device options.
         * @param {string} id Device Id.
         * @param {DeviceOptions} deviceOptions Device Options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceOptions: function (id, deviceOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDeviceOptions(id, deviceOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DevicesApiFp = DevicesApiFp;
/**
 * DevicesApi - factory interface
 * @export
 */
var DevicesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DevicesApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: function (id, options) {
            return localVarFp.deleteDevice(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get info for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceInfo: function (id, options) {
            return localVarFp.getDeviceInfo(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get options for a device.
         * @param {string} id Device Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceOptions: function (id, options) {
            return localVarFp.getDeviceOptions(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get Devices.
         * @param {boolean} [supportsSync] Gets or sets a value indicating whether [supports synchronize].
         * @param {string} [userId] Gets or sets the user identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: function (supportsSync, userId, options) {
            return localVarFp.getDevices(supportsSync, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update device options.
         * @param {string} id Device Id.
         * @param {DeviceOptions} deviceOptions Device Options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceOptions: function (id, deviceOptions, options) {
            return localVarFp.updateDeviceOptions(id, deviceOptions, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DevicesApiFactory = DevicesApiFactory;
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
var DevicesApi = /** @class */ (function (_super) {
    __extends(DevicesApi, _super);
    function DevicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Deletes a device.
     * @param {DevicesApiDeleteDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.deleteDevice = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DevicesApiFp)(this.configuration).deleteDevice(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get info for a device.
     * @param {DevicesApiGetDeviceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.getDeviceInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DevicesApiFp)(this.configuration).getDeviceInfo(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get options for a device.
     * @param {DevicesApiGetDeviceOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.getDeviceOptions = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DevicesApiFp)(this.configuration).getDeviceOptions(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get Devices.
     * @param {DevicesApiGetDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.getDevices = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DevicesApiFp)(this.configuration).getDevices(requestParameters.supportsSync, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update device options.
     * @param {DevicesApiUpdateDeviceOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.updateDeviceOptions = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DevicesApiFp)(this.configuration).updateDeviceOptions(requestParameters.id, requestParameters.deviceOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DevicesApi;
}(base_1.BaseAPI));
exports.DevicesApi = DevicesApi;

},{"../base":68,"../common":69,"axios":362}],18:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisplayPreferencesApi = exports.DisplayPreferencesApiFactory = exports.DisplayPreferencesApiFp = exports.DisplayPreferencesApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DisplayPreferencesApi - axios parameter creator
 * @export
 */
var DisplayPreferencesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User id.
         * @param {string} client Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayPreferences: function (displayPreferencesId, userId, client, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'displayPreferencesId' is not null or undefined
                            (0, common_1.assertParamExists)('getDisplayPreferences', 'displayPreferencesId', displayPreferencesId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getDisplayPreferences', 'userId', userId);
                            // verify required parameter 'client' is not null or undefined
                            (0, common_1.assertParamExists)('getDisplayPreferences', 'client', client);
                            localVarPath = "/DisplayPreferences/{displayPreferencesId}"
                                .replace("{".concat("displayPreferencesId", "}"), encodeURIComponent(String(displayPreferencesId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (client !== undefined) {
                                localVarQueryParameter['client'] = client;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User Id.
         * @param {string} client Client.
         * @param {DisplayPreferencesDto} displayPreferencesDto New Display Preferences object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisplayPreferences: function (displayPreferencesId, userId, client, displayPreferencesDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'displayPreferencesId' is not null or undefined
                            (0, common_1.assertParamExists)('updateDisplayPreferences', 'displayPreferencesId', displayPreferencesId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateDisplayPreferences', 'userId', userId);
                            // verify required parameter 'client' is not null or undefined
                            (0, common_1.assertParamExists)('updateDisplayPreferences', 'client', client);
                            // verify required parameter 'displayPreferencesDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateDisplayPreferences', 'displayPreferencesDto', displayPreferencesDto);
                            localVarPath = "/DisplayPreferences/{displayPreferencesId}"
                                .replace("{".concat("displayPreferencesId", "}"), encodeURIComponent(String(displayPreferencesId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (client !== undefined) {
                                localVarQueryParameter['client'] = client;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(displayPreferencesDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DisplayPreferencesApiAxiosParamCreator = DisplayPreferencesApiAxiosParamCreator;
/**
 * DisplayPreferencesApi - functional programming interface
 * @export
 */
var DisplayPreferencesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DisplayPreferencesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User id.
         * @param {string} client Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayPreferences: function (displayPreferencesId, userId, client, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDisplayPreferences(displayPreferencesId, userId, client, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User Id.
         * @param {string} client Client.
         * @param {DisplayPreferencesDto} displayPreferencesDto New Display Preferences object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisplayPreferences: function (displayPreferencesId, userId, client, displayPreferencesDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDisplayPreferences(displayPreferencesId, userId, client, displayPreferencesDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DisplayPreferencesApiFp = DisplayPreferencesApiFp;
/**
 * DisplayPreferencesApi - factory interface
 * @export
 */
var DisplayPreferencesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DisplayPreferencesApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User id.
         * @param {string} client Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayPreferences: function (displayPreferencesId, userId, client, options) {
            return localVarFp.getDisplayPreferences(displayPreferencesId, userId, client, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update Display Preferences.
         * @param {string} displayPreferencesId Display preferences id.
         * @param {string} userId User Id.
         * @param {string} client Client.
         * @param {DisplayPreferencesDto} displayPreferencesDto New Display Preferences object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisplayPreferences: function (displayPreferencesId, userId, client, displayPreferencesDto, options) {
            return localVarFp.updateDisplayPreferences(displayPreferencesId, userId, client, displayPreferencesDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DisplayPreferencesApiFactory = DisplayPreferencesApiFactory;
/**
 * DisplayPreferencesApi - object-oriented interface
 * @export
 * @class DisplayPreferencesApi
 * @extends {BaseAPI}
 */
var DisplayPreferencesApi = /** @class */ (function (_super) {
    __extends(DisplayPreferencesApi, _super);
    function DisplayPreferencesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get Display Preferences.
     * @param {DisplayPreferencesApiGetDisplayPreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisplayPreferencesApi
     */
    DisplayPreferencesApi.prototype.getDisplayPreferences = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DisplayPreferencesApiFp)(this.configuration).getDisplayPreferences(requestParameters.displayPreferencesId, requestParameters.userId, requestParameters.client, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update Display Preferences.
     * @param {DisplayPreferencesApiUpdateDisplayPreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisplayPreferencesApi
     */
    DisplayPreferencesApi.prototype.updateDisplayPreferences = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DisplayPreferencesApiFp)(this.configuration).updateDisplayPreferences(requestParameters.displayPreferencesId, requestParameters.userId, requestParameters.client, requestParameters.displayPreferencesDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DisplayPreferencesApi;
}(base_1.BaseAPI));
exports.DisplayPreferencesApi = DisplayPreferencesApi;

},{"../base":68,"../common":69,"axios":362}],19:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlnaApi = exports.DlnaApiFactory = exports.DlnaApiFp = exports.DlnaApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DlnaApi - axios parameter creator
 * @export
 */
var DlnaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Creates a profile.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: function (deviceProfile, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Dlna/Profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceProfile, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a profile.
         * @param {string} profileId Profile id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile: function (profileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'profileId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProfile', 'profileId', profileId);
                            localVarPath = "/Dlna/Profiles/{profileId}"
                                .replace("{".concat("profileId", "}"), encodeURIComponent(String(profileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the default profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultProfile: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Dlna/Profiles/Default";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a single profile.
         * @param {string} profileId Profile Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (profileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'profileId' is not null or undefined
                            (0, common_1.assertParamExists)('getProfile', 'profileId', profileId);
                            localVarPath = "/Dlna/Profiles/{profileId}"
                                .replace("{".concat("profileId", "}"), encodeURIComponent(String(profileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get profile infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileInfos: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Dlna/ProfileInfos";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a profile.
         * @param {string} profileId Profile id.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: function (profileId, deviceProfile, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'profileId' is not null or undefined
                            (0, common_1.assertParamExists)('updateProfile', 'profileId', profileId);
                            localVarPath = "/Dlna/Profiles/{profileId}"
                                .replace("{".concat("profileId", "}"), encodeURIComponent(String(profileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceProfile, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DlnaApiAxiosParamCreator = DlnaApiAxiosParamCreator;
/**
 * DlnaApi - functional programming interface
 * @export
 */
var DlnaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DlnaApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates a profile.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: function (deviceProfile, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createProfile(deviceProfile, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a profile.
         * @param {string} profileId Profile id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile: function (profileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProfile(profileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the default profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultProfile: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultProfile(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a single profile.
         * @param {string} profileId Profile Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (profileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProfile(profileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get profile infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileInfos: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProfileInfos(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a profile.
         * @param {string} profileId Profile id.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: function (profileId, deviceProfile, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProfile(profileId, deviceProfile, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DlnaApiFp = DlnaApiFp;
/**
 * DlnaApi - factory interface
 * @export
 */
var DlnaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DlnaApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates a profile.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: function (deviceProfile, options) {
            return localVarFp.createProfile(deviceProfile, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes a profile.
         * @param {string} profileId Profile id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile: function (profileId, options) {
            return localVarFp.deleteProfile(profileId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the default profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultProfile: function (options) {
            return localVarFp.getDefaultProfile(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a single profile.
         * @param {string} profileId Profile Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (profileId, options) {
            return localVarFp.getProfile(profileId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get profile infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileInfos: function (options) {
            return localVarFp.getProfileInfos(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a profile.
         * @param {string} profileId Profile id.
         * @param {DeviceProfile} [deviceProfile] Device profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: function (profileId, deviceProfile, options) {
            return localVarFp.updateProfile(profileId, deviceProfile, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DlnaApiFactory = DlnaApiFactory;
/**
 * DlnaApi - object-oriented interface
 * @export
 * @class DlnaApi
 * @extends {BaseAPI}
 */
var DlnaApi = /** @class */ (function (_super) {
    __extends(DlnaApi, _super);
    function DlnaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Creates a profile.
     * @param {DlnaApiCreateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.createProfile = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DlnaApiFp)(this.configuration).createProfile(requestParameters.deviceProfile, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes a profile.
     * @param {DlnaApiDeleteProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.deleteProfile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaApiFp)(this.configuration).deleteProfile(requestParameters.profileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the default profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.getDefaultProfile = function (options) {
        var _this = this;
        return (0, exports.DlnaApiFp)(this.configuration).getDefaultProfile(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a single profile.
     * @param {DlnaApiGetProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.getProfile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaApiFp)(this.configuration).getProfile(requestParameters.profileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get profile infos.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.getProfileInfos = function (options) {
        var _this = this;
        return (0, exports.DlnaApiFp)(this.configuration).getProfileInfos(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a profile.
     * @param {DlnaApiUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaApi
     */
    DlnaApi.prototype.updateProfile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaApiFp)(this.configuration).updateProfile(requestParameters.profileId, requestParameters.deviceProfile, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DlnaApi;
}(base_1.BaseAPI));
exports.DlnaApi = DlnaApi;

},{"../base":68,"../common":69,"axios":362}],20:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlnaServerApi = exports.DlnaServerApiFactory = exports.DlnaServerApiFp = exports.DlnaServerApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DlnaServerApi - axios parameter creator
 * @export
 */
var DlnaServerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getConnectionManager', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ConnectionManager"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager2: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getConnectionManager2', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager3: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getConnectionManager3', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getContentDirectory', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ContentDirectory"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory2: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getContentDirectory2', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory3: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getContentDirectory3', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getDescriptionXml', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/description"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml2: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getDescriptionXml2', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/description.xml"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcon: function (fileName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'fileName' is not null or undefined
                    (0, common_1.assertParamExists)('getIcon', 'fileName', fileName);
                    localVarPath = "/Dlna/icons/{fileName}"
                        .replace("{".concat("fileName", "}"), encodeURIComponent(String(fileName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconId: function (serverId, fileName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getIconId', 'serverId', serverId);
                    // verify required parameter 'fileName' is not null or undefined
                    (0, common_1.assertParamExists)('getIconId', 'fileName', fileName);
                    localVarPath = "/Dlna/{serverId}/icons/{fileName}"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)))
                        .replace("{".concat("fileName", "}"), encodeURIComponent(String(fileName)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getMediaReceiverRegistrar', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar2: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getMediaReceiverRegistrar2', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar3: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('getMediaReceiverRegistrar3', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processConnectionManagerControlRequest: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('processConnectionManagerControlRequest', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ConnectionManager/Control"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processContentDirectoryControlRequest: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('processContentDirectoryControlRequest', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/ContentDirectory/Control"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMediaReceiverRegistrarControlRequest: function (serverId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'serverId' is not null or undefined
                    (0, common_1.assertParamExists)('processMediaReceiverRegistrarControlRequest', 'serverId', serverId);
                    localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/Control"
                        .replace("{".concat("serverId", "}"), encodeURIComponent(String(serverId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DlnaServerApiAxiosParamCreator = DlnaServerApiAxiosParamCreator;
/**
 * DlnaServerApi - functional programming interface
 * @export
 */
var DlnaServerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DlnaServerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectionManager(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager2: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectionManager2(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager3: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectionManager3(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getContentDirectory(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory2: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getContentDirectory2(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory3: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getContentDirectory3(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDescriptionXml(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml2: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDescriptionXml2(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcon: function (fileName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIcon(fileName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconId: function (serverId, fileName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIconId(serverId, fileName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaReceiverRegistrar(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar2: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaReceiverRegistrar2(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar3: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaReceiverRegistrar3(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processConnectionManagerControlRequest: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.processConnectionManagerControlRequest(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processContentDirectoryControlRequest: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.processContentDirectoryControlRequest(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMediaReceiverRegistrarControlRequest: function (serverId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.processMediaReceiverRegistrarControlRequest(serverId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DlnaServerApiFp = DlnaServerApiFp;
/**
 * DlnaServerApi - factory interface
 * @export
 */
var DlnaServerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DlnaServerApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager: function (serverId, options) {
            return localVarFp.getConnectionManager(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager2: function (serverId, options) {
            return localVarFp.getConnectionManager2(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager3: function (serverId, options) {
            return localVarFp.getConnectionManager3(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory: function (serverId, options) {
            return localVarFp.getContentDirectory(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory2: function (serverId, options) {
            return localVarFp.getContentDirectory2(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory3: function (serverId, options) {
            return localVarFp.getContentDirectory3(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml: function (serverId, options) {
            return localVarFp.getDescriptionXml(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml2: function (serverId, options) {
            return localVarFp.getDescriptionXml2(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcon: function (fileName, options) {
            return localVarFp.getIcon(fileName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconId: function (serverId, fileName, options) {
            return localVarFp.getIconId(serverId, fileName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar: function (serverId, options) {
            return localVarFp.getMediaReceiverRegistrar(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar2: function (serverId, options) {
            return localVarFp.getMediaReceiverRegistrar2(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar3: function (serverId, options) {
            return localVarFp.getMediaReceiverRegistrar3(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processConnectionManagerControlRequest: function (serverId, options) {
            return localVarFp.processConnectionManagerControlRequest(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processContentDirectoryControlRequest: function (serverId, options) {
            return localVarFp.processContentDirectoryControlRequest(serverId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMediaReceiverRegistrarControlRequest: function (serverId, options) {
            return localVarFp.processMediaReceiverRegistrarControlRequest(serverId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DlnaServerApiFactory = DlnaServerApiFactory;
/**
 * DlnaServerApi - object-oriented interface
 * @export
 * @class DlnaServerApi
 * @extends {BaseAPI}
 */
var DlnaServerApi = /** @class */ (function (_super) {
    __extends(DlnaServerApi, _super);
    function DlnaServerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetConnectionManagerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getConnectionManager = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getConnectionManager(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetConnectionManager2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getConnectionManager2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getConnectionManager2(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetConnectionManager3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getConnectionManager3 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getConnectionManager3(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna content directory xml.
     * @param {DlnaServerApiGetContentDirectoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getContentDirectory = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getContentDirectory(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna content directory xml.
     * @param {DlnaServerApiGetContentDirectory2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getContentDirectory2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getContentDirectory2(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna content directory xml.
     * @param {DlnaServerApiGetContentDirectory3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getContentDirectory3 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getContentDirectory3(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get Description Xml.
     * @param {DlnaServerApiGetDescriptionXmlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getDescriptionXml = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getDescriptionXml(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get Description Xml.
     * @param {DlnaServerApiGetDescriptionXml2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getDescriptionXml2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getDescriptionXml2(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a server icon.
     * @param {DlnaServerApiGetIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getIcon = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getIcon(requestParameters.fileName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a server icon.
     * @param {DlnaServerApiGetIconIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getIconId = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getIconId(requestParameters.serverId, requestParameters.fileName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetMediaReceiverRegistrarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getMediaReceiverRegistrar = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getMediaReceiverRegistrar(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetMediaReceiverRegistrar2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getMediaReceiverRegistrar2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getMediaReceiverRegistrar2(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets Dlna media receiver registrar xml.
     * @param {DlnaServerApiGetMediaReceiverRegistrar3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.getMediaReceiverRegistrar3 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).getMediaReceiverRegistrar3(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Process a connection manager control request.
     * @param {DlnaServerApiProcessConnectionManagerControlRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.processConnectionManagerControlRequest = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).processConnectionManagerControlRequest(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Process a content directory control request.
     * @param {DlnaServerApiProcessContentDirectoryControlRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.processContentDirectoryControlRequest = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).processContentDirectoryControlRequest(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Process a media receiver registrar control request.
     * @param {DlnaServerApiProcessMediaReceiverRegistrarControlRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    DlnaServerApi.prototype.processMediaReceiverRegistrarControlRequest = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DlnaServerApiFp)(this.configuration).processMediaReceiverRegistrarControlRequest(requestParameters.serverId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DlnaServerApi;
}(base_1.BaseAPI));
exports.DlnaServerApi = DlnaServerApi;

},{"../base":68,"../common":69,"axios":362}],21:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicHlsApi = exports.DynamicHlsApiFactory = exports.DynamicHlsApiFp = exports.DynamicHlsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DynamicHlsApi - axios parameter creator
 * @export
 */
var DynamicHlsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsAudioSegment', 'itemId', itemId);
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsAudioSegment', 'playlistId', playlistId);
                            // verify required parameter 'segmentId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsAudioSegment', 'segmentId', segmentId);
                            // verify required parameter 'container' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsAudioSegment', 'container', container);
                            localVarPath = "/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)))
                                .replace("{".concat("segmentId", "}"), encodeURIComponent(String(segmentId)))
                                .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsVideoSegment', 'itemId', itemId);
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsVideoSegment', 'playlistId', playlistId);
                            // verify required parameter 'segmentId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsVideoSegment', 'segmentId', segmentId);
                            // verify required parameter 'container' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsVideoSegment', 'container', container);
                            localVarPath = "/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)))
                                .replace("{".concat("segmentId", "}"), encodeURIComponent(String(segmentId)))
                                .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getMasterHlsAudioPlaylist', 'itemId', itemId);
                            // verify required parameter 'mediaSourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getMasterHlsAudioPlaylist', 'mediaSourceId', mediaSourceId);
                            localVarPath = "/Audio/{itemId}/master.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            if (enableAdaptiveBitrateStreaming !== undefined) {
                                localVarQueryParameter['enableAdaptiveBitrateStreaming'] = enableAdaptiveBitrateStreaming;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getMasterHlsVideoPlaylist', 'itemId', itemId);
                            // verify required parameter 'mediaSourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getMasterHlsVideoPlaylist', 'mediaSourceId', mediaSourceId);
                            localVarPath = "/Videos/{itemId}/master.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            if (enableAdaptiveBitrateStreaming !== undefined) {
                                localVarQueryParameter['enableAdaptiveBitrateStreaming'] = enableAdaptiveBitrateStreaming;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsAudioPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getVariantHlsAudioPlaylist', 'itemId', itemId);
                            localVarPath = "/Audio/{itemId}/main.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsVideoPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getVariantHlsVideoPlaylist', 'itemId', itemId);
                            localVarPath = "/Videos/{itemId}/main.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('headMasterHlsAudioPlaylist', 'itemId', itemId);
                            // verify required parameter 'mediaSourceId' is not null or undefined
                            (0, common_1.assertParamExists)('headMasterHlsAudioPlaylist', 'mediaSourceId', mediaSourceId);
                            localVarPath = "/Audio/{itemId}/master.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            if (enableAdaptiveBitrateStreaming !== undefined) {
                                localVarQueryParameter['enableAdaptiveBitrateStreaming'] = enableAdaptiveBitrateStreaming;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('headMasterHlsVideoPlaylist', 'itemId', itemId);
                            // verify required parameter 'mediaSourceId' is not null or undefined
                            (0, common_1.assertParamExists)('headMasterHlsVideoPlaylist', 'mediaSourceId', mediaSourceId);
                            localVarPath = "/Videos/{itemId}/master.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            if (enableAdaptiveBitrateStreaming !== undefined) {
                                localVarQueryParameter['enableAdaptiveBitrateStreaming'] = enableAdaptiveBitrateStreaming;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DynamicHlsApiAxiosParamCreator = DynamicHlsApiAxiosParamCreator;
/**
 * DynamicHlsApi - functional programming interface
 * @export
 */
var DynamicHlsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DynamicHlsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsAudioSegment(itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsVideoSegment(itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMasterHlsAudioPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMasterHlsVideoPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsAudioPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVariantHlsAudioPlaylist(itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsVideoPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVariantHlsVideoPlaylist(itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headMasterHlsAudioPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headMasterHlsVideoPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DynamicHlsApiFp = DynamicHlsApiFp;
/**
 * DynamicHlsApi - factory interface
 * @export
 */
var DynamicHlsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DynamicHlsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getHlsAudioSegment(itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {number} segmentId The segment id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegment: function (itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getHlsVideoSegment(itemId, playlistId, segmentId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return localVarFp.getMasterHlsAudioPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return localVarFp.getMasterHlsVideoPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsAudioPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getVariantHlsAudioPlaylist(itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream using HTTP live streaming.
         * @param {string} itemId The item id.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantHlsVideoPlaylist: function (itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getVariantHlsVideoPlaylist(itemId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsAudioPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return localVarFp.headMasterHlsAudioPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, maxStreamingBitrate, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video hls playlist stream.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media version id, if playing an alternate version.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {boolean} [enableAdaptiveBitrateStreaming] Enable adaptive bitrate streaming.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMasterHlsVideoPlaylist: function (itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options) {
            return localVarFp.headMasterHlsVideoPlaylist(itemId, mediaSourceId, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, enableAdaptiveBitrateStreaming, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DynamicHlsApiFactory = DynamicHlsApiFactory;
/**
 * DynamicHlsApi - object-oriented interface
 * @export
 * @class DynamicHlsApi
 * @extends {BaseAPI}
 */
var DynamicHlsApi = /** @class */ (function (_super) {
    __extends(DynamicHlsApi, _super);
    function DynamicHlsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a video stream using HTTP live streaming.
     * @param {DynamicHlsApiGetHlsAudioSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getHlsAudioSegment = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getHlsAudioSegment(requestParameters.itemId, requestParameters.playlistId, requestParameters.segmentId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream using HTTP live streaming.
     * @param {DynamicHlsApiGetHlsVideoSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getHlsVideoSegment = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getHlsVideoSegment(requestParameters.itemId, requestParameters.playlistId, requestParameters.segmentId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio hls playlist stream.
     * @param {DynamicHlsApiGetMasterHlsAudioPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getMasterHlsAudioPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getMasterHlsAudioPlaylist(requestParameters.itemId, requestParameters.mediaSourceId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, requestParameters.enableAdaptiveBitrateStreaming, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video hls playlist stream.
     * @param {DynamicHlsApiGetMasterHlsVideoPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getMasterHlsVideoPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getMasterHlsVideoPlaylist(requestParameters.itemId, requestParameters.mediaSourceId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, requestParameters.enableAdaptiveBitrateStreaming, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio stream using HTTP live streaming.
     * @param {DynamicHlsApiGetVariantHlsAudioPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getVariantHlsAudioPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getVariantHlsAudioPlaylist(requestParameters.itemId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream using HTTP live streaming.
     * @param {DynamicHlsApiGetVariantHlsVideoPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.getVariantHlsVideoPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).getVariantHlsVideoPlaylist(requestParameters.itemId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio hls playlist stream.
     * @param {DynamicHlsApiHeadMasterHlsAudioPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.headMasterHlsAudioPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).headMasterHlsAudioPlaylist(requestParameters.itemId, requestParameters.mediaSourceId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, requestParameters.enableAdaptiveBitrateStreaming, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video hls playlist stream.
     * @param {DynamicHlsApiHeadMasterHlsVideoPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicHlsApi
     */
    DynamicHlsApi.prototype.headMasterHlsVideoPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DynamicHlsApiFp)(this.configuration).headMasterHlsVideoPlaylist(requestParameters.itemId, requestParameters.mediaSourceId, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, requestParameters.enableAdaptiveBitrateStreaming, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DynamicHlsApi;
}(base_1.BaseAPI));
exports.DynamicHlsApi = DynamicHlsApi;

},{"../base":68,"../common":69,"axios":362}],22:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentApi = exports.EnvironmentApiFactory = exports.EnvironmentApiFp = exports.EnvironmentApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * EnvironmentApi - axios parameter creator
 * @export
 */
var EnvironmentApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get Default directory browser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultDirectoryBrowser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Environment/DefaultDirectoryBrowser";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the contents of a given directory in the file system.
         * @param {string} path The path.
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false.
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectoryContents: function (path, includeFiles, includeDirectories, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'path' is not null or undefined
                            (0, common_1.assertParamExists)('getDirectoryContents', 'path', path);
                            localVarPath = "/Environment/DirectoryContents";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (path !== undefined) {
                                localVarQueryParameter['path'] = path;
                            }
                            if (includeFiles !== undefined) {
                                localVarQueryParameter['includeFiles'] = includeFiles;
                            }
                            if (includeDirectories !== undefined) {
                                localVarQueryParameter['includeDirectories'] = includeDirectories;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available drives from the server\'s file system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrives: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Environment/Drives";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets network paths.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getNetworkShares: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Environment/NetworkShares";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the parent path of a given path.
         * @param {string} path The path.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentPath: function (path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'path' is not null or undefined
                            (0, common_1.assertParamExists)('getParentPath', 'path', path);
                            localVarPath = "/Environment/ParentPath";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (path !== undefined) {
                                localVarQueryParameter['path'] = path;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Validates path.
         * @param {ValidatePathDto} validatePathDto Validate request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatePath: function (validatePathDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'validatePathDto' is not null or undefined
                            (0, common_1.assertParamExists)('validatePath', 'validatePathDto', validatePathDto);
                            localVarPath = "/Environment/ValidatePath";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(validatePathDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.EnvironmentApiAxiosParamCreator = EnvironmentApiAxiosParamCreator;
/**
 * EnvironmentApi - functional programming interface
 * @export
 */
var EnvironmentApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.EnvironmentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Default directory browser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultDirectoryBrowser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultDirectoryBrowser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the contents of a given directory in the file system.
         * @param {string} path The path.
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false.
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectoryContents: function (path, includeFiles, includeDirectories, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDirectoryContents(path, includeFiles, includeDirectories, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available drives from the server\'s file system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrives: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDrives(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets network paths.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getNetworkShares: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNetworkShares(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the parent path of a given path.
         * @param {string} path The path.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentPath: function (path, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getParentPath(path, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Validates path.
         * @param {ValidatePathDto} validatePathDto Validate request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatePath: function (validatePathDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatePath(validatePathDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.EnvironmentApiFp = EnvironmentApiFp;
/**
 * EnvironmentApi - factory interface
 * @export
 */
var EnvironmentApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.EnvironmentApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Default directory browser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultDirectoryBrowser: function (options) {
            return localVarFp.getDefaultDirectoryBrowser(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the contents of a given directory in the file system.
         * @param {string} path The path.
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false.
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectoryContents: function (path, includeFiles, includeDirectories, options) {
            return localVarFp.getDirectoryContents(path, includeFiles, includeDirectories, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available drives from the server\'s file system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrives: function (options) {
            return localVarFp.getDrives(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets network paths.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getNetworkShares: function (options) {
            return localVarFp.getNetworkShares(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the parent path of a given path.
         * @param {string} path The path.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentPath: function (path, options) {
            return localVarFp.getParentPath(path, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Validates path.
         * @param {ValidatePathDto} validatePathDto Validate request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatePath: function (validatePathDto, options) {
            return localVarFp.validatePath(validatePathDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.EnvironmentApiFactory = EnvironmentApiFactory;
/**
 * EnvironmentApi - object-oriented interface
 * @export
 * @class EnvironmentApi
 * @extends {BaseAPI}
 */
var EnvironmentApi = /** @class */ (function (_super) {
    __extends(EnvironmentApi, _super);
    function EnvironmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get Default directory browser.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.getDefaultDirectoryBrowser = function (options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).getDefaultDirectoryBrowser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the contents of a given directory in the file system.
     * @param {EnvironmentApiGetDirectoryContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.getDirectoryContents = function (requestParameters, options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).getDirectoryContents(requestParameters.path, requestParameters.includeFiles, requestParameters.includeDirectories, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available drives from the server\'s file system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.getDrives = function (options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).getDrives(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets network paths.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.getNetworkShares = function (options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).getNetworkShares(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the parent path of a given path.
     * @param {EnvironmentApiGetParentPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.getParentPath = function (requestParameters, options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).getParentPath(requestParameters.path, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Validates path.
     * @param {EnvironmentApiValidatePathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    EnvironmentApi.prototype.validatePath = function (requestParameters, options) {
        var _this = this;
        return (0, exports.EnvironmentApiFp)(this.configuration).validatePath(requestParameters.validatePathDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnvironmentApi;
}(base_1.BaseAPI));
exports.EnvironmentApi = EnvironmentApi;

},{"../base":68,"../common":69,"axios":362}],23:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterApi = exports.FilterApiFactory = exports.FilterApiFp = exports.FilterApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * FilterApi - axios parameter creator
 * @export
 */
var FilterApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isAiring] Optional. Is item airing.
         * @param {boolean} [isMovie] Optional. Is item movie.
         * @param {boolean} [isSports] Optional. Is item sports.
         * @param {boolean} [isKids] Optional. Is item kids.
         * @param {boolean} [isNews] Optional. Is item news.
         * @param {boolean} [isSeries] Optional. Is item series.
         * @param {boolean} [recursive] Optional. Search recursive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFilters: function (userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Items/Filters2";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (isAiring !== undefined) {
                                localVarQueryParameter['isAiring'] = isAiring;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (recursive !== undefined) {
                                localVarQueryParameter['recursive'] = recursive;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets legacy query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Parent id.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFiltersLegacy: function (userId, parentId, includeItemTypes, mediaTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Items/Filters";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FilterApiAxiosParamCreator = FilterApiAxiosParamCreator;
/**
 * FilterApi - functional programming interface
 * @export
 */
var FilterApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FilterApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isAiring] Optional. Is item airing.
         * @param {boolean} [isMovie] Optional. Is item movie.
         * @param {boolean} [isSports] Optional. Is item sports.
         * @param {boolean} [isKids] Optional. Is item kids.
         * @param {boolean} [isNews] Optional. Is item news.
         * @param {boolean} [isSeries] Optional. Is item series.
         * @param {boolean} [recursive] Optional. Search recursive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFilters: function (userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQueryFilters(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets legacy query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Parent id.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFiltersLegacy: function (userId, parentId, includeItemTypes, mediaTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getQueryFiltersLegacy(userId, parentId, includeItemTypes, mediaTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.FilterApiFp = FilterApiFp;
/**
 * FilterApi - factory interface
 * @export
 */
var FilterApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FilterApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isAiring] Optional. Is item airing.
         * @param {boolean} [isMovie] Optional. Is item movie.
         * @param {boolean} [isSports] Optional. Is item sports.
         * @param {boolean} [isKids] Optional. Is item kids.
         * @param {boolean} [isNews] Optional. Is item news.
         * @param {boolean} [isSeries] Optional. Is item series.
         * @param {boolean} [recursive] Optional. Search recursive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFilters: function (userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, options) {
            return localVarFp.getQueryFilters(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets legacy query filters.
         * @param {string} [userId] Optional. User id.
         * @param {string} [parentId] Optional. Parent id.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryFiltersLegacy: function (userId, parentId, includeItemTypes, mediaTypes, options) {
            return localVarFp.getQueryFiltersLegacy(userId, parentId, includeItemTypes, mediaTypes, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FilterApiFactory = FilterApiFactory;
/**
 * FilterApi - object-oriented interface
 * @export
 * @class FilterApi
 * @extends {BaseAPI}
 */
var FilterApi = /** @class */ (function (_super) {
    __extends(FilterApi, _super);
    function FilterApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets query filters.
     * @param {FilterApiGetQueryFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterApi
     */
    FilterApi.prototype.getQueryFilters = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.FilterApiFp)(this.configuration).getQueryFilters(requestParameters.userId, requestParameters.parentId, requestParameters.includeItemTypes, requestParameters.isAiring, requestParameters.isMovie, requestParameters.isSports, requestParameters.isKids, requestParameters.isNews, requestParameters.isSeries, requestParameters.recursive, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets legacy query filters.
     * @param {FilterApiGetQueryFiltersLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterApi
     */
    FilterApi.prototype.getQueryFiltersLegacy = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.FilterApiFp)(this.configuration).getQueryFiltersLegacy(requestParameters.userId, requestParameters.parentId, requestParameters.includeItemTypes, requestParameters.mediaTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FilterApi;
}(base_1.BaseAPI));
exports.FilterApi = FilterApi;

},{"../base":68,"../common":69,"axios":362}],24:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenresApi = exports.GenresApiFactory = exports.GenresApiFp = exports.GenresApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * GenresApi - axios parameter creator
 * @export
 */
var GenresApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenre: function (genreName, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'genreName' is not null or undefined
                            (0, common_1.assertParamExists)('getGenre', 'genreName', genreName);
                            localVarPath = "/Genres/{genreName}"
                                .replace("{".concat("genreName", "}"), encodeURIComponent(String(genreName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Genres";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.GenresApiAxiosParamCreator = GenresApiAxiosParamCreator;
/**
 * GenresApi - functional programming interface
 * @export
 */
var GenresApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GenresApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenre: function (genreName, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGenre(genreName, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGenres(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.GenresApiFp = GenresApiFp;
/**
 * GenresApi - factory interface
 * @export
 */
var GenresApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GenresApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenre: function (genreName, userId, options) {
            return localVarFp.getGenre(genreName, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return localVarFp.getGenres(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GenresApiFactory = GenresApiFactory;
/**
 * GenresApi - object-oriented interface
 * @export
 * @class GenresApi
 * @extends {BaseAPI}
 */
var GenresApi = /** @class */ (function (_super) {
    __extends(GenresApi, _super);
    function GenresApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a genre, by name.
     * @param {GenresApiGetGenreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    GenresApi.prototype.getGenre = function (requestParameters, options) {
        var _this = this;
        return (0, exports.GenresApiFp)(this.configuration).getGenre(requestParameters.genreName, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all genres from a given item, folder, or the entire library.
     * @param {GenresApiGetGenresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    GenresApi.prototype.getGenres = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.GenresApiFp)(this.configuration).getGenres(requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.isFavorite, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.userId, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.enableImages, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GenresApi;
}(base_1.BaseAPI));
exports.GenresApi = GenresApi;

},{"../base":68,"../common":69,"axios":362}],25:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HlsSegmentApi = exports.HlsSegmentApiFactory = exports.HlsSegmentApiFp = exports.HlsSegmentApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * HlsSegmentApi - axios parameter creator
 * @export
 */
var HlsSegmentApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyAac: function (itemId, segmentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsAudioSegmentLegacyAac', 'itemId', itemId);
                    // verify required parameter 'segmentId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsAudioSegmentLegacyAac', 'segmentId', segmentId);
                    localVarPath = "/Audio/{itemId}/hls/{segmentId}/stream.aac"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("segmentId", "}"), encodeURIComponent(String(segmentId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyMp3: function (itemId, segmentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsAudioSegmentLegacyMp3', 'itemId', itemId);
                    // verify required parameter 'segmentId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsAudioSegmentLegacyMp3', 'segmentId', segmentId);
                    localVarPath = "/Audio/{itemId}/hls/{segmentId}/stream.mp3"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("segmentId", "}"), encodeURIComponent(String(segmentId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a hls video playlist.
         * @param {string} itemId The video id.
         * @param {string} playlistId The playlist id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsPlaylistLegacy: function (itemId, playlistId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsPlaylistLegacy', 'itemId', itemId);
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('getHlsPlaylistLegacy', 'playlistId', playlistId);
                            localVarPath = "/Videos/{itemId}/hls/{playlistId}/stream.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a hls video segment.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {string} segmentId The segment id.
         * @param {string} segmentContainer The segment container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegmentLegacy: function (itemId, playlistId, segmentId, segmentContainer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsVideoSegmentLegacy', 'itemId', itemId);
                    // verify required parameter 'playlistId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsVideoSegmentLegacy', 'playlistId', playlistId);
                    // verify required parameter 'segmentId' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsVideoSegmentLegacy', 'segmentId', segmentId);
                    // verify required parameter 'segmentContainer' is not null or undefined
                    (0, common_1.assertParamExists)('getHlsVideoSegmentLegacy', 'segmentContainer', segmentContainer);
                    localVarPath = "/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)))
                        .replace("{".concat("segmentId", "}"), encodeURIComponent(String(segmentId)))
                        .replace("{".concat("segmentContainer", "}"), encodeURIComponent(String(segmentContainer)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Stops an active encoding.
         * @param {string} deviceId The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} playSessionId The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopEncodingProcess: function (deviceId, playSessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceId' is not null or undefined
                            (0, common_1.assertParamExists)('stopEncodingProcess', 'deviceId', deviceId);
                            // verify required parameter 'playSessionId' is not null or undefined
                            (0, common_1.assertParamExists)('stopEncodingProcess', 'playSessionId', playSessionId);
                            localVarPath = "/Videos/ActiveEncodings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.HlsSegmentApiAxiosParamCreator = HlsSegmentApiAxiosParamCreator;
/**
 * HlsSegmentApi - functional programming interface
 * @export
 */
var HlsSegmentApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.HlsSegmentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyAac: function (itemId, segmentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsAudioSegmentLegacyAac(itemId, segmentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyMp3: function (itemId, segmentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsAudioSegmentLegacyMp3(itemId, segmentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a hls video playlist.
         * @param {string} itemId The video id.
         * @param {string} playlistId The playlist id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsPlaylistLegacy: function (itemId, playlistId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsPlaylistLegacy(itemId, playlistId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a hls video segment.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {string} segmentId The segment id.
         * @param {string} segmentContainer The segment container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegmentLegacy: function (itemId, playlistId, segmentId, segmentContainer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHlsVideoSegmentLegacy(itemId, playlistId, segmentId, segmentContainer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Stops an active encoding.
         * @param {string} deviceId The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} playSessionId The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopEncodingProcess: function (deviceId, playSessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stopEncodingProcess(deviceId, playSessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.HlsSegmentApiFp = HlsSegmentApiFp;
/**
 * HlsSegmentApi - factory interface
 * @export
 */
var HlsSegmentApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.HlsSegmentApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyAac: function (itemId, segmentId, options) {
            return localVarFp.getHlsAudioSegmentLegacyAac(itemId, segmentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the specified audio segment for an audio item.
         * @param {string} itemId The item id.
         * @param {string} segmentId The segment id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsAudioSegmentLegacyMp3: function (itemId, segmentId, options) {
            return localVarFp.getHlsAudioSegmentLegacyMp3(itemId, segmentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a hls video playlist.
         * @param {string} itemId The video id.
         * @param {string} playlistId The playlist id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsPlaylistLegacy: function (itemId, playlistId, options) {
            return localVarFp.getHlsPlaylistLegacy(itemId, playlistId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a hls video segment.
         * @param {string} itemId The item id.
         * @param {string} playlistId The playlist id.
         * @param {string} segmentId The segment id.
         * @param {string} segmentContainer The segment container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsVideoSegmentLegacy: function (itemId, playlistId, segmentId, segmentContainer, options) {
            return localVarFp.getHlsVideoSegmentLegacy(itemId, playlistId, segmentId, segmentContainer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Stops an active encoding.
         * @param {string} deviceId The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} playSessionId The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopEncodingProcess: function (deviceId, playSessionId, options) {
            return localVarFp.stopEncodingProcess(deviceId, playSessionId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HlsSegmentApiFactory = HlsSegmentApiFactory;
/**
 * HlsSegmentApi - object-oriented interface
 * @export
 * @class HlsSegmentApi
 * @extends {BaseAPI}
 */
var HlsSegmentApi = /** @class */ (function (_super) {
    __extends(HlsSegmentApi, _super);
    function HlsSegmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets the specified audio segment for an audio item.
     * @param {HlsSegmentApiGetHlsAudioSegmentLegacyAacRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsSegmentApi
     */
    HlsSegmentApi.prototype.getHlsAudioSegmentLegacyAac = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HlsSegmentApiFp)(this.configuration).getHlsAudioSegmentLegacyAac(requestParameters.itemId, requestParameters.segmentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the specified audio segment for an audio item.
     * @param {HlsSegmentApiGetHlsAudioSegmentLegacyMp3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsSegmentApi
     */
    HlsSegmentApi.prototype.getHlsAudioSegmentLegacyMp3 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HlsSegmentApiFp)(this.configuration).getHlsAudioSegmentLegacyMp3(requestParameters.itemId, requestParameters.segmentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a hls video playlist.
     * @param {HlsSegmentApiGetHlsPlaylistLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsSegmentApi
     */
    HlsSegmentApi.prototype.getHlsPlaylistLegacy = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HlsSegmentApiFp)(this.configuration).getHlsPlaylistLegacy(requestParameters.itemId, requestParameters.playlistId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a hls video segment.
     * @param {HlsSegmentApiGetHlsVideoSegmentLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsSegmentApi
     */
    HlsSegmentApi.prototype.getHlsVideoSegmentLegacy = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HlsSegmentApiFp)(this.configuration).getHlsVideoSegmentLegacy(requestParameters.itemId, requestParameters.playlistId, requestParameters.segmentId, requestParameters.segmentContainer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Stops an active encoding.
     * @param {HlsSegmentApiStopEncodingProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsSegmentApi
     */
    HlsSegmentApi.prototype.stopEncodingProcess = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HlsSegmentApiFp)(this.configuration).stopEncodingProcess(requestParameters.deviceId, requestParameters.playSessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HlsSegmentApi;
}(base_1.BaseAPI));
exports.HlsSegmentApi = HlsSegmentApi;

},{"../base":68,"../common":69,"axios":362}],26:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageApi = exports.ImageApiFactory = exports.ImageApiFp = exports.ImageApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ImageApi - axios parameter creator
 * @export
 */
var ImageApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImage: function (itemId, imageType, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItemImage', 'itemId', itemId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItemImage', 'imageType', imageType);
                            localVarPath = "/Items/{itemId}/Images/{imageType}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (imageIndex !== undefined) {
                                localVarQueryParameter['imageIndex'] = imageIndex;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImageByIndex: function (itemId, imageType, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItemImageByIndex', 'itemId', itemId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItemImageByIndex', 'imageType', imageType);
                            // verify required parameter 'imageIndex' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItemImageByIndex', 'imageIndex', imageIndex);
                            localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                                .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImage: function (userId, imageType, index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserImage', 'userId', userId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserImage', 'imageType', imageType);
                            localVarPath = "/Users/{userId}/Images/{imageType}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (index !== undefined) {
                                localVarQueryParameter['index'] = index;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImageByIndex: function (userId, imageType, index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserImageByIndex', 'userId', userId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserImageByIndex', 'imageType', imageType);
                            // verify required parameter 'index' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserImageByIndex', 'index', index);
                            localVarPath = "/Users/{userId}/Images/{imageType}/{index}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                                .replace("{".concat("index", "}"), encodeURIComponent(String(index)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getArtistImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getArtistImage', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getArtistImage', 'imageIndex', imageIndex);
                    localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getGenreImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getGenreImage', 'imageType', imageType);
                    localVarPath = "/Genres/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getGenreImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getGenreImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getGenreImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage', 'imageType', imageType);
                    localVarPath = "/Items/{itemId}/Images/{imageType}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'imageType', imageType);
                    // verify required parameter 'maxWidth' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'maxWidth', maxWidth);
                    // verify required parameter 'maxHeight' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'maxHeight', maxHeight);
                    // verify required parameter 'tag' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'tag', tag);
                    // verify required parameter 'format' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'format', format);
                    // verify required parameter 'percentPlayed' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'percentPlayed', percentPlayed);
                    // verify required parameter 'unplayedCount' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'unplayedCount', unplayedCount);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImage2', 'imageIndex', imageIndex);
                    localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("maxWidth", "}"), encodeURIComponent(String(maxWidth)))
                        .replace("{".concat("maxHeight", "}"), encodeURIComponent(String(maxHeight)))
                        .replace("{".concat("tag", "}"), encodeURIComponent(String(tag)))
                        .replace("{".concat("format", "}"), encodeURIComponent(String(format)))
                        .replace("{".concat("percentPlayed", "}"), encodeURIComponent(String(percentPlayed)))
                        .replace("{".concat("unplayedCount", "}"), encodeURIComponent(String(unplayedCount)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImageByIndex', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getItemImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageInfos: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getItemImageInfos', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/Images"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getMusicGenreImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getMusicGenreImage', 'imageType', imageType);
                    localVarPath = "/MusicGenres/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getMusicGenreImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getMusicGenreImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getMusicGenreImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getPersonImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getPersonImage', 'imageType', imageType);
                    localVarPath = "/Persons/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getPersonImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getPersonImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getPersonImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getStudioImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getStudioImage', 'imageType', imageType);
                    localVarPath = "/Studios/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getStudioImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getStudioImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getStudioImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserImage', 'userId', userId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getUserImage', 'imageType', imageType);
                    localVarPath = "/Users/{userId}/Images/{imageType}"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserImageByIndex', 'userId', userId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('getUserImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getUserImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headArtistImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headArtistImage', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headArtistImage', 'imageIndex', imageIndex);
                    localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headGenreImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headGenreImage', 'imageType', imageType);
                    localVarPath = "/Genres/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headGenreImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headGenreImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headGenreImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage', 'imageType', imageType);
                    localVarPath = "/Items/{itemId}/Images/{imageType}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'imageType', imageType);
                    // verify required parameter 'maxWidth' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'maxWidth', maxWidth);
                    // verify required parameter 'maxHeight' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'maxHeight', maxHeight);
                    // verify required parameter 'tag' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'tag', tag);
                    // verify required parameter 'format' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'format', format);
                    // verify required parameter 'percentPlayed' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'percentPlayed', percentPlayed);
                    // verify required parameter 'unplayedCount' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'unplayedCount', unplayedCount);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImage2', 'imageIndex', imageIndex);
                    localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("maxWidth", "}"), encodeURIComponent(String(maxWidth)))
                        .replace("{".concat("maxHeight", "}"), encodeURIComponent(String(maxHeight)))
                        .replace("{".concat("tag", "}"), encodeURIComponent(String(tag)))
                        .replace("{".concat("format", "}"), encodeURIComponent(String(format)))
                        .replace("{".concat("percentPlayed", "}"), encodeURIComponent(String(percentPlayed)))
                        .replace("{".concat("unplayedCount", "}"), encodeURIComponent(String(unplayedCount)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImageByIndex', 'itemId', itemId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headItemImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headMusicGenreImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headMusicGenreImage', 'imageType', imageType);
                    localVarPath = "/MusicGenres/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headMusicGenreImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headMusicGenreImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headMusicGenreImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headPersonImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headPersonImage', 'imageType', imageType);
                    localVarPath = "/Persons/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headPersonImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headPersonImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headPersonImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headStudioImage', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headStudioImage', 'imageType', imageType);
                    localVarPath = "/Studios/{name}/Images/{imageType}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('headStudioImageByIndex', 'name', name);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headStudioImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headStudioImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('headUserImage', 'userId', userId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headUserImage', 'imageType', imageType);
                    localVarPath = "/Users/{userId}/Images/{imageType}"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    if (imageIndex !== undefined) {
                        localVarQueryParameter['imageIndex'] = imageIndex;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('headUserImageByIndex', 'userId', userId);
                    // verify required parameter 'imageType' is not null or undefined
                    (0, common_1.assertParamExists)('headUserImageByIndex', 'imageType', imageType);
                    // verify required parameter 'imageIndex' is not null or undefined
                    (0, common_1.assertParamExists)('headUserImageByIndex', 'imageIndex', imageIndex);
                    localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                        .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                        .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (percentPlayed !== undefined) {
                        localVarQueryParameter['percentPlayed'] = percentPlayed;
                    }
                    if (unplayedCount !== undefined) {
                        localVarQueryParameter['unplayedCount'] = unplayedCount;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (quality !== undefined) {
                        localVarQueryParameter['quality'] = quality;
                    }
                    if (fillWidth !== undefined) {
                        localVarQueryParameter['fillWidth'] = fillWidth;
                    }
                    if (fillHeight !== undefined) {
                        localVarQueryParameter['fillHeight'] = fillHeight;
                    }
                    if (cropWhitespace !== undefined) {
                        localVarQueryParameter['cropWhitespace'] = cropWhitespace;
                    }
                    if (addPlayedIndicator !== undefined) {
                        localVarQueryParameter['addPlayedIndicator'] = addPlayedIndicator;
                    }
                    if (blur !== undefined) {
                        localVarQueryParameter['blur'] = blur;
                    }
                    if (backgroundColor !== undefined) {
                        localVarQueryParameter['backgroundColor'] = backgroundColor;
                    }
                    if (foregroundLayer !== undefined) {
                        localVarQueryParameter['foregroundLayer'] = foregroundLayer;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImage: function (userId, imageType, index, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('postUserImage', 'userId', userId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('postUserImage', 'imageType', imageType);
                            localVarPath = "/Users/{userId}/Images/{imageType}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (index !== undefined) {
                                localVarQueryParameter['index'] = index;
                            }
                            localVarHeaderParameter['Content-Type'] = 'image/_*';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImageByIndex: function (userId, imageType, index, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('postUserImageByIndex', 'userId', userId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('postUserImageByIndex', 'imageType', imageType);
                            // verify required parameter 'index' is not null or undefined
                            (0, common_1.assertParamExists)('postUserImageByIndex', 'index', index);
                            localVarPath = "/Users/{userId}/Images/{imageType}/{index}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                                .replace("{".concat("index", "}"), encodeURIComponent(String(index)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'image/_*';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImage: function (itemId, imageType, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('setItemImage', 'itemId', itemId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('setItemImage', 'imageType', imageType);
                            localVarPath = "/Items/{itemId}/Images/{imageType}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'image/_*';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImageByIndex: function (itemId, imageType, imageIndex, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('setItemImageByIndex', 'itemId', itemId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('setItemImageByIndex', 'imageType', imageType);
                            // verify required parameter 'imageIndex' is not null or undefined
                            (0, common_1.assertParamExists)('setItemImageByIndex', 'imageIndex', imageIndex);
                            localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                                .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'image/_*';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemImageIndex: function (itemId, imageType, imageIndex, newIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateItemImageIndex', 'itemId', itemId);
                            // verify required parameter 'imageType' is not null or undefined
                            (0, common_1.assertParamExists)('updateItemImageIndex', 'imageType', imageType);
                            // verify required parameter 'imageIndex' is not null or undefined
                            (0, common_1.assertParamExists)('updateItemImageIndex', 'imageIndex', imageIndex);
                            // verify required parameter 'newIndex' is not null or undefined
                            (0, common_1.assertParamExists)('updateItemImageIndex', 'newIndex', newIndex);
                            localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("imageType", "}"), encodeURIComponent(String(imageType)))
                                .replace("{".concat("imageIndex", "}"), encodeURIComponent(String(imageIndex)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (newIndex !== undefined) {
                                localVarQueryParameter['newIndex'] = newIndex;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ImageApiAxiosParamCreator = ImageApiAxiosParamCreator;
/**
 * ImageApi - functional programming interface
 * @export
 */
var ImageApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ImageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImage: function (itemId, imageType, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItemImage(itemId, imageType, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImageByIndex: function (itemId, imageType, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItemImageByIndex(itemId, imageType, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImage: function (userId, imageType, index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserImage(userId, imageType, index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImageByIndex: function (userId, imageType, index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserImageByIndex(userId, imageType, index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageInfos: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemImageInfos(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImage: function (userId, imageType, index, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postUserImage(userId, imageType, index, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImageByIndex: function (userId, imageType, index, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postUserImageByIndex(userId, imageType, index, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImage: function (itemId, imageType, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setItemImage(itemId, imageType, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImageByIndex: function (itemId, imageType, imageIndex, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setItemImageByIndex(itemId, imageType, imageIndex, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemImageIndex: function (itemId, imageType, imageIndex, newIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateItemImageIndex(itemId, imageType, imageIndex, newIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ImageApiFp = ImageApiFp;
/**
 * ImageApi - factory interface
 * @export
 */
var ImageApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ImageApiFp)(configuration);
    return {
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [imageIndex] The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImage: function (itemId, imageType, imageIndex, options) {
            return localVarFp.deleteItemImage(itemId, imageType, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete an item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex The image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemImageByIndex: function (itemId, imageType, imageIndex, options) {
            return localVarFp.deleteItemImageByIndex(itemId, imageType, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImage: function (userId, imageType, index, options) {
            return localVarFp.deleteUserImage(userId, imageType, index, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete the user\'s image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserImageByIndex: function (userId, imageType, index, options) {
            return localVarFp.deleteUserImageByIndex(userId, imageType, index, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get item image infos.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageInfos: function (itemId, options) {
            return localVarFp.getItemImageInfos(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.getUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.getUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get artist image by name.
         * @param {string} name Artist name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headArtistImage: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get genre image by name.
         * @param {string} name Genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage: function (itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} maxWidth The maximum image width to return.
         * @param {number} maxHeight The maximum image height to return.
         * @param {string} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
         * @param {number} percentPlayed Optional. Percent to render for the percent played overlay.
         * @param {number} unplayedCount Optional. Unplayed count overlay to render.
         * @param {number} imageIndex Image index.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImage2: function (itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the item\'s image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headItemImageByIndex: function (itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music genre image by name.
         * @param {string} name Music genre name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headMusicGenreImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get person image by name.
         * @param {string} name Person name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headPersonImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImage: function (name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get studio image by name.
         * @param {string} name Studio name.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headStudioImageByIndex: function (name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {number} [imageIndex] Image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImage: function (userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options) {
            return localVarFp.headUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user profile image.
         * @param {string} userId User id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Image index.
         * @param {string} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
         * @param {ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
         * @param {number} [maxWidth] The maximum image width to return.
         * @param {number} [maxHeight] The maximum image height to return.
         * @param {number} [percentPlayed] Optional. Percent to render for the percent played overlay.
         * @param {number} [unplayedCount] Optional. Unplayed count overlay to render.
         * @param {number} [width] The fixed image width to return.
         * @param {number} [height] The fixed image height to return.
         * @param {number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
         * @param {number} [fillWidth] Width of box to fill.
         * @param {number} [fillHeight] Height of box to fill.
         * @param {boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
         * @param {boolean} [addPlayedIndicator] Optional. Add a played indicator.
         * @param {number} [blur] Optional. Blur image.
         * @param {string} [backgroundColor] Optional. Apply a background color for transparent images.
         * @param {string} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUserImageByIndex: function (userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options) {
            return localVarFp.headUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} [index] (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImage: function (userId, imageType, index, body, options) {
            return localVarFp.postUserImage(userId, imageType, index, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets the user image.
         * @param {string} userId User Id.
         * @param {ImageType} imageType (Unused) Image type.
         * @param {number} index (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserImageByIndex: function (userId, imageType, index, body, options) {
            return localVarFp.postUserImageByIndex(userId, imageType, index, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImage: function (itemId, imageType, body, options) {
            return localVarFp.setItemImage(itemId, imageType, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex (Unused) Image index.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemImageByIndex: function (itemId, imageType, imageIndex, body, options) {
            return localVarFp.setItemImageByIndex(itemId, imageType, imageIndex, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates the index for an item image.
         * @param {string} itemId Item id.
         * @param {ImageType} imageType Image type.
         * @param {number} imageIndex Old image index.
         * @param {number} newIndex New image index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemImageIndex: function (itemId, imageType, imageIndex, newIndex, options) {
            return localVarFp.updateItemImageIndex(itemId, imageType, imageIndex, newIndex, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ImageApiFactory = ImageApiFactory;
/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
var ImageApi = /** @class */ (function (_super) {
    __extends(ImageApi, _super);
    function ImageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Delete an item\'s image.
     * @param {ImageApiDeleteItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.deleteItemImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).deleteItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete an item\'s image.
     * @param {ImageApiDeleteItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.deleteItemImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).deleteItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete the user\'s image.
     * @param {ImageApiDeleteUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.deleteUserImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).deleteUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete the user\'s image.
     * @param {ImageApiDeleteUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.deleteUserImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).deleteUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get artist image by name.
     * @param {ImageApiGetArtistImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getArtistImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getArtistImage(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get genre image by name.
     * @param {ImageApiGetGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getGenreImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get genre image by name.
     * @param {ImageApiGetGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getGenreImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getItemImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.addPlayedIndicator, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImage2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getItemImage2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getItemImage2(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.tag, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.imageIndex, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiGetItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getItemImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.addPlayedIndicator, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get item image infos.
     * @param {ImageApiGetItemImageInfosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getItemImageInfos = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getItemImageInfos(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music genre image by name.
     * @param {ImageApiGetMusicGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getMusicGenreImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getMusicGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music genre image by name.
     * @param {ImageApiGetMusicGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getMusicGenreImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getMusicGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get person image by name.
     * @param {ImageApiGetPersonImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getPersonImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getPersonImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get person image by name.
     * @param {ImageApiGetPersonImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getPersonImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getPersonImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get studio image by name.
     * @param {ImageApiGetStudioImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getStudioImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getStudioImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get studio image by name.
     * @param {ImageApiGetStudioImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getStudioImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getStudioImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user profile image.
     * @param {ImageApiGetUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getUserImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user profile image.
     * @param {ImageApiGetUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.getUserImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).getUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get artist image by name.
     * @param {ImageApiHeadArtistImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headArtistImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headArtistImage(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get genre image by name.
     * @param {ImageApiHeadGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headGenreImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get genre image by name.
     * @param {ImageApiHeadGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headGenreImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headItemImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.addPlayedIndicator, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImage2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headItemImage2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headItemImage2(requestParameters.itemId, requestParameters.imageType, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.tag, requestParameters.format, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.imageIndex, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the item\'s image.
     * @param {ImageApiHeadItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headItemImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.tag, requestParameters.cropWhitespace, requestParameters.format, requestParameters.addPlayedIndicator, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music genre image by name.
     * @param {ImageApiHeadMusicGenreImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headMusicGenreImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headMusicGenreImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music genre image by name.
     * @param {ImageApiHeadMusicGenreImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headMusicGenreImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headMusicGenreImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get person image by name.
     * @param {ImageApiHeadPersonImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headPersonImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headPersonImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get person image by name.
     * @param {ImageApiHeadPersonImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headPersonImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headPersonImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get studio image by name.
     * @param {ImageApiHeadStudioImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headStudioImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headStudioImage(requestParameters.name, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get studio image by name.
     * @param {ImageApiHeadStudioImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headStudioImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headStudioImageByIndex(requestParameters.name, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user profile image.
     * @param {ImageApiHeadUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headUserImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, requestParameters.imageIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user profile image.
     * @param {ImageApiHeadUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.headUserImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).headUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.tag, requestParameters.format, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.percentPlayed, requestParameters.unplayedCount, requestParameters.width, requestParameters.height, requestParameters.quality, requestParameters.fillWidth, requestParameters.fillHeight, requestParameters.cropWhitespace, requestParameters.addPlayedIndicator, requestParameters.blur, requestParameters.backgroundColor, requestParameters.foregroundLayer, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets the user image.
     * @param {ImageApiPostUserImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.postUserImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).postUserImage(requestParameters.userId, requestParameters.imageType, requestParameters.index, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets the user image.
     * @param {ImageApiPostUserImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.postUserImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).postUserImageByIndex(requestParameters.userId, requestParameters.imageType, requestParameters.index, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set item image.
     * @param {ImageApiSetItemImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.setItemImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).setItemImage(requestParameters.itemId, requestParameters.imageType, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set item image.
     * @param {ImageApiSetItemImageByIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.setItemImageByIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).setItemImageByIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates the index for an item image.
     * @param {ImageApiUpdateItemImageIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    ImageApi.prototype.updateItemImageIndex = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageApiFp)(this.configuration).updateItemImageIndex(requestParameters.itemId, requestParameters.imageType, requestParameters.imageIndex, requestParameters.newIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ImageApi;
}(base_1.BaseAPI));
exports.ImageApi = ImageApi;

},{"../base":68,"../common":69,"axios":362}],27:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageByNameApi = exports.ImageByNameApiFactory = exports.ImageByNameApiFp = exports.ImageByNameApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ImageByNameApi - axios parameter creator
 * @export
 */
var ImageByNameApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get General Image.
         * @param {string} name The name of the image.
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImage: function (name, type, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getGeneralImage', 'name', name);
                    // verify required parameter 'type' is not null or undefined
                    (0, common_1.assertParamExists)('getGeneralImage', 'type', type);
                    localVarPath = "/Images/General/{name}/{type}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)))
                        .replace("{".concat("type", "}"), encodeURIComponent(String(type)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImages: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Images/General";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get media info image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImage: function (theme, name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'theme' is not null or undefined
                    (0, common_1.assertParamExists)('getMediaInfoImage', 'theme', theme);
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getMediaInfoImage', 'name', name);
                    localVarPath = "/Images/MediaInfo/{theme}/{name}"
                        .replace("{".concat("theme", "}"), encodeURIComponent(String(theme)))
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all media info images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImages: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Images/MediaInfo";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get rating image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImage: function (theme, name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'theme' is not null or undefined
                    (0, common_1.assertParamExists)('getRatingImage', 'theme', theme);
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('getRatingImage', 'name', name);
                    localVarPath = "/Images/Ratings/{theme}/{name}"
                        .replace("{".concat("theme", "}"), encodeURIComponent(String(theme)))
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImages: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Images/Ratings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ImageByNameApiAxiosParamCreator = ImageByNameApiAxiosParamCreator;
/**
 * ImageByNameApi - functional programming interface
 * @export
 */
var ImageByNameApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ImageByNameApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get General Image.
         * @param {string} name The name of the image.
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImage: function (name, type, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGeneralImage(name, type, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImages: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGeneralImages(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get media info image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImage: function (theme, name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaInfoImage(theme, name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all media info images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImages: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaInfoImages(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get rating image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImage: function (theme, name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRatingImage(theme, name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImages: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRatingImages(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ImageByNameApiFp = ImageByNameApiFp;
/**
 * ImageByNameApi - factory interface
 * @export
 */
var ImageByNameApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ImageByNameApiFp)(configuration);
    return {
        /**
         *
         * @summary Get General Image.
         * @param {string} name The name of the image.
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImage: function (name, type, options) {
            return localVarFp.getGeneralImage(name, type, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralImages: function (options) {
            return localVarFp.getGeneralImages(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get media info image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImage: function (theme, name, options) {
            return localVarFp.getMediaInfoImage(theme, name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all media info images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaInfoImages: function (options) {
            return localVarFp.getMediaInfoImages(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get rating image.
         * @param {string} theme The theme to get the image from.
         * @param {string} name The name of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImage: function (theme, name, options) {
            return localVarFp.getRatingImage(theme, name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all general images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingImages: function (options) {
            return localVarFp.getRatingImages(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ImageByNameApiFactory = ImageByNameApiFactory;
/**
 * ImageByNameApi - object-oriented interface
 * @export
 * @class ImageByNameApi
 * @extends {BaseAPI}
 */
var ImageByNameApi = /** @class */ (function (_super) {
    __extends(ImageByNameApi, _super);
    function ImageByNameApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get General Image.
     * @param {ImageByNameApiGetGeneralImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getGeneralImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getGeneralImage(requestParameters.name, requestParameters.type, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all general images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getGeneralImages = function (options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getGeneralImages(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get media info image.
     * @param {ImageByNameApiGetMediaInfoImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getMediaInfoImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getMediaInfoImage(requestParameters.theme, requestParameters.name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all media info images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getMediaInfoImages = function (options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getMediaInfoImages(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get rating image.
     * @param {ImageByNameApiGetRatingImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getRatingImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getRatingImage(requestParameters.theme, requestParameters.name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all general images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameApi
     */
    ImageByNameApi.prototype.getRatingImages = function (options) {
        var _this = this;
        return (0, exports.ImageByNameApiFp)(this.configuration).getRatingImages(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ImageByNameApi;
}(base_1.BaseAPI));
exports.ImageByNameApi = ImageByNameApi;

},{"../base":68,"../common":69,"axios":362}],28:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstantMixApi = exports.InstantMixApiFactory = exports.InstantMixApiFp = exports.InstantMixApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * InstantMixApi - axios parameter creator
 * @export
 */
var InstantMixApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Creates an instant playlist based on a given album.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromAlbum: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromAlbum', 'id', id);
                            localVarPath = "/Albums/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromArtists: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromArtists', 'id', id);
                            localVarPath = "/Artists/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromArtists2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromArtists2', 'id', id);
                            localVarPath = "/Artists/InstantMix";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given item.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromItem: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromItem', 'id', id);
                            localVarPath = "/Items/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromMusicGenreById', 'id', id);
                            localVarPath = "/MusicGenres/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromMusicGenreById2', 'id', id);
                            localVarPath = "/MusicGenres/InstantMix";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} name The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreByName: function (name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromMusicGenreByName', 'name', name);
                            localVarPath = "/MusicGenres/{name}/InstantMix"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given playlist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromPlaylist: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromPlaylist', 'id', id);
                            localVarPath = "/Playlists/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given song.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromSong: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getInstantMixFromSong', 'id', id);
                            localVarPath = "/Songs/{id}/InstantMix"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.InstantMixApiAxiosParamCreator = InstantMixApiAxiosParamCreator;
/**
 * InstantMixApi - functional programming interface
 * @export
 */
var InstantMixApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.InstantMixApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates an instant playlist based on a given album.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromAlbum: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromAlbum(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromArtists: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromArtists(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromArtists2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromArtists2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given item.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromItem: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromItem(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromMusicGenreById(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromMusicGenreById2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} name The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreByName: function (name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromMusicGenreByName(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given playlist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromPlaylist: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromPlaylist(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given song.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromSong: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInstantMixFromSong(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.InstantMixApiFp = InstantMixApiFp;
/**
 * InstantMixApi - factory interface
 * @export
 */
var InstantMixApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.InstantMixApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates an instant playlist based on a given album.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromAlbum: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromAlbum(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromArtists: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromArtists(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given artist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromArtists2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromArtists2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given item.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromItem: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromItem(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromMusicGenreById(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreById2: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromMusicGenreById2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given genre.
         * @param {string} name The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromMusicGenreByName: function (name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromMusicGenreByName(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given playlist.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromPlaylist: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromPlaylist(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates an instant playlist based on a given song.
         * @param {string} id The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMixFromSong: function (id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getInstantMixFromSong(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.InstantMixApiFactory = InstantMixApiFactory;
/**
 * InstantMixApi - object-oriented interface
 * @export
 * @class InstantMixApi
 * @extends {BaseAPI}
 */
var InstantMixApi = /** @class */ (function (_super) {
    __extends(InstantMixApi, _super);
    function InstantMixApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Creates an instant playlist based on a given album.
     * @param {InstantMixApiGetInstantMixFromAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromAlbum = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromAlbum(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given artist.
     * @param {InstantMixApiGetInstantMixFromArtistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromArtists = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromArtists(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given artist.
     * @param {InstantMixApiGetInstantMixFromArtists2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromArtists2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromArtists2(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given item.
     * @param {InstantMixApiGetInstantMixFromItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromItem(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given genre.
     * @param {InstantMixApiGetInstantMixFromMusicGenreByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromMusicGenreById = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromMusicGenreById(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given genre.
     * @param {InstantMixApiGetInstantMixFromMusicGenreById2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromMusicGenreById2 = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromMusicGenreById2(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given genre.
     * @param {InstantMixApiGetInstantMixFromMusicGenreByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromMusicGenreByName = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromMusicGenreByName(requestParameters.name, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given playlist.
     * @param {InstantMixApiGetInstantMixFromPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromPlaylist(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates an instant playlist based on a given song.
     * @param {InstantMixApiGetInstantMixFromSongRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstantMixApi
     */
    InstantMixApi.prototype.getInstantMixFromSong = function (requestParameters, options) {
        var _this = this;
        return (0, exports.InstantMixApiFp)(this.configuration).getInstantMixFromSong(requestParameters.id, requestParameters.userId, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InstantMixApi;
}(base_1.BaseAPI));
exports.InstantMixApi = InstantMixApi;

},{"../base":68,"../common":69,"axios":362}],29:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemLookupApi = exports.ItemLookupApiFactory = exports.ItemLookupApiFp = exports.ItemLookupApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ItemLookupApi - axios parameter creator
 * @export
 */
var ItemLookupApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Applies search criteria to an item and refreshes metadata.
         * @param {string} itemId Item id.
         * @param {RemoteSearchResult} remoteSearchResult The remote search result.
         * @param {boolean} [replaceAllImages] Optional. Whether or not to replace all images. Default: True.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applySearchCriteria: function (itemId, remoteSearchResult, replaceAllImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('applySearchCriteria', 'itemId', itemId);
                            // verify required parameter 'remoteSearchResult' is not null or undefined
                            (0, common_1.assertParamExists)('applySearchCriteria', 'remoteSearchResult', remoteSearchResult);
                            localVarPath = "/Items/RemoteSearch/Apply/{itemId}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (replaceAllImages !== undefined) {
                                localVarQueryParameter['replaceAllImages'] = replaceAllImages;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(remoteSearchResult, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get book remote search.
         * @param {BookInfoRemoteSearchQuery} bookInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookRemoteSearchResults: function (bookInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'bookInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getBookRemoteSearchResults', 'bookInfoRemoteSearchQuery', bookInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/Book";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bookInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get box set remote search.
         * @param {BoxSetInfoRemoteSearchQuery} boxSetInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxSetRemoteSearchResults: function (boxSetInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'boxSetInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getBoxSetRemoteSearchResults', 'boxSetInfoRemoteSearchQuery', boxSetInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/BoxSet";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(boxSetInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the item\'s external id info.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalIdInfos: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getExternalIdInfos', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/ExternalIdInfos"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get movie remote search.
         * @param {MovieInfoRemoteSearchQuery} movieInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRemoteSearchResults: function (movieInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'movieInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getMovieRemoteSearchResults', 'movieInfoRemoteSearchQuery', movieInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/Movie";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(movieInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music album remote search.
         * @param {AlbumInfoRemoteSearchQuery} albumInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicAlbumRemoteSearchResults: function (albumInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'albumInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getMusicAlbumRemoteSearchResults', 'albumInfoRemoteSearchQuery', albumInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/MusicAlbum";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(albumInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music artist remote search.
         * @param {ArtistInfoRemoteSearchQuery} artistInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicArtistRemoteSearchResults: function (artistInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'artistInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getMusicArtistRemoteSearchResults', 'artistInfoRemoteSearchQuery', artistInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/MusicArtist";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(artistInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music video remote search.
         * @param {MusicVideoInfoRemoteSearchQuery} musicVideoInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicVideoRemoteSearchResults: function (musicVideoInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'musicVideoInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getMusicVideoRemoteSearchResults', 'musicVideoInfoRemoteSearchQuery', musicVideoInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/MusicVideo";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(musicVideoInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person remote search.
         * @param {PersonLookupInfoRemoteSearchQuery} personLookupInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRemoteSearchResults: function (personLookupInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'personLookupInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getPersonRemoteSearchResults', 'personLookupInfoRemoteSearchQuery', personLookupInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/Person";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(personLookupInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get series remote search.
         * @param {SeriesInfoRemoteSearchQuery} seriesInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesRemoteSearchResults: function (seriesInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'seriesInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getSeriesRemoteSearchResults', 'seriesInfoRemoteSearchQuery', seriesInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/Series";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seriesInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get trailer remote search.
         * @param {TrailerInfoRemoteSearchQuery} trailerInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerRemoteSearchResults: function (trailerInfoRemoteSearchQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trailerInfoRemoteSearchQuery' is not null or undefined
                            (0, common_1.assertParamExists)('getTrailerRemoteSearchResults', 'trailerInfoRemoteSearchQuery', trailerInfoRemoteSearchQuery);
                            localVarPath = "/Items/RemoteSearch/Trailer";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(trailerInfoRemoteSearchQuery, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ItemLookupApiAxiosParamCreator = ItemLookupApiAxiosParamCreator;
/**
 * ItemLookupApi - functional programming interface
 * @export
 */
var ItemLookupApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ItemLookupApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Applies search criteria to an item and refreshes metadata.
         * @param {string} itemId Item id.
         * @param {RemoteSearchResult} remoteSearchResult The remote search result.
         * @param {boolean} [replaceAllImages] Optional. Whether or not to replace all images. Default: True.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applySearchCriteria: function (itemId, remoteSearchResult, replaceAllImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.applySearchCriteria(itemId, remoteSearchResult, replaceAllImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get book remote search.
         * @param {BookInfoRemoteSearchQuery} bookInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookRemoteSearchResults: function (bookInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBookRemoteSearchResults(bookInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get box set remote search.
         * @param {BoxSetInfoRemoteSearchQuery} boxSetInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxSetRemoteSearchResults: function (boxSetInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBoxSetRemoteSearchResults(boxSetInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the item\'s external id info.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalIdInfos: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExternalIdInfos(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get movie remote search.
         * @param {MovieInfoRemoteSearchQuery} movieInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRemoteSearchResults: function (movieInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMovieRemoteSearchResults(movieInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music album remote search.
         * @param {AlbumInfoRemoteSearchQuery} albumInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicAlbumRemoteSearchResults: function (albumInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicAlbumRemoteSearchResults(albumInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music artist remote search.
         * @param {ArtistInfoRemoteSearchQuery} artistInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicArtistRemoteSearchResults: function (artistInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicArtistRemoteSearchResults(artistInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get music video remote search.
         * @param {MusicVideoInfoRemoteSearchQuery} musicVideoInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicVideoRemoteSearchResults: function (musicVideoInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicVideoRemoteSearchResults(musicVideoInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get person remote search.
         * @param {PersonLookupInfoRemoteSearchQuery} personLookupInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRemoteSearchResults: function (personLookupInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPersonRemoteSearchResults(personLookupInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get series remote search.
         * @param {SeriesInfoRemoteSearchQuery} seriesInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesRemoteSearchResults: function (seriesInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSeriesRemoteSearchResults(seriesInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get trailer remote search.
         * @param {TrailerInfoRemoteSearchQuery} trailerInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerRemoteSearchResults: function (trailerInfoRemoteSearchQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTrailerRemoteSearchResults(trailerInfoRemoteSearchQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ItemLookupApiFp = ItemLookupApiFp;
/**
 * ItemLookupApi - factory interface
 * @export
 */
var ItemLookupApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ItemLookupApiFp)(configuration);
    return {
        /**
         *
         * @summary Applies search criteria to an item and refreshes metadata.
         * @param {string} itemId Item id.
         * @param {RemoteSearchResult} remoteSearchResult The remote search result.
         * @param {boolean} [replaceAllImages] Optional. Whether or not to replace all images. Default: True.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applySearchCriteria: function (itemId, remoteSearchResult, replaceAllImages, options) {
            return localVarFp.applySearchCriteria(itemId, remoteSearchResult, replaceAllImages, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get book remote search.
         * @param {BookInfoRemoteSearchQuery} bookInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookRemoteSearchResults: function (bookInfoRemoteSearchQuery, options) {
            return localVarFp.getBookRemoteSearchResults(bookInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get box set remote search.
         * @param {BoxSetInfoRemoteSearchQuery} boxSetInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxSetRemoteSearchResults: function (boxSetInfoRemoteSearchQuery, options) {
            return localVarFp.getBoxSetRemoteSearchResults(boxSetInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the item\'s external id info.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalIdInfos: function (itemId, options) {
            return localVarFp.getExternalIdInfos(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get movie remote search.
         * @param {MovieInfoRemoteSearchQuery} movieInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRemoteSearchResults: function (movieInfoRemoteSearchQuery, options) {
            return localVarFp.getMovieRemoteSearchResults(movieInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music album remote search.
         * @param {AlbumInfoRemoteSearchQuery} albumInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicAlbumRemoteSearchResults: function (albumInfoRemoteSearchQuery, options) {
            return localVarFp.getMusicAlbumRemoteSearchResults(albumInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music artist remote search.
         * @param {ArtistInfoRemoteSearchQuery} artistInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicArtistRemoteSearchResults: function (artistInfoRemoteSearchQuery, options) {
            return localVarFp.getMusicArtistRemoteSearchResults(artistInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get music video remote search.
         * @param {MusicVideoInfoRemoteSearchQuery} musicVideoInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicVideoRemoteSearchResults: function (musicVideoInfoRemoteSearchQuery, options) {
            return localVarFp.getMusicVideoRemoteSearchResults(musicVideoInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get person remote search.
         * @param {PersonLookupInfoRemoteSearchQuery} personLookupInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRemoteSearchResults: function (personLookupInfoRemoteSearchQuery, options) {
            return localVarFp.getPersonRemoteSearchResults(personLookupInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get series remote search.
         * @param {SeriesInfoRemoteSearchQuery} seriesInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesRemoteSearchResults: function (seriesInfoRemoteSearchQuery, options) {
            return localVarFp.getSeriesRemoteSearchResults(seriesInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get trailer remote search.
         * @param {TrailerInfoRemoteSearchQuery} trailerInfoRemoteSearchQuery Remote search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerRemoteSearchResults: function (trailerInfoRemoteSearchQuery, options) {
            return localVarFp.getTrailerRemoteSearchResults(trailerInfoRemoteSearchQuery, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ItemLookupApiFactory = ItemLookupApiFactory;
/**
 * ItemLookupApi - object-oriented interface
 * @export
 * @class ItemLookupApi
 * @extends {BaseAPI}
 */
var ItemLookupApi = /** @class */ (function (_super) {
    __extends(ItemLookupApi, _super);
    function ItemLookupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Applies search criteria to an item and refreshes metadata.
     * @param {ItemLookupApiApplySearchCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.applySearchCriteria = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).applySearchCriteria(requestParameters.itemId, requestParameters.remoteSearchResult, requestParameters.replaceAllImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get book remote search.
     * @param {ItemLookupApiGetBookRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getBookRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getBookRemoteSearchResults(requestParameters.bookInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get box set remote search.
     * @param {ItemLookupApiGetBoxSetRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getBoxSetRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getBoxSetRemoteSearchResults(requestParameters.boxSetInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the item\'s external id info.
     * @param {ItemLookupApiGetExternalIdInfosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getExternalIdInfos = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getExternalIdInfos(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get movie remote search.
     * @param {ItemLookupApiGetMovieRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getMovieRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getMovieRemoteSearchResults(requestParameters.movieInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music album remote search.
     * @param {ItemLookupApiGetMusicAlbumRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getMusicAlbumRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getMusicAlbumRemoteSearchResults(requestParameters.albumInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music artist remote search.
     * @param {ItemLookupApiGetMusicArtistRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getMusicArtistRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getMusicArtistRemoteSearchResults(requestParameters.artistInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get music video remote search.
     * @param {ItemLookupApiGetMusicVideoRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getMusicVideoRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getMusicVideoRemoteSearchResults(requestParameters.musicVideoInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get person remote search.
     * @param {ItemLookupApiGetPersonRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getPersonRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getPersonRemoteSearchResults(requestParameters.personLookupInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get series remote search.
     * @param {ItemLookupApiGetSeriesRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getSeriesRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getSeriesRemoteSearchResults(requestParameters.seriesInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get trailer remote search.
     * @param {ItemLookupApiGetTrailerRemoteSearchResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupApi
     */
    ItemLookupApi.prototype.getTrailerRemoteSearchResults = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemLookupApiFp)(this.configuration).getTrailerRemoteSearchResults(requestParameters.trailerInfoRemoteSearchQuery, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemLookupApi;
}(base_1.BaseAPI));
exports.ItemLookupApi = ItemLookupApi;

},{"../base":68,"../common":69,"axios":362}],30:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemRefreshApi = exports.ItemRefreshApiFactory = exports.ItemRefreshApiFp = exports.ItemRefreshApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ItemRefreshApi - axios parameter creator
 * @export
 */
var ItemRefreshApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Refreshes metadata for an item.
         * @param {string} itemId Item id.
         * @param {MetadataRefreshMode} [metadataRefreshMode] (Optional) Specifies the metadata refresh mode.
         * @param {MetadataRefreshMode} [imageRefreshMode] (Optional) Specifies the image refresh mode.
         * @param {boolean} [replaceAllMetadata] (Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh.
         * @param {boolean} [replaceAllImages] (Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: function (itemId, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('post', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/Refresh"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (metadataRefreshMode !== undefined) {
                                localVarQueryParameter['metadataRefreshMode'] = metadataRefreshMode;
                            }
                            if (imageRefreshMode !== undefined) {
                                localVarQueryParameter['imageRefreshMode'] = imageRefreshMode;
                            }
                            if (replaceAllMetadata !== undefined) {
                                localVarQueryParameter['replaceAllMetadata'] = replaceAllMetadata;
                            }
                            if (replaceAllImages !== undefined) {
                                localVarQueryParameter['replaceAllImages'] = replaceAllImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ItemRefreshApiAxiosParamCreator = ItemRefreshApiAxiosParamCreator;
/**
 * ItemRefreshApi - functional programming interface
 * @export
 */
var ItemRefreshApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ItemRefreshApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Refreshes metadata for an item.
         * @param {string} itemId Item id.
         * @param {MetadataRefreshMode} [metadataRefreshMode] (Optional) Specifies the metadata refresh mode.
         * @param {MetadataRefreshMode} [imageRefreshMode] (Optional) Specifies the image refresh mode.
         * @param {boolean} [replaceAllMetadata] (Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh.
         * @param {boolean} [replaceAllImages] (Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: function (itemId, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.post(itemId, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ItemRefreshApiFp = ItemRefreshApiFp;
/**
 * ItemRefreshApi - factory interface
 * @export
 */
var ItemRefreshApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ItemRefreshApiFp)(configuration);
    return {
        /**
         *
         * @summary Refreshes metadata for an item.
         * @param {string} itemId Item id.
         * @param {MetadataRefreshMode} [metadataRefreshMode] (Optional) Specifies the metadata refresh mode.
         * @param {MetadataRefreshMode} [imageRefreshMode] (Optional) Specifies the image refresh mode.
         * @param {boolean} [replaceAllMetadata] (Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh.
         * @param {boolean} [replaceAllImages] (Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: function (itemId, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
            return localVarFp.post(itemId, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ItemRefreshApiFactory = ItemRefreshApiFactory;
/**
 * ItemRefreshApi - object-oriented interface
 * @export
 * @class ItemRefreshApi
 * @extends {BaseAPI}
 */
var ItemRefreshApi = /** @class */ (function (_super) {
    __extends(ItemRefreshApi, _super);
    function ItemRefreshApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Refreshes metadata for an item.
     * @param {ItemRefreshApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemRefreshApi
     */
    ItemRefreshApi.prototype.post = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemRefreshApiFp)(this.configuration).post(requestParameters.itemId, requestParameters.metadataRefreshMode, requestParameters.imageRefreshMode, requestParameters.replaceAllMetadata, requestParameters.replaceAllImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemRefreshApi;
}(base_1.BaseAPI));
exports.ItemRefreshApi = ItemRefreshApi;

},{"../base":68,"../common":69,"axios":362}],31:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemUpdateApi = exports.ItemUpdateApiFactory = exports.ItemUpdateApiFp = exports.ItemUpdateApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ItemUpdateApi - axios parameter creator
 * @export
 */
var ItemUpdateApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets metadata editor info for an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataEditorInfo: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getMetadataEditorInfo', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/MetadataEditor"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an item.
         * @param {string} itemId The item id.
         * @param {BaseItemDto} baseItemDto The new item properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, baseItemDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateItem', 'itemId', itemId);
                            // verify required parameter 'baseItemDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateItem', 'baseItemDto', baseItemDto);
                            localVarPath = "/Items/{itemId}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(baseItemDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an item\'s content type.
         * @param {string} itemId The item id.
         * @param {string} [contentType] The content type of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemContentType: function (itemId, contentType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateItemContentType', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/ContentType"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (contentType !== undefined) {
                                localVarQueryParameter['contentType'] = contentType;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ItemUpdateApiAxiosParamCreator = ItemUpdateApiAxiosParamCreator;
/**
 * ItemUpdateApi - functional programming interface
 * @export
 */
var ItemUpdateApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ItemUpdateApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets metadata editor info for an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataEditorInfo: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMetadataEditorInfo(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an item.
         * @param {string} itemId The item id.
         * @param {BaseItemDto} baseItemDto The new item properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, baseItemDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateItem(itemId, baseItemDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an item\'s content type.
         * @param {string} itemId The item id.
         * @param {string} [contentType] The content type of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemContentType: function (itemId, contentType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateItemContentType(itemId, contentType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ItemUpdateApiFp = ItemUpdateApiFp;
/**
 * ItemUpdateApi - factory interface
 * @export
 */
var ItemUpdateApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ItemUpdateApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets metadata editor info for an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataEditorInfo: function (itemId, options) {
            return localVarFp.getMetadataEditorInfo(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an item.
         * @param {string} itemId The item id.
         * @param {BaseItemDto} baseItemDto The new item properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, baseItemDto, options) {
            return localVarFp.updateItem(itemId, baseItemDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an item\'s content type.
         * @param {string} itemId The item id.
         * @param {string} [contentType] The content type of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemContentType: function (itemId, contentType, options) {
            return localVarFp.updateItemContentType(itemId, contentType, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ItemUpdateApiFactory = ItemUpdateApiFactory;
/**
 * ItemUpdateApi - object-oriented interface
 * @export
 * @class ItemUpdateApi
 * @extends {BaseAPI}
 */
var ItemUpdateApi = /** @class */ (function (_super) {
    __extends(ItemUpdateApi, _super);
    function ItemUpdateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets metadata editor info for an item.
     * @param {ItemUpdateApiGetMetadataEditorInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemUpdateApi
     */
    ItemUpdateApi.prototype.getMetadataEditorInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemUpdateApiFp)(this.configuration).getMetadataEditorInfo(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an item.
     * @param {ItemUpdateApiUpdateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemUpdateApi
     */
    ItemUpdateApi.prototype.updateItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemUpdateApiFp)(this.configuration).updateItem(requestParameters.itemId, requestParameters.baseItemDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an item\'s content type.
     * @param {ItemUpdateApiUpdateItemContentTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemUpdateApi
     */
    ItemUpdateApi.prototype.updateItemContentType = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemUpdateApiFp)(this.configuration).updateItemContentType(requestParameters.itemId, requestParameters.contentType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemUpdateApi;
}(base_1.BaseAPI));
exports.ItemUpdateApi = ItemUpdateApi;

},{"../base":68,"../common":69,"axios":362}],32:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemsApi = exports.ItemsApiFactory = exports.ItemsApiFp = exports.ItemsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ItemsApi - axios parameter creator
 * @export
 */
var ItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} [userId] The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (maxOfficialRating !== undefined) {
                                localVarQueryParameter['maxOfficialRating'] = maxOfficialRating;
                            }
                            if (hasThemeSong !== undefined) {
                                localVarQueryParameter['hasThemeSong'] = hasThemeSong;
                            }
                            if (hasThemeVideo !== undefined) {
                                localVarQueryParameter['hasThemeVideo'] = hasThemeVideo;
                            }
                            if (hasSubtitles !== undefined) {
                                localVarQueryParameter['hasSubtitles'] = hasSubtitles;
                            }
                            if (hasSpecialFeature !== undefined) {
                                localVarQueryParameter['hasSpecialFeature'] = hasSpecialFeature;
                            }
                            if (hasTrailer !== undefined) {
                                localVarQueryParameter['hasTrailer'] = hasTrailer;
                            }
                            if (adjacentTo !== undefined) {
                                localVarQueryParameter['adjacentTo'] = adjacentTo;
                            }
                            if (parentIndexNumber !== undefined) {
                                localVarQueryParameter['parentIndexNumber'] = parentIndexNumber;
                            }
                            if (hasParentalRating !== undefined) {
                                localVarQueryParameter['hasParentalRating'] = hasParentalRating;
                            }
                            if (isHd !== undefined) {
                                localVarQueryParameter['isHd'] = isHd;
                            }
                            if (is4K !== undefined) {
                                localVarQueryParameter['is4K'] = is4K;
                            }
                            if (locationTypes) {
                                localVarQueryParameter['locationTypes'] = locationTypes;
                            }
                            if (excludeLocationTypes) {
                                localVarQueryParameter['excludeLocationTypes'] = excludeLocationTypes;
                            }
                            if (isMissing !== undefined) {
                                localVarQueryParameter['isMissing'] = isMissing;
                            }
                            if (isUnaired !== undefined) {
                                localVarQueryParameter['isUnaired'] = isUnaired;
                            }
                            if (minCommunityRating !== undefined) {
                                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
                            }
                            if (minCriticRating !== undefined) {
                                localVarQueryParameter['minCriticRating'] = minCriticRating;
                            }
                            if (minPremiereDate !== undefined) {
                                localVarQueryParameter['minPremiereDate'] = (minPremiereDate instanceof Date) ?
                                    minPremiereDate.toISOString() :
                                    minPremiereDate;
                            }
                            if (minDateLastSaved !== undefined) {
                                localVarQueryParameter['minDateLastSaved'] = (minDateLastSaved instanceof Date) ?
                                    minDateLastSaved.toISOString() :
                                    minDateLastSaved;
                            }
                            if (minDateLastSavedForUser !== undefined) {
                                localVarQueryParameter['minDateLastSavedForUser'] = (minDateLastSavedForUser instanceof Date) ?
                                    minDateLastSavedForUser.toISOString() :
                                    minDateLastSavedForUser;
                            }
                            if (maxPremiereDate !== undefined) {
                                localVarQueryParameter['maxPremiereDate'] = (maxPremiereDate instanceof Date) ?
                                    maxPremiereDate.toISOString() :
                                    maxPremiereDate;
                            }
                            if (hasOverview !== undefined) {
                                localVarQueryParameter['hasOverview'] = hasOverview;
                            }
                            if (hasImdbId !== undefined) {
                                localVarQueryParameter['hasImdbId'] = hasImdbId;
                            }
                            if (hasTmdbId !== undefined) {
                                localVarQueryParameter['hasTmdbId'] = hasTmdbId;
                            }
                            if (hasTvdbId !== undefined) {
                                localVarQueryParameter['hasTvdbId'] = hasTvdbId;
                            }
                            if (excludeItemIds) {
                                localVarQueryParameter['excludeItemIds'] = excludeItemIds;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (recursive !== undefined) {
                                localVarQueryParameter['recursive'] = recursive;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (imageTypes) {
                                localVarQueryParameter['imageTypes'] = imageTypes;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (isPlayed !== undefined) {
                                localVarQueryParameter['isPlayed'] = isPlayed;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (officialRatings) {
                                localVarQueryParameter['officialRatings'] = officialRatings;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags;
                            }
                            if (years) {
                                localVarQueryParameter['years'] = years;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (person !== undefined) {
                                localVarQueryParameter['person'] = person;
                            }
                            if (personIds) {
                                localVarQueryParameter['personIds'] = personIds;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (studios) {
                                localVarQueryParameter['studios'] = studios;
                            }
                            if (artists) {
                                localVarQueryParameter['artists'] = artists;
                            }
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (artistIds) {
                                localVarQueryParameter['artistIds'] = artistIds;
                            }
                            if (albumArtistIds) {
                                localVarQueryParameter['albumArtistIds'] = albumArtistIds;
                            }
                            if (contributingArtistIds) {
                                localVarQueryParameter['contributingArtistIds'] = contributingArtistIds;
                            }
                            if (albums) {
                                localVarQueryParameter['albums'] = albums;
                            }
                            if (albumIds) {
                                localVarQueryParameter['albumIds'] = albumIds;
                            }
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (videoTypes) {
                                localVarQueryParameter['videoTypes'] = videoTypes;
                            }
                            if (minOfficialRating !== undefined) {
                                localVarQueryParameter['minOfficialRating'] = minOfficialRating;
                            }
                            if (isLocked !== undefined) {
                                localVarQueryParameter['isLocked'] = isLocked;
                            }
                            if (isPlaceHolder !== undefined) {
                                localVarQueryParameter['isPlaceHolder'] = isPlaceHolder;
                            }
                            if (hasOfficialRating !== undefined) {
                                localVarQueryParameter['hasOfficialRating'] = hasOfficialRating;
                            }
                            if (collapseBoxSetItems !== undefined) {
                                localVarQueryParameter['collapseBoxSetItems'] = collapseBoxSetItems;
                            }
                            if (minWidth !== undefined) {
                                localVarQueryParameter['minWidth'] = minWidth;
                            }
                            if (minHeight !== undefined) {
                                localVarQueryParameter['minHeight'] = minHeight;
                            }
                            if (maxWidth !== undefined) {
                                localVarQueryParameter['maxWidth'] = maxWidth;
                            }
                            if (maxHeight !== undefined) {
                                localVarQueryParameter['maxHeight'] = maxHeight;
                            }
                            if (is3D !== undefined) {
                                localVarQueryParameter['is3D'] = is3D;
                            }
                            if (seriesStatus) {
                                localVarQueryParameter['seriesStatus'] = seriesStatus;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (studioIds) {
                                localVarQueryParameter['studioIds'] = studioIds;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByUserId: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getItemsByUserId', 'userId', userId);
                            localVarPath = "/Users/{userId}/Items"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (maxOfficialRating !== undefined) {
                                localVarQueryParameter['maxOfficialRating'] = maxOfficialRating;
                            }
                            if (hasThemeSong !== undefined) {
                                localVarQueryParameter['hasThemeSong'] = hasThemeSong;
                            }
                            if (hasThemeVideo !== undefined) {
                                localVarQueryParameter['hasThemeVideo'] = hasThemeVideo;
                            }
                            if (hasSubtitles !== undefined) {
                                localVarQueryParameter['hasSubtitles'] = hasSubtitles;
                            }
                            if (hasSpecialFeature !== undefined) {
                                localVarQueryParameter['hasSpecialFeature'] = hasSpecialFeature;
                            }
                            if (hasTrailer !== undefined) {
                                localVarQueryParameter['hasTrailer'] = hasTrailer;
                            }
                            if (adjacentTo !== undefined) {
                                localVarQueryParameter['adjacentTo'] = adjacentTo;
                            }
                            if (parentIndexNumber !== undefined) {
                                localVarQueryParameter['parentIndexNumber'] = parentIndexNumber;
                            }
                            if (hasParentalRating !== undefined) {
                                localVarQueryParameter['hasParentalRating'] = hasParentalRating;
                            }
                            if (isHd !== undefined) {
                                localVarQueryParameter['isHd'] = isHd;
                            }
                            if (is4K !== undefined) {
                                localVarQueryParameter['is4K'] = is4K;
                            }
                            if (locationTypes) {
                                localVarQueryParameter['locationTypes'] = locationTypes;
                            }
                            if (excludeLocationTypes) {
                                localVarQueryParameter['excludeLocationTypes'] = excludeLocationTypes;
                            }
                            if (isMissing !== undefined) {
                                localVarQueryParameter['isMissing'] = isMissing;
                            }
                            if (isUnaired !== undefined) {
                                localVarQueryParameter['isUnaired'] = isUnaired;
                            }
                            if (minCommunityRating !== undefined) {
                                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
                            }
                            if (minCriticRating !== undefined) {
                                localVarQueryParameter['minCriticRating'] = minCriticRating;
                            }
                            if (minPremiereDate !== undefined) {
                                localVarQueryParameter['minPremiereDate'] = (minPremiereDate instanceof Date) ?
                                    minPremiereDate.toISOString() :
                                    minPremiereDate;
                            }
                            if (minDateLastSaved !== undefined) {
                                localVarQueryParameter['minDateLastSaved'] = (minDateLastSaved instanceof Date) ?
                                    minDateLastSaved.toISOString() :
                                    minDateLastSaved;
                            }
                            if (minDateLastSavedForUser !== undefined) {
                                localVarQueryParameter['minDateLastSavedForUser'] = (minDateLastSavedForUser instanceof Date) ?
                                    minDateLastSavedForUser.toISOString() :
                                    minDateLastSavedForUser;
                            }
                            if (maxPremiereDate !== undefined) {
                                localVarQueryParameter['maxPremiereDate'] = (maxPremiereDate instanceof Date) ?
                                    maxPremiereDate.toISOString() :
                                    maxPremiereDate;
                            }
                            if (hasOverview !== undefined) {
                                localVarQueryParameter['hasOverview'] = hasOverview;
                            }
                            if (hasImdbId !== undefined) {
                                localVarQueryParameter['hasImdbId'] = hasImdbId;
                            }
                            if (hasTmdbId !== undefined) {
                                localVarQueryParameter['hasTmdbId'] = hasTmdbId;
                            }
                            if (hasTvdbId !== undefined) {
                                localVarQueryParameter['hasTvdbId'] = hasTvdbId;
                            }
                            if (excludeItemIds) {
                                localVarQueryParameter['excludeItemIds'] = excludeItemIds;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (recursive !== undefined) {
                                localVarQueryParameter['recursive'] = recursive;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (imageTypes) {
                                localVarQueryParameter['imageTypes'] = imageTypes;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (isPlayed !== undefined) {
                                localVarQueryParameter['isPlayed'] = isPlayed;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (officialRatings) {
                                localVarQueryParameter['officialRatings'] = officialRatings;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags;
                            }
                            if (years) {
                                localVarQueryParameter['years'] = years;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (person !== undefined) {
                                localVarQueryParameter['person'] = person;
                            }
                            if (personIds) {
                                localVarQueryParameter['personIds'] = personIds;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (studios) {
                                localVarQueryParameter['studios'] = studios;
                            }
                            if (artists) {
                                localVarQueryParameter['artists'] = artists;
                            }
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (artistIds) {
                                localVarQueryParameter['artistIds'] = artistIds;
                            }
                            if (albumArtistIds) {
                                localVarQueryParameter['albumArtistIds'] = albumArtistIds;
                            }
                            if (contributingArtistIds) {
                                localVarQueryParameter['contributingArtistIds'] = contributingArtistIds;
                            }
                            if (albums) {
                                localVarQueryParameter['albums'] = albums;
                            }
                            if (albumIds) {
                                localVarQueryParameter['albumIds'] = albumIds;
                            }
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (videoTypes) {
                                localVarQueryParameter['videoTypes'] = videoTypes;
                            }
                            if (minOfficialRating !== undefined) {
                                localVarQueryParameter['minOfficialRating'] = minOfficialRating;
                            }
                            if (isLocked !== undefined) {
                                localVarQueryParameter['isLocked'] = isLocked;
                            }
                            if (isPlaceHolder !== undefined) {
                                localVarQueryParameter['isPlaceHolder'] = isPlaceHolder;
                            }
                            if (hasOfficialRating !== undefined) {
                                localVarQueryParameter['hasOfficialRating'] = hasOfficialRating;
                            }
                            if (collapseBoxSetItems !== undefined) {
                                localVarQueryParameter['collapseBoxSetItems'] = collapseBoxSetItems;
                            }
                            if (minWidth !== undefined) {
                                localVarQueryParameter['minWidth'] = minWidth;
                            }
                            if (minHeight !== undefined) {
                                localVarQueryParameter['minHeight'] = minHeight;
                            }
                            if (maxWidth !== undefined) {
                                localVarQueryParameter['maxWidth'] = maxWidth;
                            }
                            if (maxHeight !== undefined) {
                                localVarQueryParameter['maxHeight'] = maxHeight;
                            }
                            if (is3D !== undefined) {
                                localVarQueryParameter['is3D'] = is3D;
                            }
                            if (seriesStatus) {
                                localVarQueryParameter['seriesStatus'] = seriesStatus;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (studioIds) {
                                localVarQueryParameter['studioIds'] = studioIds;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id.
         * @param {number} [startIndex] The start index.
         * @param {number} [limit] The item limit.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResumeItems: function (userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getResumeItems', 'userId', userId);
                            localVarPath = "/Users/{userId}/Items/Resume"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ItemsApiAxiosParamCreator = ItemsApiAxiosParamCreator;
/**
 * ItemsApi - functional programming interface
 * @export
 */
var ItemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ItemsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} [userId] The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItems(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByUserId: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemsByUserId(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id.
         * @param {number} [startIndex] The start index.
         * @param {number} [limit] The item limit.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResumeItems: function (userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getResumeItems(userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ItemsApiFp = ItemsApiFp;
/**
 * ItemsApi - factory interface
 * @export
 */
var ItemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ItemsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} [userId] The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return localVarFp.getItems(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id supplied as query parameter.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByUserId: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return localVarFp.getItemsByUserId(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets items based on a query.
         * @param {string} userId The user id.
         * @param {number} [startIndex] The start index.
         * @param {number} [limit] The item limit.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResumeItems: function (userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages, options) {
            return localVarFp.getResumeItems(userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ItemsApiFactory = ItemsApiFactory;
/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
var ItemsApi = /** @class */ (function (_super) {
    __extends(ItemsApi, _super);
    function ItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets items based on a query.
     * @param {ItemsApiGetItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.getItems = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ItemsApiFp)(this.configuration).getItems(requestParameters.userId, requestParameters.maxOfficialRating, requestParameters.hasThemeSong, requestParameters.hasThemeVideo, requestParameters.hasSubtitles, requestParameters.hasSpecialFeature, requestParameters.hasTrailer, requestParameters.adjacentTo, requestParameters.parentIndexNumber, requestParameters.hasParentalRating, requestParameters.isHd, requestParameters.is4K, requestParameters.locationTypes, requestParameters.excludeLocationTypes, requestParameters.isMissing, requestParameters.isUnaired, requestParameters.minCommunityRating, requestParameters.minCriticRating, requestParameters.minPremiereDate, requestParameters.minDateLastSaved, requestParameters.minDateLastSavedForUser, requestParameters.maxPremiereDate, requestParameters.hasOverview, requestParameters.hasImdbId, requestParameters.hasTmdbId, requestParameters.hasTvdbId, requestParameters.excludeItemIds, requestParameters.startIndex, requestParameters.limit, requestParameters.recursive, requestParameters.searchTerm, requestParameters.sortOrder, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.imageTypes, requestParameters.sortBy, requestParameters.isPlayed, requestParameters.genres, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.artists, requestParameters.excludeArtistIds, requestParameters.artistIds, requestParameters.albumArtistIds, requestParameters.contributingArtistIds, requestParameters.albums, requestParameters.albumIds, requestParameters.ids, requestParameters.videoTypes, requestParameters.minOfficialRating, requestParameters.isLocked, requestParameters.isPlaceHolder, requestParameters.hasOfficialRating, requestParameters.collapseBoxSetItems, requestParameters.minWidth, requestParameters.minHeight, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.is3D, requestParameters.seriesStatus, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.studioIds, requestParameters.genreIds, requestParameters.enableTotalRecordCount, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets items based on a query.
     * @param {ItemsApiGetItemsByUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.getItemsByUserId = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemsApiFp)(this.configuration).getItemsByUserId(requestParameters.userId, requestParameters.maxOfficialRating, requestParameters.hasThemeSong, requestParameters.hasThemeVideo, requestParameters.hasSubtitles, requestParameters.hasSpecialFeature, requestParameters.hasTrailer, requestParameters.adjacentTo, requestParameters.parentIndexNumber, requestParameters.hasParentalRating, requestParameters.isHd, requestParameters.is4K, requestParameters.locationTypes, requestParameters.excludeLocationTypes, requestParameters.isMissing, requestParameters.isUnaired, requestParameters.minCommunityRating, requestParameters.minCriticRating, requestParameters.minPremiereDate, requestParameters.minDateLastSaved, requestParameters.minDateLastSavedForUser, requestParameters.maxPremiereDate, requestParameters.hasOverview, requestParameters.hasImdbId, requestParameters.hasTmdbId, requestParameters.hasTvdbId, requestParameters.excludeItemIds, requestParameters.startIndex, requestParameters.limit, requestParameters.recursive, requestParameters.searchTerm, requestParameters.sortOrder, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.imageTypes, requestParameters.sortBy, requestParameters.isPlayed, requestParameters.genres, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.artists, requestParameters.excludeArtistIds, requestParameters.artistIds, requestParameters.albumArtistIds, requestParameters.contributingArtistIds, requestParameters.albums, requestParameters.albumIds, requestParameters.ids, requestParameters.videoTypes, requestParameters.minOfficialRating, requestParameters.isLocked, requestParameters.isPlaceHolder, requestParameters.hasOfficialRating, requestParameters.collapseBoxSetItems, requestParameters.minWidth, requestParameters.minHeight, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.is3D, requestParameters.seriesStatus, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.studioIds, requestParameters.genreIds, requestParameters.enableTotalRecordCount, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets items based on a query.
     * @param {ItemsApiGetResumeItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.getResumeItems = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ItemsApiFp)(this.configuration).getResumeItems(requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.mediaTypes, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.enableTotalRecordCount, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemsApi;
}(base_1.BaseAPI));
exports.ItemsApi = ItemsApi;

},{"../base":68,"../common":69,"axios":362}],33:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryApi = exports.LibraryApiFactory = exports.LibraryApiFp = exports.LibraryApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * LibraryApi - axios parameter creator
 * @export
 */
var LibraryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Deletes an item from the library and filesystem.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteItem', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes items from the library and filesystem.
         * @param {Array<string>} [ids] The item ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all parents of an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAncestors: function (itemId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getAncestors', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/Ancestors"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets critic review for an item.
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCriticReviews: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getCriticReviews', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/CriticReviews"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads item media.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getDownload', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/Download"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the original file of an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getFile', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/File"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get item counts.
         * @param {string} [userId] Optional. Get counts from a specific user\&#39;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemCounts: function (userId, isFavorite, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Items/Counts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the library options info.
         * @param {string} [libraryContentType] Library content type.
         * @param {boolean} [isNewLibrary] Whether this is a new library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryOptionsInfo: function (libraryContentType, isNewLibrary, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Libraries/AvailableOptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (libraryContentType !== undefined) {
                                localVarQueryParameter['libraryContentType'] = libraryContentType;
                            }
                            if (isNewLibrary !== undefined) {
                                localVarQueryParameter['isNewLibrary'] = isNewLibrary;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFolders: function (isHidden, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/MediaFolders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (isHidden !== undefined) {
                                localVarQueryParameter['isHidden'] = isHidden;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of physical paths from virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhysicalPaths: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/PhysicalPaths";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarAlbums: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarAlbums', 'itemId', itemId);
                            localVarPath = "/Albums/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarArtists: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarArtists', 'itemId', itemId);
                            localVarPath = "/Artists/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarItems: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarItems', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarMovies: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarMovies', 'itemId', itemId);
                            localVarPath = "/Movies/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarShows: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarShows', 'itemId', itemId);
                            localVarPath = "/Shows/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarTrailers: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSimilarTrailers', 'itemId', itemId);
                            localVarPath = "/Trailers/{itemId}/Similar"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme songs and videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeMedia: function (itemId, userId, inheritFromParent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getThemeMedia', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/ThemeMedia"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (inheritFromParent !== undefined) {
                                localVarQueryParameter['inheritFromParent'] = inheritFromParent;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme songs for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeSongs: function (itemId, userId, inheritFromParent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getThemeSongs', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/ThemeSongs"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (inheritFromParent !== undefined) {
                                localVarQueryParameter['inheritFromParent'] = inheritFromParent;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeVideos: function (itemId, userId, inheritFromParent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getThemeVideos', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/ThemeVideos"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (inheritFromParent !== undefined) {
                                localVarQueryParameter['inheritFromParent'] = inheritFromParent;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedMovies: function (tmdbId, imdbId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/Movies/Added";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (tmdbId !== undefined) {
                                localVarQueryParameter['tmdbId'] = tmdbId;
                            }
                            if (imdbId !== undefined) {
                                localVarQueryParameter['imdbId'] = imdbId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedSeries: function (tvdbId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/Series/Added";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (tvdbId !== undefined) {
                                localVarQueryParameter['tvdbId'] = tvdbId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {MediaUpdateInfoDto} mediaUpdateInfoDto The update paths.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMedia: function (mediaUpdateInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mediaUpdateInfoDto' is not null or undefined
                            (0, common_1.assertParamExists)('postUpdatedMedia', 'mediaUpdateInfoDto', mediaUpdateInfoDto);
                            localVarPath = "/Library/Media/Updated";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mediaUpdateInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMovies: function (tmdbId, imdbId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/Movies/Updated";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (tmdbId !== undefined) {
                                localVarQueryParameter['tmdbId'] = tmdbId;
                            }
                            if (imdbId !== undefined) {
                                localVarQueryParameter['imdbId'] = imdbId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedSeries: function (tvdbId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/Series/Updated";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (tvdbId !== undefined) {
                                localVarQueryParameter['tvdbId'] = tvdbId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Starts a library scan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshLibrary: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/Refresh";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LibraryApiAxiosParamCreator = LibraryApiAxiosParamCreator;
/**
 * LibraryApi - functional programming interface
 * @export
 */
var LibraryApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LibraryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes an item from the library and filesystem.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItem(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes items from the library and filesystem.
         * @param {Array<string>} [ids] The item ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (ids, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItems(ids, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all parents of an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAncestors: function (itemId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAncestors(itemId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets critic review for an item.
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCriticReviews: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCriticReviews(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads item media.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDownload(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the original file of an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFile(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get item counts.
         * @param {string} [userId] Optional. Get counts from a specific user\&#39;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemCounts: function (userId, isFavorite, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItemCounts(userId, isFavorite, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the library options info.
         * @param {string} [libraryContentType] Library content type.
         * @param {boolean} [isNewLibrary] Whether this is a new library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryOptionsInfo: function (libraryContentType, isNewLibrary, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLibraryOptionsInfo(libraryContentType, isNewLibrary, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFolders: function (isHidden, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMediaFolders(isHidden, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of physical paths from virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhysicalPaths: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPhysicalPaths(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarAlbums: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarAlbums(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarArtists: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarArtists(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarItems: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarItems(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarMovies: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarMovies(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarShows: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarShows(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarTrailers: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSimilarTrailers(itemId, excludeArtistIds, userId, limit, fields, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme songs and videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeMedia: function (itemId, userId, inheritFromParent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getThemeMedia(itemId, userId, inheritFromParent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme songs for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeSongs: function (itemId, userId, inheritFromParent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getThemeSongs(itemId, userId, inheritFromParent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get theme videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeVideos: function (itemId, userId, inheritFromParent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getThemeVideos(itemId, userId, inheritFromParent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedMovies: function (tmdbId, imdbId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postAddedMovies(tmdbId, imdbId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedSeries: function (tvdbId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postAddedSeries(tvdbId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {MediaUpdateInfoDto} mediaUpdateInfoDto The update paths.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMedia: function (mediaUpdateInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postUpdatedMedia(mediaUpdateInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMovies: function (tmdbId, imdbId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postUpdatedMovies(tmdbId, imdbId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedSeries: function (tvdbId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postUpdatedSeries(tvdbId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Starts a library scan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshLibrary: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.refreshLibrary(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.LibraryApiFp = LibraryApiFp;
/**
 * LibraryApi - factory interface
 * @export
 */
var LibraryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LibraryApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes an item from the library and filesystem.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            return localVarFp.deleteItem(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes items from the library and filesystem.
         * @param {Array<string>} [ids] The item ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (ids, options) {
            return localVarFp.deleteItems(ids, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all parents of an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAncestors: function (itemId, userId, options) {
            return localVarFp.getAncestors(itemId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets critic review for an item.
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCriticReviews: function (itemId, options) {
            return localVarFp.getCriticReviews(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Downloads item media.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload: function (itemId, options) {
            return localVarFp.getDownload(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the original file of an item.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: function (itemId, options) {
            return localVarFp.getFile(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get item counts.
         * @param {string} [userId] Optional. Get counts from a specific user\&#39;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemCounts: function (userId, isFavorite, options) {
            return localVarFp.getItemCounts(userId, isFavorite, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the library options info.
         * @param {string} [libraryContentType] Library content type.
         * @param {boolean} [isNewLibrary] Whether this is a new library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryOptionsInfo: function (libraryContentType, isNewLibrary, options) {
            return localVarFp.getLibraryOptionsInfo(libraryContentType, isNewLibrary, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFolders: function (isHidden, options) {
            return localVarFp.getMediaFolders(isHidden, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of physical paths from virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhysicalPaths: function (options) {
            return localVarFp.getPhysicalPaths(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarAlbums: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarAlbums(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarArtists: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarArtists(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarItems: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarItems(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarMovies: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarMovies(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarShows: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarShows(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets similar items.
         * @param {string} itemId The item id.
         * @param {Array<string>} [excludeArtistIds] Exclude artist ids.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarTrailers: function (itemId, excludeArtistIds, userId, limit, fields, options) {
            return localVarFp.getSimilarTrailers(itemId, excludeArtistIds, userId, limit, fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get theme songs and videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeMedia: function (itemId, userId, inheritFromParent, options) {
            return localVarFp.getThemeMedia(itemId, userId, inheritFromParent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get theme songs for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeSongs: function (itemId, userId, inheritFromParent, options) {
            return localVarFp.getThemeSongs(itemId, userId, inheritFromParent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get theme videos for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {boolean} [inheritFromParent] Optional. Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeVideos: function (itemId, userId, inheritFromParent, options) {
            return localVarFp.getThemeVideos(itemId, userId, inheritFromParent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedMovies: function (tmdbId, imdbId, options) {
            return localVarFp.postAddedMovies(tmdbId, imdbId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddedSeries: function (tvdbId, options) {
            return localVarFp.postAddedSeries(tvdbId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {MediaUpdateInfoDto} mediaUpdateInfoDto The update paths.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMedia: function (mediaUpdateInfoDto, options) {
            return localVarFp.postUpdatedMedia(mediaUpdateInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that new movies have been added by an external source.
         * @param {string} [tmdbId] The tmdbId.
         * @param {string} [imdbId] The imdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedMovies: function (tmdbId, imdbId, options) {
            return localVarFp.postUpdatedMovies(tmdbId, imdbId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that new episodes of a series have been added by an external source.
         * @param {string} [tvdbId] The tvdbId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatedSeries: function (tvdbId, options) {
            return localVarFp.postUpdatedSeries(tvdbId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Starts a library scan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshLibrary: function (options) {
            return localVarFp.refreshLibrary(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LibraryApiFactory = LibraryApiFactory;
/**
 * LibraryApi - object-oriented interface
 * @export
 * @class LibraryApi
 * @extends {BaseAPI}
 */
var LibraryApi = /** @class */ (function (_super) {
    __extends(LibraryApi, _super);
    function LibraryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Deletes an item from the library and filesystem.
     * @param {LibraryApiDeleteItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.deleteItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).deleteItem(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes items from the library and filesystem.
     * @param {LibraryApiDeleteItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.deleteItems = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).deleteItems(requestParameters.ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all parents of an item.
     * @param {LibraryApiGetAncestorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getAncestors = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getAncestors(requestParameters.itemId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets critic review for an item.
     * @param {LibraryApiGetCriticReviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getCriticReviews = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getCriticReviews(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Downloads item media.
     * @param {LibraryApiGetDownloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getDownload = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getDownload(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the original file of an item.
     * @param {LibraryApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getFile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getFile(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get item counts.
     * @param {LibraryApiGetItemCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getItemCounts = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).getItemCounts(requestParameters.userId, requestParameters.isFavorite, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the library options info.
     * @param {LibraryApiGetLibraryOptionsInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getLibraryOptionsInfo = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).getLibraryOptionsInfo(requestParameters.libraryContentType, requestParameters.isNewLibrary, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all user media folders.
     * @param {LibraryApiGetMediaFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getMediaFolders = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).getMediaFolders(requestParameters.isHidden, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of physical paths from virtual folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getPhysicalPaths = function (options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getPhysicalPaths(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarAlbumsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarAlbums = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarAlbums(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarArtistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarArtists = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarArtists(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarItems = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarItems(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarMovies = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarMovies(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarShowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarShows = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarShows(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets similar items.
     * @param {LibraryApiGetSimilarTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getSimilarTrailers = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getSimilarTrailers(requestParameters.itemId, requestParameters.excludeArtistIds, requestParameters.userId, requestParameters.limit, requestParameters.fields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get theme songs and videos for an item.
     * @param {LibraryApiGetThemeMediaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getThemeMedia = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getThemeMedia(requestParameters.itemId, requestParameters.userId, requestParameters.inheritFromParent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get theme songs for an item.
     * @param {LibraryApiGetThemeSongsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getThemeSongs = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getThemeSongs(requestParameters.itemId, requestParameters.userId, requestParameters.inheritFromParent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get theme videos for an item.
     * @param {LibraryApiGetThemeVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.getThemeVideos = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).getThemeVideos(requestParameters.itemId, requestParameters.userId, requestParameters.inheritFromParent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that new movies have been added by an external source.
     * @param {LibraryApiPostAddedMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.postAddedMovies = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).postAddedMovies(requestParameters.tmdbId, requestParameters.imdbId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that new episodes of a series have been added by an external source.
     * @param {LibraryApiPostAddedSeriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.postAddedSeries = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).postAddedSeries(requestParameters.tvdbId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that new movies have been added by an external source.
     * @param {LibraryApiPostUpdatedMediaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.postUpdatedMedia = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).postUpdatedMedia(requestParameters.mediaUpdateInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that new movies have been added by an external source.
     * @param {LibraryApiPostUpdatedMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.postUpdatedMovies = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).postUpdatedMovies(requestParameters.tmdbId, requestParameters.imdbId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that new episodes of a series have been added by an external source.
     * @param {LibraryApiPostUpdatedSeriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.postUpdatedSeries = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryApiFp)(this.configuration).postUpdatedSeries(requestParameters.tvdbId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Starts a library scan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    LibraryApi.prototype.refreshLibrary = function (options) {
        var _this = this;
        return (0, exports.LibraryApiFp)(this.configuration).refreshLibrary(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LibraryApi;
}(base_1.BaseAPI));
exports.LibraryApi = LibraryApi;

},{"../base":68,"../common":69,"axios":362}],34:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryStructureApi = exports.LibraryStructureApiFactory = exports.LibraryStructureApiFp = exports.LibraryStructureApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * LibraryStructureApi - axios parameter creator
 * @export
 */
var LibraryStructureApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add a media path to a library.
         * @param {MediaPathDto} mediaPathDto The media path dto.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaPath: function (mediaPathDto, refreshLibrary, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mediaPathDto' is not null or undefined
                            (0, common_1.assertParamExists)('addMediaPath', 'mediaPathDto', mediaPathDto);
                            localVarPath = "/Library/VirtualFolders/Paths";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (refreshLibrary !== undefined) {
                                localVarQueryParameter['refreshLibrary'] = refreshLibrary;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mediaPathDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Adds a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {CollectionTypeOptions} [collectionType] The type of the collection.
         * @param {Array<string>} [paths] The paths of the virtual folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {AddVirtualFolderDto} [addVirtualFolderDto] The library options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVirtualFolder: function (name, collectionType, paths, refreshLibrary, addVirtualFolderDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (collectionType !== undefined) {
                                localVarQueryParameter['collectionType'] = collectionType;
                            }
                            if (paths) {
                                localVarQueryParameter['paths'] = paths;
                            }
                            if (refreshLibrary !== undefined) {
                                localVarQueryParameter['refreshLibrary'] = refreshLibrary;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addVirtualFolderDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualFolders: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove a media path.
         * @param {string} [name] The name of the library.
         * @param {string} [path] The path to remove.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaPath: function (name, path, refreshLibrary, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders/Paths";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (path !== undefined) {
                                localVarQueryParameter['path'] = path;
                            }
                            if (refreshLibrary !== undefined) {
                                localVarQueryParameter['refreshLibrary'] = refreshLibrary;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes a virtual folder.
         * @param {string} [name] The name of the folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVirtualFolder: function (name, refreshLibrary, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (refreshLibrary !== undefined) {
                                localVarQueryParameter['refreshLibrary'] = refreshLibrary;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Renames a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {string} [newName] The new name.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameVirtualFolder: function (name, newName, refreshLibrary, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders/Name";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (newName !== undefined) {
                                localVarQueryParameter['newName'] = newName;
                            }
                            if (refreshLibrary !== undefined) {
                                localVarQueryParameter['refreshLibrary'] = refreshLibrary;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update library options.
         * @param {UpdateLibraryOptionsDto} [updateLibraryOptionsDto] The library name and options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryOptions: function (updateLibraryOptionsDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Library/VirtualFolders/LibraryOptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateLibraryOptionsDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a media path.
         * @param {UpdateMediaPathRequestDto} updateMediaPathRequestDto The name of the library and path infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaPath: function (updateMediaPathRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'updateMediaPathRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateMediaPath', 'updateMediaPathRequestDto', updateMediaPathRequestDto);
                            localVarPath = "/Library/VirtualFolders/Paths/Update";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateMediaPathRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LibraryStructureApiAxiosParamCreator = LibraryStructureApiAxiosParamCreator;
/**
 * LibraryStructureApi - functional programming interface
 * @export
 */
var LibraryStructureApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LibraryStructureApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add a media path to a library.
         * @param {MediaPathDto} mediaPathDto The media path dto.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaPath: function (mediaPathDto, refreshLibrary, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMediaPath(mediaPathDto, refreshLibrary, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Adds a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {CollectionTypeOptions} [collectionType] The type of the collection.
         * @param {Array<string>} [paths] The paths of the virtual folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {AddVirtualFolderDto} [addVirtualFolderDto] The library options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVirtualFolder: function (name, collectionType, paths, refreshLibrary, addVirtualFolderDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addVirtualFolder(name, collectionType, paths, refreshLibrary, addVirtualFolderDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualFolders: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVirtualFolders(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove a media path.
         * @param {string} [name] The name of the library.
         * @param {string} [path] The path to remove.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaPath: function (name, path, refreshLibrary, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeMediaPath(name, path, refreshLibrary, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes a virtual folder.
         * @param {string} [name] The name of the folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVirtualFolder: function (name, refreshLibrary, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeVirtualFolder(name, refreshLibrary, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Renames a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {string} [newName] The new name.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameVirtualFolder: function (name, newName, refreshLibrary, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.renameVirtualFolder(name, newName, refreshLibrary, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update library options.
         * @param {UpdateLibraryOptionsDto} [updateLibraryOptionsDto] The library name and options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryOptions: function (updateLibraryOptionsDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLibraryOptions(updateLibraryOptionsDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a media path.
         * @param {UpdateMediaPathRequestDto} updateMediaPathRequestDto The name of the library and path infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaPath: function (updateMediaPathRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMediaPath(updateMediaPathRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.LibraryStructureApiFp = LibraryStructureApiFp;
/**
 * LibraryStructureApi - factory interface
 * @export
 */
var LibraryStructureApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LibraryStructureApiFp)(configuration);
    return {
        /**
         *
         * @summary Add a media path to a library.
         * @param {MediaPathDto} mediaPathDto The media path dto.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaPath: function (mediaPathDto, refreshLibrary, options) {
            return localVarFp.addMediaPath(mediaPathDto, refreshLibrary, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Adds a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {CollectionTypeOptions} [collectionType] The type of the collection.
         * @param {Array<string>} [paths] The paths of the virtual folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {AddVirtualFolderDto} [addVirtualFolderDto] The library options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVirtualFolder: function (name, collectionType, paths, refreshLibrary, addVirtualFolderDto, options) {
            return localVarFp.addVirtualFolder(name, collectionType, paths, refreshLibrary, addVirtualFolderDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all virtual folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualFolders: function (options) {
            return localVarFp.getVirtualFolders(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove a media path.
         * @param {string} [name] The name of the library.
         * @param {string} [path] The path to remove.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaPath: function (name, path, refreshLibrary, options) {
            return localVarFp.removeMediaPath(name, path, refreshLibrary, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes a virtual folder.
         * @param {string} [name] The name of the folder.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeVirtualFolder: function (name, refreshLibrary, options) {
            return localVarFp.removeVirtualFolder(name, refreshLibrary, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Renames a virtual folder.
         * @param {string} [name] The name of the virtual folder.
         * @param {string} [newName] The new name.
         * @param {boolean} [refreshLibrary] Whether to refresh the library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameVirtualFolder: function (name, newName, refreshLibrary, options) {
            return localVarFp.renameVirtualFolder(name, newName, refreshLibrary, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update library options.
         * @param {UpdateLibraryOptionsDto} [updateLibraryOptionsDto] The library name and options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryOptions: function (updateLibraryOptionsDto, options) {
            return localVarFp.updateLibraryOptions(updateLibraryOptionsDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a media path.
         * @param {UpdateMediaPathRequestDto} updateMediaPathRequestDto The name of the library and path infos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaPath: function (updateMediaPathRequestDto, options) {
            return localVarFp.updateMediaPath(updateMediaPathRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LibraryStructureApiFactory = LibraryStructureApiFactory;
/**
 * LibraryStructureApi - object-oriented interface
 * @export
 * @class LibraryStructureApi
 * @extends {BaseAPI}
 */
var LibraryStructureApi = /** @class */ (function (_super) {
    __extends(LibraryStructureApi, _super);
    function LibraryStructureApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add a media path to a library.
     * @param {LibraryStructureApiAddMediaPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.addMediaPath = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryStructureApiFp)(this.configuration).addMediaPath(requestParameters.mediaPathDto, requestParameters.refreshLibrary, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Adds a virtual folder.
     * @param {LibraryStructureApiAddVirtualFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.addVirtualFolder = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryStructureApiFp)(this.configuration).addVirtualFolder(requestParameters.name, requestParameters.collectionType, requestParameters.paths, requestParameters.refreshLibrary, requestParameters.addVirtualFolderDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all virtual folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.getVirtualFolders = function (options) {
        var _this = this;
        return (0, exports.LibraryStructureApiFp)(this.configuration).getVirtualFolders(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove a media path.
     * @param {LibraryStructureApiRemoveMediaPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.removeMediaPath = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryStructureApiFp)(this.configuration).removeMediaPath(requestParameters.name, requestParameters.path, requestParameters.refreshLibrary, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes a virtual folder.
     * @param {LibraryStructureApiRemoveVirtualFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.removeVirtualFolder = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryStructureApiFp)(this.configuration).removeVirtualFolder(requestParameters.name, requestParameters.refreshLibrary, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Renames a virtual folder.
     * @param {LibraryStructureApiRenameVirtualFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.renameVirtualFolder = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryStructureApiFp)(this.configuration).renameVirtualFolder(requestParameters.name, requestParameters.newName, requestParameters.refreshLibrary, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update library options.
     * @param {LibraryStructureApiUpdateLibraryOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.updateLibraryOptions = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LibraryStructureApiFp)(this.configuration).updateLibraryOptions(requestParameters.updateLibraryOptionsDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a media path.
     * @param {LibraryStructureApiUpdateMediaPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureApi
     */
    LibraryStructureApi.prototype.updateMediaPath = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LibraryStructureApiFp)(this.configuration).updateMediaPath(requestParameters.updateMediaPathRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LibraryStructureApi;
}(base_1.BaseAPI));
exports.LibraryStructureApi = LibraryStructureApi;

},{"../base":68,"../common":69,"axios":362}],35:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveTvApi = exports.LiveTvApiFactory = exports.LiveTvApiFp = exports.LiveTvApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * LiveTvApi - axios parameter creator
 * @export
 */
var LiveTvApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Adds a listings provider.
         * @param {string} [pw] Password.
         * @param {boolean} [validateListings] Validate listings.
         * @param {boolean} [validateLogin] Validate login.
         * @param {ListingsProviderInfo} [listingsProviderInfo] New listings info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListingProvider: function (pw, validateListings, validateLogin, listingsProviderInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ListingProviders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (pw !== undefined) {
                                localVarQueryParameter['pw'] = pw;
                            }
                            if (validateListings !== undefined) {
                                localVarQueryParameter['validateListings'] = validateListings;
                            }
                            if (validateLogin !== undefined) {
                                localVarQueryParameter['validateLogin'] = validateLogin;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listingsProviderInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Adds a tuner host.
         * @param {TunerHostInfo} [tunerHostInfo] New tuner host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTunerHost: function (tunerHostInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/TunerHosts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tunerHostInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Cancels a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSeriesTimer: function (timerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('cancelSeriesTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/SeriesTimers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Cancels a live tv timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTimer: function (timerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('cancelTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/Timers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a live tv series timer.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeriesTimer: function (seriesTimerInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/SeriesTimers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seriesTimerInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a live tv timer.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimer: function (timerInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Timers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(timerInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete listing provider.
         * @param {string} [id] Listing provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListingProvider: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ListingProviders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording: function (recordingId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'recordingId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteRecording', 'recordingId', recordingId);
                            localVarPath = "/LiveTv/Recordings/{recordingId}"
                                .replace("{".concat("recordingId", "}"), encodeURIComponent(String(recordingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a tuner host.
         * @param {string} [id] Tuner host id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTunerHost: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/TunerHosts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverTuners: function (newDevicesOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Tuners/Discover";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (newDevicesOnly !== undefined) {
                                localVarQueryParameter['newDevicesOnly'] = newDevicesOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discvoverTuners: function (newDevicesOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Tuners/Discvover";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (newDevicesOnly !== undefined) {
                                localVarQueryParameter['newDevicesOnly'] = newDevicesOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv channel.
         * @param {string} channelId Channel id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel: function (channelId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'channelId' is not null or undefined
                            (0, common_1.assertParamExists)('getChannel', 'channelId', channelId);
                            localVarPath = "/LiveTv/Channels/{channelId}"
                                .replace("{".concat("channelId", "}"), encodeURIComponent(String(channelId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel mapping options.
         * @param {string} [providerId] Provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelMappingOptions: function (providerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ChannelMappingOptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (providerId !== undefined) {
                                localVarQueryParameter['providerId'] = providerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets default listings provider info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultListingProvider: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ListingProviders/Default";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the default values for a new timer.
         * @param {string} [programId] Optional. To attach default values based on a program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultTimer: function (programId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Timers/Defaults";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (programId !== undefined) {
                                localVarQueryParameter['programId'] = programId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get guid info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuideInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/GuideInfo";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available lineups.
         * @param {string} [id] Provider id.
         * @param {string} [type] Provider type.
         * @param {string} [location] Location.
         * @param {string} [country] Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineups: function (id, type, location, country, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ListingProviders/Lineups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (location !== undefined) {
                                localVarQueryParameter['location'] = location;
                            }
                            if (country !== undefined) {
                                localVarQueryParameter['country'] = country;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv recording stream.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRecordingFile: function (recordingId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'recordingId' is not null or undefined
                    (0, common_1.assertParamExists)('getLiveRecordingFile', 'recordingId', recordingId);
                    localVarPath = "/LiveTv/LiveRecordings/{recordingId}/stream"
                        .replace("{".concat("recordingId", "}"), encodeURIComponent(String(recordingId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a live tv channel stream.
         * @param {string} streamId Stream id.
         * @param {string} container Container type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveStreamFile: function (streamId, container, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'streamId' is not null or undefined
                    (0, common_1.assertParamExists)('getLiveStreamFile', 'streamId', streamId);
                    // verify required parameter 'container' is not null or undefined
                    (0, common_1.assertParamExists)('getLiveStreamFile', 'container', container);
                    localVarPath = "/LiveTv/LiveStreamFiles/{streamId}/stream.{container}"
                        .replace("{".concat("streamId", "}"), encodeURIComponent(String(streamId)))
                        .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets available live tv channels.
         * @param {ChannelType} [type] Optional. Filter by channel type.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorites, or not.
         * @param {boolean} [isLiked] Optional. Filter by channels that are liked, or not.
         * @param {boolean} [isDisliked] Optional. Filter by channels that are disliked, or not.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] \&quot;Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {Array<string>} [sortBy] Optional. Key to sort by.
         * @param {SortOrder} [sortOrder] Optional. Sort order.
         * @param {boolean} [enableFavoriteSorting] Optional. Incorporate favorite and like status into channel sorting.
         * @param {boolean} [addCurrentProgram] Optional. Adds current program info to each channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvChannels: function (type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Channels";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (isLiked !== undefined) {
                                localVarQueryParameter['isLiked'] = isLiked;
                            }
                            if (isDisliked !== undefined) {
                                localVarQueryParameter['isDisliked'] = isDisliked;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (sortOrder !== undefined) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (enableFavoriteSorting !== undefined) {
                                localVarQueryParameter['enableFavoriteSorting'] = enableFavoriteSorting;
                            }
                            if (addCurrentProgram !== undefined) {
                                localVarQueryParameter['addCurrentProgram'] = addCurrentProgram;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Info";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {Array<string>} [channelIds] The channels to return guide information for.
         * @param {string} [userId] Optional. Filter by user id.
         * @param {string} [minStartDate] Optional. The minimum premiere start date.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {string} [maxStartDate] Optional. The maximum premiere start date.
         * @param {string} [minEndDate] Optional. The minimum premiere end date.
         * @param {string} [maxEndDate] Optional. The maximum premiere end date.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {Array<string>} [genres] The genres to return guide information for.
         * @param {Array<string>} [genreIds] The genre ids to return guide information for.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [seriesTimerId] Optional. Filter by series timer id.
         * @param {string} [librarySeriesId] Optional. Filter by library series id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvPrograms: function (channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Programs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (channelIds) {
                                localVarQueryParameter['channelIds'] = channelIds;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (minStartDate !== undefined) {
                                localVarQueryParameter['minStartDate'] = (minStartDate instanceof Date) ?
                                    minStartDate.toISOString() :
                                    minStartDate;
                            }
                            if (hasAired !== undefined) {
                                localVarQueryParameter['hasAired'] = hasAired;
                            }
                            if (isAiring !== undefined) {
                                localVarQueryParameter['isAiring'] = isAiring;
                            }
                            if (maxStartDate !== undefined) {
                                localVarQueryParameter['maxStartDate'] = (maxStartDate instanceof Date) ?
                                    maxStartDate.toISOString() :
                                    maxStartDate;
                            }
                            if (minEndDate !== undefined) {
                                localVarQueryParameter['minEndDate'] = (minEndDate instanceof Date) ?
                                    minEndDate.toISOString() :
                                    minEndDate;
                            }
                            if (maxEndDate !== undefined) {
                                localVarQueryParameter['maxEndDate'] = (maxEndDate instanceof Date) ?
                                    maxEndDate.toISOString() :
                                    maxEndDate;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (seriesTimerId !== undefined) {
                                localVarQueryParameter['seriesTimerId'] = seriesTimerId;
                            }
                            if (librarySeriesId !== undefined) {
                                localVarQueryParameter['librarySeriesId'] = librarySeriesId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv program.
         * @param {string} programId Program id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram: function (programId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'programId' is not null or undefined
                            (0, common_1.assertParamExists)('getProgram', 'programId', programId);
                            localVarPath = "/LiveTv/Programs/{programId}"
                                .replace("{".concat("programId", "}"), encodeURIComponent(String(programId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {GetProgramsDto} [getProgramsDto] Request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms: function (getProgramsDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Programs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getProgramsDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets recommended live tv epgs.
         * @param {string} [userId] Optional. filter by user id.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [genreIds] The genres to return guide information for.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendedPrograms: function (userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Programs/Recommended";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (isAiring !== undefined) {
                                localVarQueryParameter['isAiring'] = isAiring;
                            }
                            if (hasAired !== undefined) {
                                localVarQueryParameter['hasAired'] = hasAired;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecording: function (recordingId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'recordingId' is not null or undefined
                            (0, common_1.assertParamExists)('getRecording', 'recordingId', recordingId);
                            localVarPath = "/LiveTv/Recordings/{recordingId}"
                                .replace("{".concat("recordingId", "}"), encodeURIComponent(String(recordingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets recording folders.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingFolders: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Recordings/Folders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get recording group.
         * @param {string} groupId Group id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroup: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('getRecordingGroup', 'groupId', groupId);
                            localVarPath = "/LiveTv/Recordings/Groups/{groupId}"
                                .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recording groups.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroups: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Recordings/Groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recordings.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isLibraryItem] Optional. Filter for is library item.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordings: function (channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Recordings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (channelId !== undefined) {
                                localVarQueryParameter['channelId'] = channelId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (isInProgress !== undefined) {
                                localVarQueryParameter['isInProgress'] = isInProgress;
                            }
                            if (seriesTimerId !== undefined) {
                                localVarQueryParameter['seriesTimerId'] = seriesTimerId;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isLibraryItem !== undefined) {
                                localVarQueryParameter['isLibraryItem'] = isLibraryItem;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recording series.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {string} [groupId] Optional. Filter by recording group.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingsSeries: function (channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Recordings/Series";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (channelId !== undefined) {
                                localVarQueryParameter['channelId'] = channelId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (groupId !== undefined) {
                                localVarQueryParameter['groupId'] = groupId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (isInProgress !== undefined) {
                                localVarQueryParameter['isInProgress'] = isInProgress;
                            }
                            if (seriesTimerId !== undefined) {
                                localVarQueryParameter['seriesTimerId'] = seriesTimerId;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedulesDirectCountries: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/ListingProviders/SchedulesDirect/Countries";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimer: function (timerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('getSeriesTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/SeriesTimers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv series timers.
         * @param {string} [sortBy] Optional. Sort by SortName or Priority.
         * @param {SortOrder} [sortOrder] Optional. Sort in Ascending or Descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimers: function (sortBy, sortOrder, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/SeriesTimers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (sortBy !== undefined) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (sortOrder !== undefined) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimer: function (timerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('getTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/Timers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the live tv timers.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [seriesTimerId] Optional. Filter by timers belonging to a series timer.
         * @param {boolean} [isActive] Optional. Filter by timers that are active.
         * @param {boolean} [isScheduled] Optional. Filter by timers that are scheduled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimers: function (channelId, seriesTimerId, isActive, isScheduled, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/Timers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (channelId !== undefined) {
                                localVarQueryParameter['channelId'] = channelId;
                            }
                            if (seriesTimerId !== undefined) {
                                localVarQueryParameter['seriesTimerId'] = seriesTimerId;
                            }
                            if (isActive !== undefined) {
                                localVarQueryParameter['isActive'] = isActive;
                            }
                            if (isScheduled !== undefined) {
                                localVarQueryParameter['isScheduled'] = isScheduled;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get tuner host types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTunerHostTypes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveTv/TunerHosts/Types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Resets a tv tuner.
         * @param {string} tunerId Tuner id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTuner: function (tunerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'tunerId' is not null or undefined
                            (0, common_1.assertParamExists)('resetTuner', 'tunerId', tunerId);
                            localVarPath = "/LiveTv/Tuners/{tunerId}/Reset"
                                .replace("{".concat("tunerId", "}"), encodeURIComponent(String(tunerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set channel mappings.
         * @param {SetChannelMappingDto} setChannelMappingDto The set channel mapping dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChannelMapping: function (setChannelMappingDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'setChannelMappingDto' is not null or undefined
                            (0, common_1.assertParamExists)('setChannelMapping', 'setChannelMappingDto', setChannelMappingDto);
                            localVarPath = "/LiveTv/ChannelMappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setChannelMappingDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeriesTimer: function (timerId, seriesTimerInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('updateSeriesTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/SeriesTimers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seriesTimerInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a live tv timer.
         * @param {string} timerId Timer id.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimer: function (timerId, timerInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'timerId' is not null or undefined
                            (0, common_1.assertParamExists)('updateTimer', 'timerId', timerId);
                            localVarPath = "/LiveTv/Timers/{timerId}"
                                .replace("{".concat("timerId", "}"), encodeURIComponent(String(timerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(timerInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LiveTvApiAxiosParamCreator = LiveTvApiAxiosParamCreator;
/**
 * LiveTvApi - functional programming interface
 * @export
 */
var LiveTvApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LiveTvApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Adds a listings provider.
         * @param {string} [pw] Password.
         * @param {boolean} [validateListings] Validate listings.
         * @param {boolean} [validateLogin] Validate login.
         * @param {ListingsProviderInfo} [listingsProviderInfo] New listings info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListingProvider: function (pw, validateListings, validateLogin, listingsProviderInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addListingProvider(pw, validateListings, validateLogin, listingsProviderInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Adds a tuner host.
         * @param {TunerHostInfo} [tunerHostInfo] New tuner host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTunerHost: function (tunerHostInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTunerHost(tunerHostInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Cancels a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSeriesTimer: function (timerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelSeriesTimer(timerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Cancels a live tv timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTimer: function (timerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelTimer(timerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a live tv series timer.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeriesTimer: function (seriesTimerInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSeriesTimer(seriesTimerInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a live tv timer.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimer: function (timerInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createTimer(timerInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete listing provider.
         * @param {string} [id] Listing provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListingProvider: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteListingProvider(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording: function (recordingId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteRecording(recordingId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a tuner host.
         * @param {string} [id] Tuner host id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTunerHost: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTunerHost(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverTuners: function (newDevicesOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.discoverTuners(newDevicesOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discvoverTuners: function (newDevicesOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.discvoverTuners(newDevicesOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv channel.
         * @param {string} channelId Channel id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel: function (channelId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getChannel(channelId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get channel mapping options.
         * @param {string} [providerId] Provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelMappingOptions: function (providerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getChannelMappingOptions(providerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets default listings provider info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultListingProvider: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultListingProvider(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the default values for a new timer.
         * @param {string} [programId] Optional. To attach default values based on a program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultTimer: function (programId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultTimer(programId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get guid info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuideInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGuideInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available lineups.
         * @param {string} [id] Provider id.
         * @param {string} [type] Provider type.
         * @param {string} [location] Location.
         * @param {string} [country] Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineups: function (id, type, location, country, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLineups(id, type, location, country, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv recording stream.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRecordingFile: function (recordingId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveRecordingFile(recordingId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv channel stream.
         * @param {string} streamId Stream id.
         * @param {string} container Container type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveStreamFile: function (streamId, container, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveStreamFile(streamId, container, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv channels.
         * @param {ChannelType} [type] Optional. Filter by channel type.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorites, or not.
         * @param {boolean} [isLiked] Optional. Filter by channels that are liked, or not.
         * @param {boolean} [isDisliked] Optional. Filter by channels that are disliked, or not.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] \&quot;Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {Array<string>} [sortBy] Optional. Key to sort by.
         * @param {SortOrder} [sortOrder] Optional. Sort order.
         * @param {boolean} [enableFavoriteSorting] Optional. Incorporate favorite and like status into channel sorting.
         * @param {boolean} [addCurrentProgram] Optional. Adds current program info to each channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvChannels: function (type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveTvChannels(type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveTvInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {Array<string>} [channelIds] The channels to return guide information for.
         * @param {string} [userId] Optional. Filter by user id.
         * @param {string} [minStartDate] Optional. The minimum premiere start date.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {string} [maxStartDate] Optional. The maximum premiere start date.
         * @param {string} [minEndDate] Optional. The minimum premiere end date.
         * @param {string} [maxEndDate] Optional. The maximum premiere end date.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {Array<string>} [genres] The genres to return guide information for.
         * @param {Array<string>} [genreIds] The genre ids to return guide information for.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [seriesTimerId] Optional. Filter by series timer id.
         * @param {string} [librarySeriesId] Optional. Filter by library series id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvPrograms: function (channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveTvPrograms(channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv program.
         * @param {string} programId Program id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram: function (programId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProgram(programId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {GetProgramsDto} [getProgramsDto] Request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms: function (getProgramsDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPrograms(getProgramsDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets recommended live tv epgs.
         * @param {string} [userId] Optional. filter by user id.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [genreIds] The genres to return guide information for.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendedPrograms: function (userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecommendedPrograms(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecording: function (recordingId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecording(recordingId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets recording folders.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingFolders: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecordingFolders(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get recording group.
         * @param {string} groupId Group id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroup: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecordingGroup(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recording groups.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroups: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecordingGroups(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recordings.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isLibraryItem] Optional. Filter for is library item.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordings: function (channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecordings(channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv recording series.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {string} [groupId] Optional. Filter by recording group.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingsSeries: function (channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecordingsSeries(channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedulesDirectCountries: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSchedulesDirectCountries(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimer: function (timerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSeriesTimer(timerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live tv series timers.
         * @param {string} [sortBy] Optional. Sort by SortName or Priority.
         * @param {SortOrder} [sortOrder] Optional. Sort in Ascending or Descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimers: function (sortBy, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSeriesTimers(sortBy, sortOrder, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimer: function (timerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTimer(timerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the live tv timers.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [seriesTimerId] Optional. Filter by timers belonging to a series timer.
         * @param {boolean} [isActive] Optional. Filter by timers that are active.
         * @param {boolean} [isScheduled] Optional. Filter by timers that are scheduled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimers: function (channelId, seriesTimerId, isActive, isScheduled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTimers(channelId, seriesTimerId, isActive, isScheduled, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get tuner host types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTunerHostTypes: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTunerHostTypes(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Resets a tv tuner.
         * @param {string} tunerId Tuner id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTuner: function (tunerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resetTuner(tunerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Set channel mappings.
         * @param {SetChannelMappingDto} setChannelMappingDto The set channel mapping dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChannelMapping: function (setChannelMappingDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setChannelMapping(setChannelMappingDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeriesTimer: function (timerId, seriesTimerInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSeriesTimer(timerId, seriesTimerInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a live tv timer.
         * @param {string} timerId Timer id.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimer: function (timerId, timerInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTimer(timerId, timerInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.LiveTvApiFp = LiveTvApiFp;
/**
 * LiveTvApi - factory interface
 * @export
 */
var LiveTvApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LiveTvApiFp)(configuration);
    return {
        /**
         *
         * @summary Adds a listings provider.
         * @param {string} [pw] Password.
         * @param {boolean} [validateListings] Validate listings.
         * @param {boolean} [validateLogin] Validate login.
         * @param {ListingsProviderInfo} [listingsProviderInfo] New listings info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListingProvider: function (pw, validateListings, validateLogin, listingsProviderInfo, options) {
            return localVarFp.addListingProvider(pw, validateListings, validateLogin, listingsProviderInfo, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Adds a tuner host.
         * @param {TunerHostInfo} [tunerHostInfo] New tuner host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTunerHost: function (tunerHostInfo, options) {
            return localVarFp.addTunerHost(tunerHostInfo, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Cancels a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSeriesTimer: function (timerId, options) {
            return localVarFp.cancelSeriesTimer(timerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Cancels a live tv timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTimer: function (timerId, options) {
            return localVarFp.cancelTimer(timerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a live tv series timer.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeriesTimer: function (seriesTimerInfoDto, options) {
            return localVarFp.createSeriesTimer(seriesTimerInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a live tv timer.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimer: function (timerInfoDto, options) {
            return localVarFp.createTimer(timerInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete listing provider.
         * @param {string} [id] Listing provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListingProvider: function (id, options) {
            return localVarFp.deleteListingProvider(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording: function (recordingId, options) {
            return localVarFp.deleteRecording(recordingId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes a tuner host.
         * @param {string} [id] Tuner host id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTunerHost: function (id, options) {
            return localVarFp.deleteTunerHost(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverTuners: function (newDevicesOnly, options) {
            return localVarFp.discoverTuners(newDevicesOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Discover tuners.
         * @param {boolean} [newDevicesOnly] Only discover new tuners.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discvoverTuners: function (newDevicesOnly, options) {
            return localVarFp.discvoverTuners(newDevicesOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv channel.
         * @param {string} channelId Channel id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel: function (channelId, userId, options) {
            return localVarFp.getChannel(channelId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get channel mapping options.
         * @param {string} [providerId] Provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelMappingOptions: function (providerId, options) {
            return localVarFp.getChannelMappingOptions(providerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets default listings provider info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultListingProvider: function (options) {
            return localVarFp.getDefaultListingProvider(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the default values for a new timer.
         * @param {string} [programId] Optional. To attach default values based on a program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultTimer: function (programId, options) {
            return localVarFp.getDefaultTimer(programId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get guid info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuideInfo: function (options) {
            return localVarFp.getGuideInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available lineups.
         * @param {string} [id] Provider id.
         * @param {string} [type] Provider type.
         * @param {string} [location] Location.
         * @param {string} [country] Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineups: function (id, type, location, country, options) {
            return localVarFp.getLineups(id, type, location, country, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv recording stream.
         * @param {string} recordingId Recording id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRecordingFile: function (recordingId, options) {
            return localVarFp.getLiveRecordingFile(recordingId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv channel stream.
         * @param {string} streamId Stream id.
         * @param {string} container Container type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveStreamFile: function (streamId, container, options) {
            return localVarFp.getLiveStreamFile(streamId, container, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available live tv channels.
         * @param {ChannelType} [type] Optional. Filter by channel type.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isFavorite] Optional. Filter by channels that are favorites, or not.
         * @param {boolean} [isLiked] Optional. Filter by channels that are liked, or not.
         * @param {boolean} [isDisliked] Optional. Filter by channels that are disliked, or not.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] \&quot;Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {Array<string>} [sortBy] Optional. Key to sort by.
         * @param {SortOrder} [sortOrder] Optional. Sort order.
         * @param {boolean} [enableFavoriteSorting] Optional. Incorporate favorite and like status into channel sorting.
         * @param {boolean} [addCurrentProgram] Optional. Adds current program info to each channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvChannels: function (type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, options) {
            return localVarFp.getLiveTvChannels(type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available live tv services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvInfo: function (options) {
            return localVarFp.getLiveTvInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {Array<string>} [channelIds] The channels to return guide information for.
         * @param {string} [userId] Optional. Filter by user id.
         * @param {string} [minStartDate] Optional. The minimum premiere start date.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {string} [maxStartDate] Optional. The maximum premiere start date.
         * @param {string} [minEndDate] Optional. The minimum premiere end date.
         * @param {string} [maxEndDate] Optional. The maximum premiere end date.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {Array<string>} [genres] The genres to return guide information for.
         * @param {Array<string>} [genreIds] The genre ids to return guide information for.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [seriesTimerId] Optional. Filter by series timer id.
         * @param {string} [librarySeriesId] Optional. Filter by library series id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveTvPrograms: function (channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, options) {
            return localVarFp.getLiveTvPrograms(channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv program.
         * @param {string} programId Program id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram: function (programId, userId, options) {
            return localVarFp.getProgram(programId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available live tv epgs.
         * @param {GetProgramsDto} [getProgramsDto] Request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms: function (getProgramsDto, options) {
            return localVarFp.getPrograms(getProgramsDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets recommended live tv epgs.
         * @param {string} [userId] Optional. filter by user id.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
         * @param {boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [genreIds] The genres to return guide information for.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {boolean} [enableTotalRecordCount] Retrieve total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendedPrograms: function (userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, options) {
            return localVarFp.getRecommendedPrograms(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv recording.
         * @param {string} recordingId Recording id.
         * @param {string} [userId] Optional. Attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecording: function (recordingId, userId, options) {
            return localVarFp.getRecording(recordingId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets recording folders.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingFolders: function (userId, options) {
            return localVarFp.getRecordingFolders(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get recording group.
         * @param {string} groupId Group id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroup: function (groupId, options) {
            return localVarFp.getRecordingGroup(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets live tv recording groups.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingGroups: function (userId, options) {
            return localVarFp.getRecordingGroups(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets live tv recordings.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [isMovie] Optional. Filter for movies.
         * @param {boolean} [isSeries] Optional. Filter for series.
         * @param {boolean} [isKids] Optional. Filter for kids.
         * @param {boolean} [isSports] Optional. Filter for sports.
         * @param {boolean} [isNews] Optional. Filter for news.
         * @param {boolean} [isLibraryItem] Optional. Filter for is library item.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordings: function (channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, options) {
            return localVarFp.getRecordings(channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets live tv recording series.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [userId] Optional. Filter by user and attach user data.
         * @param {string} [groupId] Optional. Filter by recording group.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {RecordingStatus} [status] Optional. Filter by recording status.
         * @param {boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
         * @param {string} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Optional. Return total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRecordingsSeries: function (channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, options) {
            return localVarFp.getRecordingsSeries(channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedulesDirectCountries: function (options) {
            return localVarFp.getSchedulesDirectCountries(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimer: function (timerId, options) {
            return localVarFp.getSeriesTimer(timerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets live tv series timers.
         * @param {string} [sortBy] Optional. Sort by SortName or Priority.
         * @param {SortOrder} [sortOrder] Optional. Sort in Ascending or Descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesTimers: function (sortBy, sortOrder, options) {
            return localVarFp.getSeriesTimers(sortBy, sortOrder, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a timer.
         * @param {string} timerId Timer id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimer: function (timerId, options) {
            return localVarFp.getTimer(timerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the live tv timers.
         * @param {string} [channelId] Optional. Filter by channel id.
         * @param {string} [seriesTimerId] Optional. Filter by timers belonging to a series timer.
         * @param {boolean} [isActive] Optional. Filter by timers that are active.
         * @param {boolean} [isScheduled] Optional. Filter by timers that are scheduled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimers: function (channelId, seriesTimerId, isActive, isScheduled, options) {
            return localVarFp.getTimers(channelId, seriesTimerId, isActive, isScheduled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get tuner host types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTunerHostTypes: function (options) {
            return localVarFp.getTunerHostTypes(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Resets a tv tuner.
         * @param {string} tunerId Tuner id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTuner: function (tunerId, options) {
            return localVarFp.resetTuner(tunerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set channel mappings.
         * @param {SetChannelMappingDto} setChannelMappingDto The set channel mapping dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChannelMapping: function (setChannelMappingDto, options) {
            return localVarFp.setChannelMapping(setChannelMappingDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a live tv series timer.
         * @param {string} timerId Timer id.
         * @param {SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeriesTimer: function (timerId, seriesTimerInfoDto, options) {
            return localVarFp.updateSeriesTimer(timerId, seriesTimerInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a live tv timer.
         * @param {string} timerId Timer id.
         * @param {TimerInfoDto} [timerInfoDto] New timer info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimer: function (timerId, timerInfoDto, options) {
            return localVarFp.updateTimer(timerId, timerInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LiveTvApiFactory = LiveTvApiFactory;
/**
 * LiveTvApi - object-oriented interface
 * @export
 * @class LiveTvApi
 * @extends {BaseAPI}
 */
var LiveTvApi = /** @class */ (function (_super) {
    __extends(LiveTvApi, _super);
    function LiveTvApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Adds a listings provider.
     * @param {LiveTvApiAddListingProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.addListingProvider = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).addListingProvider(requestParameters.pw, requestParameters.validateListings, requestParameters.validateLogin, requestParameters.listingsProviderInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Adds a tuner host.
     * @param {LiveTvApiAddTunerHostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.addTunerHost = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).addTunerHost(requestParameters.tunerHostInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Cancels a live tv series timer.
     * @param {LiveTvApiCancelSeriesTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.cancelSeriesTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).cancelSeriesTimer(requestParameters.timerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Cancels a live tv timer.
     * @param {LiveTvApiCancelTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.cancelTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).cancelTimer(requestParameters.timerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a live tv series timer.
     * @param {LiveTvApiCreateSeriesTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.createSeriesTimer = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).createSeriesTimer(requestParameters.seriesTimerInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a live tv timer.
     * @param {LiveTvApiCreateTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.createTimer = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).createTimer(requestParameters.timerInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete listing provider.
     * @param {LiveTvApiDeleteListingProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.deleteListingProvider = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).deleteListingProvider(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes a live tv recording.
     * @param {LiveTvApiDeleteRecordingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.deleteRecording = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).deleteRecording(requestParameters.recordingId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes a tuner host.
     * @param {LiveTvApiDeleteTunerHostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.deleteTunerHost = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).deleteTunerHost(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Discover tuners.
     * @param {LiveTvApiDiscoverTunersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.discoverTuners = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).discoverTuners(requestParameters.newDevicesOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Discover tuners.
     * @param {LiveTvApiDiscvoverTunersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.discvoverTuners = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).discvoverTuners(requestParameters.newDevicesOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv channel.
     * @param {LiveTvApiGetChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getChannel = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getChannel(requestParameters.channelId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get channel mapping options.
     * @param {LiveTvApiGetChannelMappingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getChannelMappingOptions = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getChannelMappingOptions(requestParameters.providerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets default listings provider info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getDefaultListingProvider = function (options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getDefaultListingProvider(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the default values for a new timer.
     * @param {LiveTvApiGetDefaultTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getDefaultTimer = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getDefaultTimer(requestParameters.programId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get guid info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getGuideInfo = function (options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getGuideInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available lineups.
     * @param {LiveTvApiGetLineupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLineups = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getLineups(requestParameters.id, requestParameters.type, requestParameters.location, requestParameters.country, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv recording stream.
     * @param {LiveTvApiGetLiveRecordingFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLiveRecordingFile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getLiveRecordingFile(requestParameters.recordingId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv channel stream.
     * @param {LiveTvApiGetLiveStreamFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLiveStreamFile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getLiveStreamFile(requestParameters.streamId, requestParameters.container, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available live tv channels.
     * @param {LiveTvApiGetLiveTvChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLiveTvChannels = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getLiveTvChannels(requestParameters.type, requestParameters.userId, requestParameters.startIndex, requestParameters.isMovie, requestParameters.isSeries, requestParameters.isNews, requestParameters.isKids, requestParameters.isSports, requestParameters.limit, requestParameters.isFavorite, requestParameters.isLiked, requestParameters.isDisliked, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.fields, requestParameters.enableUserData, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.enableFavoriteSorting, requestParameters.addCurrentProgram, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available live tv services.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLiveTvInfo = function (options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getLiveTvInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available live tv epgs.
     * @param {LiveTvApiGetLiveTvProgramsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getLiveTvPrograms = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getLiveTvPrograms(requestParameters.channelIds, requestParameters.userId, requestParameters.minStartDate, requestParameters.hasAired, requestParameters.isAiring, requestParameters.maxStartDate, requestParameters.minEndDate, requestParameters.maxEndDate, requestParameters.isMovie, requestParameters.isSeries, requestParameters.isNews, requestParameters.isKids, requestParameters.isSports, requestParameters.startIndex, requestParameters.limit, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.genres, requestParameters.genreIds, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, requestParameters.seriesTimerId, requestParameters.librarySeriesId, requestParameters.fields, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv program.
     * @param {LiveTvApiGetProgramRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getProgram = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getProgram(requestParameters.programId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available live tv epgs.
     * @param {LiveTvApiGetProgramsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getPrograms = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getPrograms(requestParameters.getProgramsDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets recommended live tv epgs.
     * @param {LiveTvApiGetRecommendedProgramsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecommendedPrograms = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getRecommendedPrograms(requestParameters.userId, requestParameters.limit, requestParameters.isAiring, requestParameters.hasAired, requestParameters.isSeries, requestParameters.isMovie, requestParameters.isNews, requestParameters.isKids, requestParameters.isSports, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.genreIds, requestParameters.fields, requestParameters.enableUserData, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv recording.
     * @param {LiveTvApiGetRecordingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecording = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getRecording(requestParameters.recordingId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets recording folders.
     * @param {LiveTvApiGetRecordingFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecordingFolders = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getRecordingFolders(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get recording group.
     * @param {LiveTvApiGetRecordingGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecordingGroup = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getRecordingGroup(requestParameters.groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets live tv recording groups.
     * @param {LiveTvApiGetRecordingGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecordingGroups = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getRecordingGroups(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets live tv recordings.
     * @param {LiveTvApiGetRecordingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecordings = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getRecordings(requestParameters.channelId, requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.status, requestParameters.isInProgress, requestParameters.seriesTimerId, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.fields, requestParameters.enableUserData, requestParameters.isMovie, requestParameters.isSeries, requestParameters.isKids, requestParameters.isSports, requestParameters.isNews, requestParameters.isLibraryItem, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets live tv recording series.
     * @param {LiveTvApiGetRecordingsSeriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getRecordingsSeries = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getRecordingsSeries(requestParameters.channelId, requestParameters.userId, requestParameters.groupId, requestParameters.startIndex, requestParameters.limit, requestParameters.status, requestParameters.isInProgress, requestParameters.seriesTimerId, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.fields, requestParameters.enableUserData, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available countries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getSchedulesDirectCountries = function (options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getSchedulesDirectCountries(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a live tv series timer.
     * @param {LiveTvApiGetSeriesTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getSeriesTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getSeriesTimer(requestParameters.timerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets live tv series timers.
     * @param {LiveTvApiGetSeriesTimersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getSeriesTimers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getSeriesTimers(requestParameters.sortBy, requestParameters.sortOrder, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a timer.
     * @param {LiveTvApiGetTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getTimer(requestParameters.timerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the live tv timers.
     * @param {LiveTvApiGetTimersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getTimers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.LiveTvApiFp)(this.configuration).getTimers(requestParameters.channelId, requestParameters.seriesTimerId, requestParameters.isActive, requestParameters.isScheduled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get tuner host types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.getTunerHostTypes = function (options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).getTunerHostTypes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Resets a tv tuner.
     * @param {LiveTvApiResetTunerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.resetTuner = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).resetTuner(requestParameters.tunerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set channel mappings.
     * @param {LiveTvApiSetChannelMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.setChannelMapping = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).setChannelMapping(requestParameters.setChannelMappingDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a live tv series timer.
     * @param {LiveTvApiUpdateSeriesTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.updateSeriesTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).updateSeriesTimer(requestParameters.timerId, requestParameters.seriesTimerInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a live tv timer.
     * @param {LiveTvApiUpdateTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveTvApi
     */
    LiveTvApi.prototype.updateTimer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.LiveTvApiFp)(this.configuration).updateTimer(requestParameters.timerId, requestParameters.timerInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LiveTvApi;
}(base_1.BaseAPI));
exports.LiveTvApi = LiveTvApi;

},{"../base":68,"../common":69,"axios":362}],36:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizationApi = exports.LocalizationApiFactory = exports.LocalizationApiFp = exports.LocalizationApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * LocalizationApi - axios parameter creator
 * @export
 */
var LocalizationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets known countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Localization/Countries";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets known cultures.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCultures: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Localization/Cultures";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets localization options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationOptions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Localization/Options";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets known parental ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentalRatings: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Localization/ParentalRatings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LocalizationApiAxiosParamCreator = LocalizationApiAxiosParamCreator;
/**
 * LocalizationApi - functional programming interface
 * @export
 */
var LocalizationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LocalizationApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets known countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCountries(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets known cultures.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCultures: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCultures(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets localization options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationOptions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLocalizationOptions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets known parental ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentalRatings: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getParentalRatings(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.LocalizationApiFp = LocalizationApiFp;
/**
 * LocalizationApi - factory interface
 * @export
 */
var LocalizationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LocalizationApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets known countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (options) {
            return localVarFp.getCountries(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets known cultures.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCultures: function (options) {
            return localVarFp.getCultures(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets localization options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationOptions: function (options) {
            return localVarFp.getLocalizationOptions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets known parental ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentalRatings: function (options) {
            return localVarFp.getParentalRatings(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LocalizationApiFactory = LocalizationApiFactory;
/**
 * LocalizationApi - object-oriented interface
 * @export
 * @class LocalizationApi
 * @extends {BaseAPI}
 */
var LocalizationApi = /** @class */ (function (_super) {
    __extends(LocalizationApi, _super);
    function LocalizationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets known countries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    LocalizationApi.prototype.getCountries = function (options) {
        var _this = this;
        return (0, exports.LocalizationApiFp)(this.configuration).getCountries(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets known cultures.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    LocalizationApi.prototype.getCultures = function (options) {
        var _this = this;
        return (0, exports.LocalizationApiFp)(this.configuration).getCultures(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets localization options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    LocalizationApi.prototype.getLocalizationOptions = function (options) {
        var _this = this;
        return (0, exports.LocalizationApiFp)(this.configuration).getLocalizationOptions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets known parental ratings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    LocalizationApi.prototype.getParentalRatings = function (options) {
        var _this = this;
        return (0, exports.LocalizationApiFp)(this.configuration).getParentalRatings(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LocalizationApi;
}(base_1.BaseAPI));
exports.LocalizationApi = LocalizationApi;

},{"../base":68,"../common":69,"axios":362}],37:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaInfoApi = exports.MediaInfoApiFactory = exports.MediaInfoApiFp = exports.MediaInfoApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * MediaInfoApi - axios parameter creator
 * @export
 */
var MediaInfoApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Closes a media source.
         * @param {string} liveStreamId The livestream id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLiveStream: function (liveStreamId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'liveStreamId' is not null or undefined
                            (0, common_1.assertParamExists)('closeLiveStream', 'liveStreamId', liveStreamId);
                            localVarPath = "/LiveStreams/Close";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Tests the network with a request with the size of the bitrate.
         * @param {number} [size] The bitrate. Defaults to 102400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBitrateTestBytes: function (size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Playback/BitrateTest";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (size !== undefined) {
                                localVarQueryParameter['size'] = size;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackInfo: function (itemId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getPlaybackInfo', 'itemId', itemId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getPlaybackInfo', 'userId', userId);
                            localVarPath = "/Items/{itemId}/PlaybackInfo"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] The user id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [mediaSourceId] The media source id.
         * @param {string} [liveStreamId] The livestream id.
         * @param {boolean} [autoOpenLiveStream] Whether to auto open the livestream.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {boolean} [enableTranscoding] Whether to enable transcoding. Default: true.
         * @param {boolean} [allowVideoStreamCopy] Whether to allow to copy the video stream. Default: true.
         * @param {boolean} [allowAudioStreamCopy] Whether to allow to copy the audio stream. Default: true.
         * @param {PlaybackInfoDto} [playbackInfoDto] The playback info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostedPlaybackInfo: function (itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getPostedPlaybackInfo', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/PlaybackInfo"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (autoOpenLiveStream !== undefined) {
                                localVarQueryParameter['autoOpenLiveStream'] = autoOpenLiveStream;
                            }
                            if (enableDirectPlay !== undefined) {
                                localVarQueryParameter['enableDirectPlay'] = enableDirectPlay;
                            }
                            if (enableDirectStream !== undefined) {
                                localVarQueryParameter['enableDirectStream'] = enableDirectStream;
                            }
                            if (enableTranscoding !== undefined) {
                                localVarQueryParameter['enableTranscoding'] = enableTranscoding;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(playbackInfoDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Opens a media source.
         * @param {string} [openToken] The open token.
         * @param {string} [userId] The user id.
         * @param {string} [playSessionId] The play session id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [itemId] The item id.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {OpenLiveStreamDto} [openLiveStreamDto] The open live stream dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLiveStream: function (openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/LiveStreams/Open";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (openToken !== undefined) {
                                localVarQueryParameter['openToken'] = openToken;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (itemId !== undefined) {
                                localVarQueryParameter['itemId'] = itemId;
                            }
                            if (enableDirectPlay !== undefined) {
                                localVarQueryParameter['enableDirectPlay'] = enableDirectPlay;
                            }
                            if (enableDirectStream !== undefined) {
                                localVarQueryParameter['enableDirectStream'] = enableDirectStream;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(openLiveStreamDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MediaInfoApiAxiosParamCreator = MediaInfoApiAxiosParamCreator;
/**
 * MediaInfoApi - functional programming interface
 * @export
 */
var MediaInfoApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MediaInfoApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Closes a media source.
         * @param {string} liveStreamId The livestream id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLiveStream: function (liveStreamId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.closeLiveStream(liveStreamId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Tests the network with a request with the size of the bitrate.
         * @param {number} [size] The bitrate. Defaults to 102400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBitrateTestBytes: function (size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBitrateTestBytes(size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackInfo: function (itemId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlaybackInfo(itemId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] The user id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [mediaSourceId] The media source id.
         * @param {string} [liveStreamId] The livestream id.
         * @param {boolean} [autoOpenLiveStream] Whether to auto open the livestream.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {boolean} [enableTranscoding] Whether to enable transcoding. Default: true.
         * @param {boolean} [allowVideoStreamCopy] Whether to allow to copy the video stream. Default: true.
         * @param {boolean} [allowAudioStreamCopy] Whether to allow to copy the audio stream. Default: true.
         * @param {PlaybackInfoDto} [playbackInfoDto] The playback info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostedPlaybackInfo: function (itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPostedPlaybackInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Opens a media source.
         * @param {string} [openToken] The open token.
         * @param {string} [userId] The user id.
         * @param {string} [playSessionId] The play session id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [itemId] The item id.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {OpenLiveStreamDto} [openLiveStreamDto] The open live stream dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLiveStream: function (openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.openLiveStream(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MediaInfoApiFp = MediaInfoApiFp;
/**
 * MediaInfoApi - factory interface
 * @export
 */
var MediaInfoApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MediaInfoApiFp)(configuration);
    return {
        /**
         *
         * @summary Closes a media source.
         * @param {string} liveStreamId The livestream id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLiveStream: function (liveStreamId, options) {
            return localVarFp.closeLiveStream(liveStreamId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Tests the network with a request with the size of the bitrate.
         * @param {number} [size] The bitrate. Defaults to 102400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBitrateTestBytes: function (size, options) {
            return localVarFp.getBitrateTestBytes(size, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackInfo: function (itemId, userId, options) {
            return localVarFp.getPlaybackInfo(itemId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Gets live playback media info for an item.
         * @param {string} itemId The item id.
         * @param {string} [userId] The user id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [mediaSourceId] The media source id.
         * @param {string} [liveStreamId] The livestream id.
         * @param {boolean} [autoOpenLiveStream] Whether to auto open the livestream.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {boolean} [enableTranscoding] Whether to enable transcoding. Default: true.
         * @param {boolean} [allowVideoStreamCopy] Whether to allow to copy the video stream. Default: true.
         * @param {boolean} [allowAudioStreamCopy] Whether to allow to copy the audio stream. Default: true.
         * @param {PlaybackInfoDto} [playbackInfoDto] The playback info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostedPlaybackInfo: function (itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto, options) {
            return localVarFp.getPostedPlaybackInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Opens a media source.
         * @param {string} [openToken] The open token.
         * @param {string} [userId] The user id.
         * @param {string} [playSessionId] The play session id.
         * @param {number} [maxStreamingBitrate] The maximum streaming bitrate.
         * @param {number} [startTimeTicks] The start time in ticks.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [maxAudioChannels] The maximum number of audio channels.
         * @param {string} [itemId] The item id.
         * @param {boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
         * @param {boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
         * @param {OpenLiveStreamDto} [openLiveStreamDto] The open live stream dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLiveStream: function (openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto, options) {
            return localVarFp.openLiveStream(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MediaInfoApiFactory = MediaInfoApiFactory;
/**
 * MediaInfoApi - object-oriented interface
 * @export
 * @class MediaInfoApi
 * @extends {BaseAPI}
 */
var MediaInfoApi = /** @class */ (function (_super) {
    __extends(MediaInfoApi, _super);
    function MediaInfoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Closes a media source.
     * @param {MediaInfoApiCloseLiveStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoApi
     */
    MediaInfoApi.prototype.closeLiveStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.MediaInfoApiFp)(this.configuration).closeLiveStream(requestParameters.liveStreamId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Tests the network with a request with the size of the bitrate.
     * @param {MediaInfoApiGetBitrateTestBytesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoApi
     */
    MediaInfoApi.prototype.getBitrateTestBytes = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.MediaInfoApiFp)(this.configuration).getBitrateTestBytes(requestParameters.size, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets live playback media info for an item.
     * @param {MediaInfoApiGetPlaybackInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoApi
     */
    MediaInfoApi.prototype.getPlaybackInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.MediaInfoApiFp)(this.configuration).getPlaybackInfo(requestParameters.itemId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
     * @summary Gets live playback media info for an item.
     * @param {MediaInfoApiGetPostedPlaybackInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoApi
     */
    MediaInfoApi.prototype.getPostedPlaybackInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.MediaInfoApiFp)(this.configuration).getPostedPlaybackInfo(requestParameters.itemId, requestParameters.userId, requestParameters.maxStreamingBitrate, requestParameters.startTimeTicks, requestParameters.audioStreamIndex, requestParameters.subtitleStreamIndex, requestParameters.maxAudioChannels, requestParameters.mediaSourceId, requestParameters.liveStreamId, requestParameters.autoOpenLiveStream, requestParameters.enableDirectPlay, requestParameters.enableDirectStream, requestParameters.enableTranscoding, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.playbackInfoDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Opens a media source.
     * @param {MediaInfoApiOpenLiveStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoApi
     */
    MediaInfoApi.prototype.openLiveStream = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.MediaInfoApiFp)(this.configuration).openLiveStream(requestParameters.openToken, requestParameters.userId, requestParameters.playSessionId, requestParameters.maxStreamingBitrate, requestParameters.startTimeTicks, requestParameters.audioStreamIndex, requestParameters.subtitleStreamIndex, requestParameters.maxAudioChannels, requestParameters.itemId, requestParameters.enableDirectPlay, requestParameters.enableDirectStream, requestParameters.openLiveStreamDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MediaInfoApi;
}(base_1.BaseAPI));
exports.MediaInfoApi = MediaInfoApi;

},{"../base":68,"../common":69,"axios":362}],38:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoviesApi = exports.MoviesApiFactory = exports.MoviesApiFp = exports.MoviesApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * MoviesApi - axios parameter creator
 * @export
 */
var MoviesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets movie recommendations.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. The fields to return.
         * @param {number} [categoryLimit] The max number of categories to return.
         * @param {number} [itemLimit] The max number of items to return per category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRecommendations: function (userId, parentId, fields, categoryLimit, itemLimit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Movies/Recommendations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (categoryLimit !== undefined) {
                                localVarQueryParameter['categoryLimit'] = categoryLimit;
                            }
                            if (itemLimit !== undefined) {
                                localVarQueryParameter['itemLimit'] = itemLimit;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MoviesApiAxiosParamCreator = MoviesApiAxiosParamCreator;
/**
 * MoviesApi - functional programming interface
 * @export
 */
var MoviesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MoviesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets movie recommendations.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. The fields to return.
         * @param {number} [categoryLimit] The max number of categories to return.
         * @param {number} [itemLimit] The max number of items to return per category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRecommendations: function (userId, parentId, fields, categoryLimit, itemLimit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMovieRecommendations(userId, parentId, fields, categoryLimit, itemLimit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MoviesApiFp = MoviesApiFp;
/**
 * MoviesApi - factory interface
 * @export
 */
var MoviesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MoviesApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets movie recommendations.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. The fields to return.
         * @param {number} [categoryLimit] The max number of categories to return.
         * @param {number} [itemLimit] The max number of items to return per category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieRecommendations: function (userId, parentId, fields, categoryLimit, itemLimit, options) {
            return localVarFp.getMovieRecommendations(userId, parentId, fields, categoryLimit, itemLimit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MoviesApiFactory = MoviesApiFactory;
/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
var MoviesApi = /** @class */ (function (_super) {
    __extends(MoviesApi, _super);
    function MoviesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets movie recommendations.
     * @param {MoviesApiGetMovieRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    MoviesApi.prototype.getMovieRecommendations = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.MoviesApiFp)(this.configuration).getMovieRecommendations(requestParameters.userId, requestParameters.parentId, requestParameters.fields, requestParameters.categoryLimit, requestParameters.itemLimit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MoviesApi;
}(base_1.BaseAPI));
exports.MoviesApi = MoviesApi;

},{"../base":68,"../common":69,"axios":362}],39:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MusicGenresApi = exports.MusicGenresApiFactory = exports.MusicGenresApiFp = exports.MusicGenresApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * MusicGenresApi - axios parameter creator
 * @export
 */
var MusicGenresApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a music genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenre: function (genreName, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'genreName' is not null or undefined
                            (0, common_1.assertParamExists)('getMusicGenre', 'genreName', genreName);
                            localVarPath = "/MusicGenres/{genreName}"
                                .replace("{".concat("genreName", "}"), encodeURIComponent(String(genreName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all music genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getMusicGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/MusicGenres";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MusicGenresApiAxiosParamCreator = MusicGenresApiAxiosParamCreator;
/**
 * MusicGenresApi - functional programming interface
 * @export
 */
var MusicGenresApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MusicGenresApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a music genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenre: function (genreName, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicGenre(genreName, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all music genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getMusicGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMusicGenres(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MusicGenresApiFp = MusicGenresApiFp;
/**
 * MusicGenresApi - factory interface
 * @export
 */
var MusicGenresApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MusicGenresApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a music genre, by name.
         * @param {string} genreName The genre name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicGenre: function (genreName, userId, options) {
            return localVarFp.getMusicGenre(genreName, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all music genres from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Optional. Include total record count.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getMusicGenres: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return localVarFp.getMusicGenres(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MusicGenresApiFactory = MusicGenresApiFactory;
/**
 * MusicGenresApi - object-oriented interface
 * @export
 * @class MusicGenresApi
 * @extends {BaseAPI}
 */
var MusicGenresApi = /** @class */ (function (_super) {
    __extends(MusicGenresApi, _super);
    function MusicGenresApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a music genre, by name.
     * @param {MusicGenresApiGetMusicGenreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicGenresApi
     */
    MusicGenresApi.prototype.getMusicGenre = function (requestParameters, options) {
        var _this = this;
        return (0, exports.MusicGenresApiFp)(this.configuration).getMusicGenre(requestParameters.genreName, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all music genres from a given item, folder, or the entire library.
     * @param {MusicGenresApiGetMusicGenresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MusicGenresApi
     */
    MusicGenresApi.prototype.getMusicGenres = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.MusicGenresApiFp)(this.configuration).getMusicGenres(requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.isFavorite, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.userId, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.enableImages, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MusicGenresApi;
}(base_1.BaseAPI));
exports.MusicGenresApi = MusicGenresApi;

},{"../base":68,"../common":69,"axios":362}],40:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
var NotificationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Sends a notification to all admins.
         * @param {AdminNotificationDto} adminNotificationDto The notification request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminNotification: function (adminNotificationDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'adminNotificationDto' is not null or undefined
                            (0, common_1.assertParamExists)('createAdminNotification', 'adminNotificationDto', adminNotificationDto);
                            localVarPath = "/Notifications/Admin";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(adminNotificationDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets notification services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationServices: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Notifications/Services";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets notification types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTypes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Notifications/Types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a user\'s notifications.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getNotifications', 'userId', userId);
                            localVarPath = "/Notifications/{userId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a user\'s notification summary.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsSummary: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getNotificationsSummary', 'userId', userId);
                            localVarPath = "/Notifications/{userId}/Summary"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets notifications as read.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRead: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('setRead', 'userId', userId);
                            localVarPath = "/Notifications/{userId}/Read"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets notifications as unread.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUnread: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('setUnread', 'userId', userId);
                            localVarPath = "/Notifications/{userId}/Unread"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;
/**
 * NotificationsApi - functional programming interface
 * @export
 */
var NotificationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Sends a notification to all admins.
         * @param {AdminNotificationDto} adminNotificationDto The notification request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminNotification: function (adminNotificationDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAdminNotification(adminNotificationDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets notification services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationServices: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotificationServices(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets notification types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTypes: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotificationTypes(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a user\'s notifications.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotifications(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a user\'s notification summary.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsSummary: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotificationsSummary(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets notifications as read.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setRead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets notifications as unread.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUnread: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setUnread(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.NotificationsApiFp = NotificationsApiFp;
/**
 * NotificationsApi - factory interface
 * @export
 */
var NotificationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NotificationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Sends a notification to all admins.
         * @param {AdminNotificationDto} adminNotificationDto The notification request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminNotification: function (adminNotificationDto, options) {
            return localVarFp.createAdminNotification(adminNotificationDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets notification services.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationServices: function (options) {
            return localVarFp.getNotificationServices(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets notification types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTypes: function (options) {
            return localVarFp.getNotificationTypes(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a user\'s notifications.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: function (userId, options) {
            return localVarFp.getNotifications(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a user\'s notification summary.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsSummary: function (userId, options) {
            return localVarFp.getNotificationsSummary(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets notifications as read.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRead: function (userId, options) {
            return localVarFp.setRead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets notifications as unread.
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUnread: function (userId, options) {
            return localVarFp.setUnread(userId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NotificationsApiFactory = NotificationsApiFactory;
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
var NotificationsApi = /** @class */ (function (_super) {
    __extends(NotificationsApi, _super);
    function NotificationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Sends a notification to all admins.
     * @param {NotificationsApiCreateAdminNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.createAdminNotification = function (requestParameters, options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).createAdminNotification(requestParameters.adminNotificationDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets notification services.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.getNotificationServices = function (options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).getNotificationServices(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets notification types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.getNotificationTypes = function (options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).getNotificationTypes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a user\'s notifications.
     * @param {NotificationsApiGetNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.getNotifications = function (requestParameters, options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).getNotifications(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a user\'s notification summary.
     * @param {NotificationsApiGetNotificationsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.getNotificationsSummary = function (requestParameters, options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).getNotificationsSummary(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets notifications as read.
     * @param {NotificationsApiSetReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.setRead = function (requestParameters, options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).setRead(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets notifications as unread.
     * @param {NotificationsApiSetUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.setUnread = function (requestParameters, options) {
        var _this = this;
        return (0, exports.NotificationsApiFp)(this.configuration).setUnread(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NotificationsApi;
}(base_1.BaseAPI));
exports.NotificationsApi = NotificationsApi;

},{"../base":68,"../common":69,"axios":362}],41:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageApi = exports.PackageApiFactory = exports.PackageApiFp = exports.PackageApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * PackageApi - axios parameter creator
 * @export
 */
var PackageApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Cancels a package installation.
         * @param {string} packageId Installation Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPackageInstallation: function (packageId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'packageId' is not null or undefined
                            (0, common_1.assertParamExists)('cancelPackageInstallation', 'packageId', packageId);
                            localVarPath = "/Packages/Installing/{packageId}"
                                .replace("{".concat("packageId", "}"), encodeURIComponent(String(packageId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a package by name or assembly GUID.
         * @param {string} name The name of the package.
         * @param {string} [assemblyGuid] The GUID of the associated assembly.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageInfo: function (name, assemblyGuid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getPackageInfo', 'name', name);
                            localVarPath = "/Packages/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (assemblyGuid !== undefined) {
                                localVarQueryParameter['assemblyGuid'] = assemblyGuid;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available packages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackages: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Packages";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Repositories";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Installs a package.
         * @param {string} name Package name.
         * @param {string} [assemblyGuid] GUID of the associated assembly.
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [repositoryUrl] Optional. Specify the repository to install from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installPackage: function (name, assemblyGuid, version, repositoryUrl, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('installPackage', 'name', name);
                            localVarPath = "/Packages/Installed/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (assemblyGuid !== undefined) {
                                localVarQueryParameter['assemblyGuid'] = assemblyGuid;
                            }
                            if (version !== undefined) {
                                localVarQueryParameter['version'] = version;
                            }
                            if (repositoryUrl !== undefined) {
                                localVarQueryParameter['repositoryUrl'] = repositoryUrl;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the enabled and existing package repositories.
         * @param {Array<RepositoryInfo>} repositoryInfo The list of package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepositories: function (repositoryInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'repositoryInfo' is not null or undefined
                            (0, common_1.assertParamExists)('setRepositories', 'repositoryInfo', repositoryInfo);
                            localVarPath = "/Repositories";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(repositoryInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PackageApiAxiosParamCreator = PackageApiAxiosParamCreator;
/**
 * PackageApi - functional programming interface
 * @export
 */
var PackageApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PackageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Cancels a package installation.
         * @param {string} packageId Installation Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPackageInstallation: function (packageId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelPackageInstallation(packageId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a package by name or assembly GUID.
         * @param {string} name The name of the package.
         * @param {string} [assemblyGuid] The GUID of the associated assembly.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageInfo: function (name, assemblyGuid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPackageInfo(name, assemblyGuid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available packages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackages: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPackages(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRepositories(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Installs a package.
         * @param {string} name Package name.
         * @param {string} [assemblyGuid] GUID of the associated assembly.
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [repositoryUrl] Optional. Specify the repository to install from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installPackage: function (name, assemblyGuid, version, repositoryUrl, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.installPackage(name, assemblyGuid, version, repositoryUrl, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the enabled and existing package repositories.
         * @param {Array<RepositoryInfo>} repositoryInfo The list of package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepositories: function (repositoryInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setRepositories(repositoryInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PackageApiFp = PackageApiFp;
/**
 * PackageApi - factory interface
 * @export
 */
var PackageApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PackageApiFp)(configuration);
    return {
        /**
         *
         * @summary Cancels a package installation.
         * @param {string} packageId Installation Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPackageInstallation: function (packageId, options) {
            return localVarFp.cancelPackageInstallation(packageId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a package by name or assembly GUID.
         * @param {string} name The name of the package.
         * @param {string} [assemblyGuid] The GUID of the associated assembly.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageInfo: function (name, assemblyGuid, options) {
            return localVarFp.getPackageInfo(name, assemblyGuid, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available packages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackages: function (options) {
            return localVarFp.getPackages(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories: function (options) {
            return localVarFp.getRepositories(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Installs a package.
         * @param {string} name Package name.
         * @param {string} [assemblyGuid] GUID of the associated assembly.
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [repositoryUrl] Optional. Specify the repository to install from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installPackage: function (name, assemblyGuid, version, repositoryUrl, options) {
            return localVarFp.installPackage(name, assemblyGuid, version, repositoryUrl, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets the enabled and existing package repositories.
         * @param {Array<RepositoryInfo>} repositoryInfo The list of package repositories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepositories: function (repositoryInfo, options) {
            return localVarFp.setRepositories(repositoryInfo, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PackageApiFactory = PackageApiFactory;
/**
 * PackageApi - object-oriented interface
 * @export
 * @class PackageApi
 * @extends {BaseAPI}
 */
var PackageApi = /** @class */ (function (_super) {
    __extends(PackageApi, _super);
    function PackageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Cancels a package installation.
     * @param {PackageApiCancelPackageInstallationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.cancelPackageInstallation = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).cancelPackageInstallation(requestParameters.packageId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a package by name or assembly GUID.
     * @param {PackageApiGetPackageInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.getPackageInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).getPackageInfo(requestParameters.name, requestParameters.assemblyGuid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available packages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.getPackages = function (options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).getPackages(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all package repositories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.getRepositories = function (options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).getRepositories(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Installs a package.
     * @param {PackageApiInstallPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.installPackage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).installPackage(requestParameters.name, requestParameters.assemblyGuid, requestParameters.version, requestParameters.repositoryUrl, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets the enabled and existing package repositories.
     * @param {PackageApiSetRepositoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    PackageApi.prototype.setRepositories = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PackageApiFp)(this.configuration).setRepositories(requestParameters.repositoryInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PackageApi;
}(base_1.BaseAPI));
exports.PackageApi = PackageApi;

},{"../base":68,"../common":69,"axios":362}],42:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonsApi = exports.PersonsApiFactory = exports.PersonsApiFp = exports.PersonsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * PersonsApi - axios parameter creator
 * @export
 */
var PersonsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get person by name.
         * @param {string} name Person name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: function (name, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getPerson', 'name', name);
                            localVarPath = "/Persons/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all persons.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not. userId is required.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludePersonTypes] Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [personTypes] Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {string} [appearsInItemId] Optional. If specified, person results will be filtered on items related to said persons.
         * @param {string} [userId] User id.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersons: function (limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Persons";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (excludePersonTypes) {
                                localVarQueryParameter['excludePersonTypes'] = excludePersonTypes;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (appearsInItemId !== undefined) {
                                localVarQueryParameter['appearsInItemId'] = appearsInItemId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PersonsApiAxiosParamCreator = PersonsApiAxiosParamCreator;
/**
 * PersonsApi - functional programming interface
 * @export
 */
var PersonsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PersonsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get person by name.
         * @param {string} name Person name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: function (name, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPerson(name, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all persons.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not. userId is required.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludePersonTypes] Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [personTypes] Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {string} [appearsInItemId] Optional. If specified, person results will be filtered on items related to said persons.
         * @param {string} [userId] User id.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersons: function (limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPersons(limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PersonsApiFp = PersonsApiFp;
/**
 * PersonsApi - factory interface
 * @export
 */
var PersonsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PersonsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get person by name.
         * @param {string} name Person name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: function (name, userId, options) {
            return localVarFp.getPerson(name, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all persons.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] The search term.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not. userId is required.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {Array<string>} [excludePersonTypes] Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [personTypes] Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited.
         * @param {string} [appearsInItemId] Optional. If specified, person results will be filtered on items related to said persons.
         * @param {string} [userId] User id.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersons: function (limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, options) {
            return localVarFp.getPersons(limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PersonsApiFactory = PersonsApiFactory;
/**
 * PersonsApi - object-oriented interface
 * @export
 * @class PersonsApi
 * @extends {BaseAPI}
 */
var PersonsApi = /** @class */ (function (_super) {
    __extends(PersonsApi, _super);
    function PersonsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get person by name.
     * @param {PersonsApiGetPersonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    PersonsApi.prototype.getPerson = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PersonsApiFp)(this.configuration).getPerson(requestParameters.name, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all persons.
     * @param {PersonsApiGetPersonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    PersonsApi.prototype.getPersons = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PersonsApiFp)(this.configuration).getPersons(requestParameters.limit, requestParameters.searchTerm, requestParameters.fields, requestParameters.filters, requestParameters.isFavorite, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.excludePersonTypes, requestParameters.personTypes, requestParameters.appearsInItemId, requestParameters.userId, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PersonsApi;
}(base_1.BaseAPI));
exports.PersonsApi = PersonsApi;

},{"../base":68,"../common":69,"axios":362}],43:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistsApi = exports.PlaylistsApiFactory = exports.PlaylistsApiFp = exports.PlaylistsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
var PlaylistsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Adds items to a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [ids] Item id, comma delimited.
         * @param {string} [userId] The userId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToPlaylist: function (playlistId, ids, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('addToPlaylist', 'playlistId', playlistId);
                            localVarPath = "/Playlists/{playlistId}/Items"
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Creates a new playlist.
         * @param {string} [name] The playlist name.
         * @param {Array<string>} [ids] The item ids.
         * @param {string} [userId] The user id.
         * @param {string} [mediaType] The media type.
         * @param {CreatePlaylistDto} [createPlaylistDto] The create playlist payload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: function (name, ids, userId, mediaType, createPlaylistDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Playlists";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (mediaType !== undefined) {
                                localVarQueryParameter['mediaType'] = mediaType;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPlaylistDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the original items of a playlist.
         * @param {string} playlistId The playlist id.
         * @param {string} userId User id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistItems: function (playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('getPlaylistItems', 'playlistId', playlistId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getPlaylistItems', 'userId', userId);
                            localVarPath = "/Playlists/{playlistId}/Items"
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Moves a playlist item.
         * @param {string} playlistId The playlist id.
         * @param {string} itemId The item id.
         * @param {number} newIndex The new index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItem: function (playlistId, itemId, newIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('moveItem', 'playlistId', playlistId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('moveItem', 'itemId', itemId);
                            // verify required parameter 'newIndex' is not null or undefined
                            (0, common_1.assertParamExists)('moveItem', 'newIndex', newIndex);
                            localVarPath = "/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}"
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("newIndex", "}"), encodeURIComponent(String(newIndex)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes items from a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [entryIds] The item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPlaylist: function (playlistId, entryIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playlistId' is not null or undefined
                            (0, common_1.assertParamExists)('removeFromPlaylist', 'playlistId', playlistId);
                            localVarPath = "/Playlists/{playlistId}/Items"
                                .replace("{".concat("playlistId", "}"), encodeURIComponent(String(playlistId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (entryIds) {
                                localVarQueryParameter['entryIds'] = entryIds;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PlaylistsApiAxiosParamCreator = PlaylistsApiAxiosParamCreator;
/**
 * PlaylistsApi - functional programming interface
 * @export
 */
var PlaylistsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PlaylistsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Adds items to a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [ids] Item id, comma delimited.
         * @param {string} [userId] The userId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToPlaylist: function (playlistId, ids, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addToPlaylist(playlistId, ids, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Creates a new playlist.
         * @param {string} [name] The playlist name.
         * @param {Array<string>} [ids] The item ids.
         * @param {string} [userId] The user id.
         * @param {string} [mediaType] The media type.
         * @param {CreatePlaylistDto} [createPlaylistDto] The create playlist payload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: function (name, ids, userId, mediaType, createPlaylistDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPlaylist(name, ids, userId, mediaType, createPlaylistDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the original items of a playlist.
         * @param {string} playlistId The playlist id.
         * @param {string} userId User id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistItems: function (playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlaylistItems(playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Moves a playlist item.
         * @param {string} playlistId The playlist id.
         * @param {string} itemId The item id.
         * @param {number} newIndex The new index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItem: function (playlistId, itemId, newIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.moveItem(playlistId, itemId, newIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes items from a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [entryIds] The item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPlaylist: function (playlistId, entryIds, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeFromPlaylist(playlistId, entryIds, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PlaylistsApiFp = PlaylistsApiFp;
/**
 * PlaylistsApi - factory interface
 * @export
 */
var PlaylistsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PlaylistsApiFp)(configuration);
    return {
        /**
         *
         * @summary Adds items to a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [ids] Item id, comma delimited.
         * @param {string} [userId] The userId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToPlaylist: function (playlistId, ids, userId, options) {
            return localVarFp.addToPlaylist(playlistId, ids, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
         * @summary Creates a new playlist.
         * @param {string} [name] The playlist name.
         * @param {Array<string>} [ids] The item ids.
         * @param {string} [userId] The user id.
         * @param {string} [mediaType] The media type.
         * @param {CreatePlaylistDto} [createPlaylistDto] The create playlist payload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: function (name, ids, userId, mediaType, createPlaylistDto, options) {
            return localVarFp.createPlaylist(name, ids, userId, mediaType, createPlaylistDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the original items of a playlist.
         * @param {string} playlistId The playlist id.
         * @param {string} userId User id.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistItems: function (playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return localVarFp.getPlaylistItems(playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Moves a playlist item.
         * @param {string} playlistId The playlist id.
         * @param {string} itemId The item id.
         * @param {number} newIndex The new index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItem: function (playlistId, itemId, newIndex, options) {
            return localVarFp.moveItem(playlistId, itemId, newIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes items from a playlist.
         * @param {string} playlistId The playlist id.
         * @param {Array<string>} [entryIds] The item ids, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromPlaylist: function (playlistId, entryIds, options) {
            return localVarFp.removeFromPlaylist(playlistId, entryIds, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PlaylistsApiFactory = PlaylistsApiFactory;
/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
var PlaylistsApi = /** @class */ (function (_super) {
    __extends(PlaylistsApi, _super);
    function PlaylistsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Adds items to a playlist.
     * @param {PlaylistsApiAddToPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    PlaylistsApi.prototype.addToPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaylistsApiFp)(this.configuration).addToPlaylist(requestParameters.playlistId, requestParameters.ids, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
     * @summary Creates a new playlist.
     * @param {PlaylistsApiCreatePlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    PlaylistsApi.prototype.createPlaylist = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PlaylistsApiFp)(this.configuration).createPlaylist(requestParameters.name, requestParameters.ids, requestParameters.userId, requestParameters.mediaType, requestParameters.createPlaylistDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the original items of a playlist.
     * @param {PlaylistsApiGetPlaylistItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    PlaylistsApi.prototype.getPlaylistItems = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaylistsApiFp)(this.configuration).getPlaylistItems(requestParameters.playlistId, requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.fields, requestParameters.enableImages, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Moves a playlist item.
     * @param {PlaylistsApiMoveItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    PlaylistsApi.prototype.moveItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaylistsApiFp)(this.configuration).moveItem(requestParameters.playlistId, requestParameters.itemId, requestParameters.newIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes items from a playlist.
     * @param {PlaylistsApiRemoveFromPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    PlaylistsApi.prototype.removeFromPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaylistsApiFp)(this.configuration).removeFromPlaylist(requestParameters.playlistId, requestParameters.entryIds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PlaylistsApi;
}(base_1.BaseAPI));
exports.PlaylistsApi = PlaylistsApi;

},{"../base":68,"../common":69,"axios":362}],44:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaystateApi = exports.PlaystateApiFactory = exports.PlaystateApiFp = exports.PlaystateApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * PlaystateApi - axios parameter creator
 * @export
 */
var PlaystateApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Marks an item as played for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [datePlayed] Optional. The date the item was played.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPlayedItem: function (userId, itemId, datePlayed, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('markPlayedItem', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('markPlayedItem', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/PlayedItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (datePlayed !== undefined) {
                                localVarQueryParameter['datePlayed'] = (datePlayed instanceof Date) ?
                                    datePlayed.toISOString() :
                                    datePlayed;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Marks an item as unplayed for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUnplayedItem: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('markUnplayedItem', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('markUnplayedItem', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/PlayedItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports a user\'s playback progress.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [positionTicks] Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [volumeLevel] Scale of 0-100.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {RepeatMode} [repeatMode] The repeat mode.
         * @param {boolean} [isPaused] Indicates if the player is paused.
         * @param {boolean} [isMuted] Indicates if the player is muted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackProgress: function (userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackProgress', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackProgress', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/PlayingItems/{itemId}/Progress"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (positionTicks !== undefined) {
                                localVarQueryParameter['positionTicks'] = positionTicks;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (volumeLevel !== undefined) {
                                localVarQueryParameter['volumeLevel'] = volumeLevel;
                            }
                            if (playMethod !== undefined) {
                                localVarQueryParameter['playMethod'] = playMethod;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (repeatMode !== undefined) {
                                localVarQueryParameter['repeatMode'] = repeatMode;
                            }
                            if (isPaused !== undefined) {
                                localVarQueryParameter['isPaused'] = isPaused;
                            }
                            if (isMuted !== undefined) {
                                localVarQueryParameter['isMuted'] = isMuted;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a user has begun playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {boolean} [canSeek] Indicates if the client can seek.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStart: function (userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackStart', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackStart', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/PlayingItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (playMethod !== undefined) {
                                localVarQueryParameter['playMethod'] = playMethod;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (canSeek !== undefined) {
                                localVarQueryParameter['canSeek'] = canSeek;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a user has stopped playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {string} [nextMediaType] The next media type that will play.
         * @param {number} [positionTicks] Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStopped: function (userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackStopped', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('onPlaybackStopped', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/PlayingItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (nextMediaType !== undefined) {
                                localVarQueryParameter['nextMediaType'] = nextMediaType;
                            }
                            if (positionTicks !== undefined) {
                                localVarQueryParameter['positionTicks'] = positionTicks;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings a playback session.
         * @param {string} playSessionId Playback session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPlaybackSession: function (playSessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playSessionId' is not null or undefined
                            (0, common_1.assertParamExists)('pingPlaybackSession', 'playSessionId', playSessionId);
                            localVarPath = "/Sessions/Playing/Ping";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback progress within a session.
         * @param {PlaybackProgressInfo} [playbackProgressInfo] The playback progress info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackProgress: function (playbackProgressInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions/Playing/Progress";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(playbackProgressInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback has started within a session.
         * @param {PlaybackStartInfo} [playbackStartInfo] The playback start info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStart: function (playbackStartInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions/Playing";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(playbackStartInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback has stopped within a session.
         * @param {PlaybackStopInfo} [playbackStopInfo] The playback stop info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStopped: function (playbackStopInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions/Playing/Stopped";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(playbackStopInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PlaystateApiAxiosParamCreator = PlaystateApiAxiosParamCreator;
/**
 * PlaystateApi - functional programming interface
 * @export
 */
var PlaystateApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PlaystateApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Marks an item as played for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [datePlayed] Optional. The date the item was played.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPlayedItem: function (userId, itemId, datePlayed, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.markPlayedItem(userId, itemId, datePlayed, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Marks an item as unplayed for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUnplayedItem: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.markUnplayedItem(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports a user\'s playback progress.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [positionTicks] Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [volumeLevel] Scale of 0-100.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {RepeatMode} [repeatMode] The repeat mode.
         * @param {boolean} [isPaused] Indicates if the player is paused.
         * @param {boolean} [isMuted] Indicates if the player is muted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackProgress: function (userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.onPlaybackProgress(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a user has begun playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {boolean} [canSeek] Indicates if the client can seek.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStart: function (userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.onPlaybackStart(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a user has stopped playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {string} [nextMediaType] The next media type that will play.
         * @param {number} [positionTicks] Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStopped: function (userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.onPlaybackStopped(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings a playback session.
         * @param {string} playSessionId Playback session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPlaybackSession: function (playSessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pingPlaybackSession(playSessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback progress within a session.
         * @param {PlaybackProgressInfo} [playbackProgressInfo] The playback progress info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackProgress: function (playbackProgressInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportPlaybackProgress(playbackProgressInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback has started within a session.
         * @param {PlaybackStartInfo} [playbackStartInfo] The playback start info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStart: function (playbackStartInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportPlaybackStart(playbackStartInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports playback has stopped within a session.
         * @param {PlaybackStopInfo} [playbackStopInfo] The playback stop info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStopped: function (playbackStopInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportPlaybackStopped(playbackStopInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PlaystateApiFp = PlaystateApiFp;
/**
 * PlaystateApi - factory interface
 * @export
 */
var PlaystateApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PlaystateApiFp)(configuration);
    return {
        /**
         *
         * @summary Marks an item as played for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [datePlayed] Optional. The date the item was played.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPlayedItem: function (userId, itemId, datePlayed, options) {
            return localVarFp.markPlayedItem(userId, itemId, datePlayed, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Marks an item as unplayed for user.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUnplayedItem: function (userId, itemId, options) {
            return localVarFp.markUnplayedItem(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports a user\'s playback progress.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [positionTicks] Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {number} [volumeLevel] Scale of 0-100.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {RepeatMode} [repeatMode] The repeat mode.
         * @param {boolean} [isPaused] Indicates if the player is paused.
         * @param {boolean} [isMuted] Indicates if the player is muted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackProgress: function (userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, options) {
            return localVarFp.onPlaybackProgress(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that a user has begun playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {number} [audioStreamIndex] The audio stream index.
         * @param {number} [subtitleStreamIndex] The subtitle stream index.
         * @param {PlayMethod} [playMethod] The play method.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {boolean} [canSeek] Indicates if the client can seek.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStart: function (userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, options) {
            return localVarFp.onPlaybackStart(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that a user has stopped playing an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {string} [mediaSourceId] The id of the MediaSource.
         * @param {string} [nextMediaType] The next media type that will play.
         * @param {number} [positionTicks] Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.
         * @param {string} [liveStreamId] The live stream id.
         * @param {string} [playSessionId] The play session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onPlaybackStopped: function (userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, options) {
            return localVarFp.onPlaybackStopped(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pings a playback session.
         * @param {string} playSessionId Playback session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPlaybackSession: function (playSessionId, options) {
            return localVarFp.pingPlaybackSession(playSessionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports playback progress within a session.
         * @param {PlaybackProgressInfo} [playbackProgressInfo] The playback progress info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackProgress: function (playbackProgressInfo, options) {
            return localVarFp.reportPlaybackProgress(playbackProgressInfo, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports playback has started within a session.
         * @param {PlaybackStartInfo} [playbackStartInfo] The playback start info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStart: function (playbackStartInfo, options) {
            return localVarFp.reportPlaybackStart(playbackStartInfo, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports playback has stopped within a session.
         * @param {PlaybackStopInfo} [playbackStopInfo] The playback stop info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPlaybackStopped: function (playbackStopInfo, options) {
            return localVarFp.reportPlaybackStopped(playbackStopInfo, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PlaystateApiFactory = PlaystateApiFactory;
/**
 * PlaystateApi - object-oriented interface
 * @export
 * @class PlaystateApi
 * @extends {BaseAPI}
 */
var PlaystateApi = /** @class */ (function (_super) {
    __extends(PlaystateApi, _super);
    function PlaystateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Marks an item as played for user.
     * @param {PlaystateApiMarkPlayedItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.markPlayedItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).markPlayedItem(requestParameters.userId, requestParameters.itemId, requestParameters.datePlayed, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Marks an item as unplayed for user.
     * @param {PlaystateApiMarkUnplayedItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.markUnplayedItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).markUnplayedItem(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports a user\'s playback progress.
     * @param {PlaystateApiOnPlaybackProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.onPlaybackProgress = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).onPlaybackProgress(requestParameters.userId, requestParameters.itemId, requestParameters.mediaSourceId, requestParameters.positionTicks, requestParameters.audioStreamIndex, requestParameters.subtitleStreamIndex, requestParameters.volumeLevel, requestParameters.playMethod, requestParameters.liveStreamId, requestParameters.playSessionId, requestParameters.repeatMode, requestParameters.isPaused, requestParameters.isMuted, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that a user has begun playing an item.
     * @param {PlaystateApiOnPlaybackStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.onPlaybackStart = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).onPlaybackStart(requestParameters.userId, requestParameters.itemId, requestParameters.mediaSourceId, requestParameters.audioStreamIndex, requestParameters.subtitleStreamIndex, requestParameters.playMethod, requestParameters.liveStreamId, requestParameters.playSessionId, requestParameters.canSeek, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that a user has stopped playing an item.
     * @param {PlaystateApiOnPlaybackStoppedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.onPlaybackStopped = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).onPlaybackStopped(requestParameters.userId, requestParameters.itemId, requestParameters.mediaSourceId, requestParameters.nextMediaType, requestParameters.positionTicks, requestParameters.liveStreamId, requestParameters.playSessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pings a playback session.
     * @param {PlaystateApiPingPlaybackSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.pingPlaybackSession = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlaystateApiFp)(this.configuration).pingPlaybackSession(requestParameters.playSessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports playback progress within a session.
     * @param {PlaystateApiReportPlaybackProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.reportPlaybackProgress = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PlaystateApiFp)(this.configuration).reportPlaybackProgress(requestParameters.playbackProgressInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports playback has started within a session.
     * @param {PlaystateApiReportPlaybackStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.reportPlaybackStart = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PlaystateApiFp)(this.configuration).reportPlaybackStart(requestParameters.playbackStartInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports playback has stopped within a session.
     * @param {PlaystateApiReportPlaybackStoppedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaystateApi
     */
    PlaystateApi.prototype.reportPlaybackStopped = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PlaystateApiFp)(this.configuration).reportPlaybackStopped(requestParameters.playbackStopInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PlaystateApi;
}(base_1.BaseAPI));
exports.PlaystateApi = PlaystateApi;

},{"../base":68,"../common":69,"axios":362}],45:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginsApi = exports.PluginsApiFactory = exports.PluginsApiFp = exports.PluginsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * PluginsApi - axios parameter creator
 * @export
 */
var PluginsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Disable a plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePlugin: function (pluginId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('disablePlugin', 'pluginId', pluginId);
                            // verify required parameter 'version' is not null or undefined
                            (0, common_1.assertParamExists)('disablePlugin', 'version', version);
                            localVarPath = "/Plugins/{pluginId}/{version}/Disable"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)))
                                .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Enables a disabled plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePlugin: function (pluginId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('enablePlugin', 'pluginId', pluginId);
                            // verify required parameter 'version' is not null or undefined
                            (0, common_1.assertParamExists)('enablePlugin', 'version', version);
                            localVarPath = "/Plugins/{pluginId}/{version}/Enable"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)))
                                .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginConfiguration: function (pluginId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('getPluginConfiguration', 'pluginId', pluginId);
                            localVarPath = "/Plugins/{pluginId}/Configuration"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a plugin\'s image.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginImage: function (pluginId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('getPluginImage', 'pluginId', pluginId);
                            // verify required parameter 'version' is not null or undefined
                            (0, common_1.assertParamExists)('getPluginImage', 'version', version);
                            localVarPath = "/Plugins/{pluginId}/{version}/Image"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)))
                                .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a plugin\'s manifest.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginManifest: function (pluginId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('getPluginManifest', 'pluginId', pluginId);
                            localVarPath = "/Plugins/{pluginId}/Manifest"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of currently installed plugins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlugins: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Plugins";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Uninstalls a plugin.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uninstallPlugin: function (pluginId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('uninstallPlugin', 'pluginId', pluginId);
                            localVarPath = "/Plugins/{pluginId}"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Uninstalls a plugin by version.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstallPluginByVersion: function (pluginId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('uninstallPluginByVersion', 'pluginId', pluginId);
                            // verify required parameter 'version' is not null or undefined
                            (0, common_1.assertParamExists)('uninstallPluginByVersion', 'version', version);
                            localVarPath = "/Plugins/{pluginId}/{version}"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)))
                                .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Accepts plugin configuration as JSON body.
         * @summary Updates plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePluginConfiguration: function (pluginId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginId' is not null or undefined
                            (0, common_1.assertParamExists)('updatePluginConfiguration', 'pluginId', pluginId);
                            localVarPath = "/Plugins/{pluginId}/Configuration"
                                .replace("{".concat("pluginId", "}"), encodeURIComponent(String(pluginId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates plugin security info.
         * @param {PluginSecurityInfo} pluginSecurityInfo Plugin security info.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updatePluginSecurityInfo: function (pluginSecurityInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pluginSecurityInfo' is not null or undefined
                            (0, common_1.assertParamExists)('updatePluginSecurityInfo', 'pluginSecurityInfo', pluginSecurityInfo);
                            localVarPath = "/Plugins/SecurityInfo";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pluginSecurityInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PluginsApiAxiosParamCreator = PluginsApiAxiosParamCreator;
/**
 * PluginsApi - functional programming interface
 * @export
 */
var PluginsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PluginsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Disable a plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePlugin: function (pluginId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disablePlugin(pluginId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Enables a disabled plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePlugin: function (pluginId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enablePlugin(pluginId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginConfiguration: function (pluginId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPluginConfiguration(pluginId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a plugin\'s image.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginImage: function (pluginId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPluginImage(pluginId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a plugin\'s manifest.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginManifest: function (pluginId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPluginManifest(pluginId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of currently installed plugins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlugins: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlugins(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Uninstalls a plugin.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uninstallPlugin: function (pluginId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uninstallPlugin(pluginId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Uninstalls a plugin by version.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstallPluginByVersion: function (pluginId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uninstallPluginByVersion(pluginId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Accepts plugin configuration as JSON body.
         * @summary Updates plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePluginConfiguration: function (pluginId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePluginConfiguration(pluginId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates plugin security info.
         * @param {PluginSecurityInfo} pluginSecurityInfo Plugin security info.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updatePluginSecurityInfo: function (pluginSecurityInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePluginSecurityInfo(pluginSecurityInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PluginsApiFp = PluginsApiFp;
/**
 * PluginsApi - factory interface
 * @export
 */
var PluginsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PluginsApiFp)(configuration);
    return {
        /**
         *
         * @summary Disable a plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePlugin: function (pluginId, version, options) {
            return localVarFp.disablePlugin(pluginId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Enables a disabled plugin.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePlugin: function (pluginId, version, options) {
            return localVarFp.enablePlugin(pluginId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginConfiguration: function (pluginId, options) {
            return localVarFp.getPluginConfiguration(pluginId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a plugin\'s image.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginImage: function (pluginId, version, options) {
            return localVarFp.getPluginImage(pluginId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a plugin\'s manifest.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginManifest: function (pluginId, options) {
            return localVarFp.getPluginManifest(pluginId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of currently installed plugins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlugins: function (options) {
            return localVarFp.getPlugins(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Uninstalls a plugin.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uninstallPlugin: function (pluginId, options) {
            return localVarFp.uninstallPlugin(pluginId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Uninstalls a plugin by version.
         * @param {string} pluginId Plugin id.
         * @param {Version} version Plugin version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstallPluginByVersion: function (pluginId, version, options) {
            return localVarFp.uninstallPluginByVersion(pluginId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Accepts plugin configuration as JSON body.
         * @summary Updates plugin configuration.
         * @param {string} pluginId Plugin id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePluginConfiguration: function (pluginId, options) {
            return localVarFp.updatePluginConfiguration(pluginId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates plugin security info.
         * @param {PluginSecurityInfo} pluginSecurityInfo Plugin security info.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updatePluginSecurityInfo: function (pluginSecurityInfo, options) {
            return localVarFp.updatePluginSecurityInfo(pluginSecurityInfo, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PluginsApiFactory = PluginsApiFactory;
/**
 * PluginsApi - object-oriented interface
 * @export
 * @class PluginsApi
 * @extends {BaseAPI}
 */
var PluginsApi = /** @class */ (function (_super) {
    __extends(PluginsApi, _super);
    function PluginsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Disable a plugin.
     * @param {PluginsApiDisablePluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.disablePlugin = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).disablePlugin(requestParameters.pluginId, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Enables a disabled plugin.
     * @param {PluginsApiEnablePluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.enablePlugin = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).enablePlugin(requestParameters.pluginId, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets plugin configuration.
     * @param {PluginsApiGetPluginConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.getPluginConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).getPluginConfiguration(requestParameters.pluginId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a plugin\'s image.
     * @param {PluginsApiGetPluginImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.getPluginImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).getPluginImage(requestParameters.pluginId, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a plugin\'s manifest.
     * @param {PluginsApiGetPluginManifestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.getPluginManifest = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).getPluginManifest(requestParameters.pluginId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of currently installed plugins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.getPlugins = function (options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).getPlugins(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Uninstalls a plugin.
     * @param {PluginsApiUninstallPluginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.uninstallPlugin = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).uninstallPlugin(requestParameters.pluginId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Uninstalls a plugin by version.
     * @param {PluginsApiUninstallPluginByVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.uninstallPluginByVersion = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).uninstallPluginByVersion(requestParameters.pluginId, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Accepts plugin configuration as JSON body.
     * @summary Updates plugin configuration.
     * @param {PluginsApiUpdatePluginConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.updatePluginConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).updatePluginConfiguration(requestParameters.pluginId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates plugin security info.
     * @param {PluginsApiUpdatePluginSecurityInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    PluginsApi.prototype.updatePluginSecurityInfo = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PluginsApiFp)(this.configuration).updatePluginSecurityInfo(requestParameters.pluginSecurityInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PluginsApi;
}(base_1.BaseAPI));
exports.PluginsApi = PluginsApi;

},{"../base":68,"../common":69,"axios":362}],46:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickConnectApi = exports.QuickConnectApiFactory = exports.QuickConnectApiFp = exports.QuickConnectApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * QuickConnectApi - axios parameter creator
 * @export
 */
var QuickConnectApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Temporarily activates quick connect for five minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/QuickConnect/Activate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Authorizes a pending quick connect request.
         * @param {string} code Quick connect code to authorize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: function (code, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'code' is not null or undefined
                            (0, common_1.assertParamExists)('authorize', 'code', code);
                            localVarPath = "/QuickConnect/Authorize";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (code !== undefined) {
                                localVarQueryParameter['code'] = code;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Enables or disables quick connect.
         * @param {QuickConnectState} [status] New MediaBrowser.Model.QuickConnect.QuickConnectState.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        available: function (status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/QuickConnect/Available";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Attempts to retrieve authentication information.
         * @param {string} secret Secret previously returned from the Initiate endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connect: function (secret, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'secret' is not null or undefined
                    (0, common_1.assertParamExists)('connect', 'secret', secret);
                    localVarPath = "/QuickConnect/Connect";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (secret !== undefined) {
                        localVarQueryParameter['secret'] = secret;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deauthorize all quick connect devices for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deauthorize: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/QuickConnect/Deauthorize";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the current quick connect state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/QuickConnect/Status";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Initiate a new quick connect request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiate: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/QuickConnect/Initiate";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.QuickConnectApiAxiosParamCreator = QuickConnectApiAxiosParamCreator;
/**
 * QuickConnectApi - functional programming interface
 * @export
 */
var QuickConnectApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QuickConnectApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Temporarily activates quick connect for five minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.activate(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Authorizes a pending quick connect request.
         * @param {string} code Quick connect code to authorize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: function (code, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authorize(code, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Enables or disables quick connect.
         * @param {QuickConnectState} [status] New MediaBrowser.Model.QuickConnect.QuickConnectState.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        available: function (status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.available(status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Attempts to retrieve authentication information.
         * @param {string} secret Secret previously returned from the Initiate endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connect: function (secret, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.connect(secret, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deauthorize all quick connect devices for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deauthorize: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deauthorize(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the current quick connect state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStatus(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Initiate a new quick connect request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiate: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.initiate(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.QuickConnectApiFp = QuickConnectApiFp;
/**
 * QuickConnectApi - factory interface
 * @export
 */
var QuickConnectApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QuickConnectApiFp)(configuration);
    return {
        /**
         *
         * @summary Temporarily activates quick connect for five minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate: function (options) {
            return localVarFp.activate(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Authorizes a pending quick connect request.
         * @param {string} code Quick connect code to authorize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: function (code, options) {
            return localVarFp.authorize(code, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Enables or disables quick connect.
         * @param {QuickConnectState} [status] New MediaBrowser.Model.QuickConnect.QuickConnectState.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        available: function (status, options) {
            return localVarFp.available(status, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Attempts to retrieve authentication information.
         * @param {string} secret Secret previously returned from the Initiate endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connect: function (secret, options) {
            return localVarFp.connect(secret, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deauthorize all quick connect devices for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deauthorize: function (options) {
            return localVarFp.deauthorize(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the current quick connect state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            return localVarFp.getStatus(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Initiate a new quick connect request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiate: function (options) {
            return localVarFp.initiate(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QuickConnectApiFactory = QuickConnectApiFactory;
/**
 * QuickConnectApi - object-oriented interface
 * @export
 * @class QuickConnectApi
 * @extends {BaseAPI}
 */
var QuickConnectApi = /** @class */ (function (_super) {
    __extends(QuickConnectApi, _super);
    function QuickConnectApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Temporarily activates quick connect for five minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.activate = function (options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).activate(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Authorizes a pending quick connect request.
     * @param {QuickConnectApiAuthorizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.authorize = function (requestParameters, options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).authorize(requestParameters.code, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Enables or disables quick connect.
     * @param {QuickConnectApiAvailableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.available = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.QuickConnectApiFp)(this.configuration).available(requestParameters.status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Attempts to retrieve authentication information.
     * @param {QuickConnectApiConnectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.connect = function (requestParameters, options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).connect(requestParameters.secret, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deauthorize all quick connect devices for the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.deauthorize = function (options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).deauthorize(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the current quick connect state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.getStatus = function (options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).getStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Initiate a new quick connect request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickConnectApi
     */
    QuickConnectApi.prototype.initiate = function (options) {
        var _this = this;
        return (0, exports.QuickConnectApiFp)(this.configuration).initiate(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuickConnectApi;
}(base_1.BaseAPI));
exports.QuickConnectApi = QuickConnectApi;

},{"../base":68,"../common":69,"axios":362}],47:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteImageApi = exports.RemoteImageApiFactory = exports.RemoteImageApiFp = exports.RemoteImageApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * RemoteImageApi - axios parameter creator
 * @export
 */
var RemoteImageApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Downloads a remote image for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} type The image type.
         * @param {string} [imageUrl] The image url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteImage: function (itemId, type, imageUrl, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRemoteImage', 'itemId', itemId);
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRemoteImage', 'type', type);
                            localVarPath = "/Items/{itemId}/RemoteImages/Download"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (imageUrl !== undefined) {
                                localVarQueryParameter['imageUrl'] = imageUrl;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available remote image providers for an item.
         * @param {string} itemId Item Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImageProviders: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getRemoteImageProviders', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/RemoteImages/Providers"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available remote images for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} [type] The image type.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [providerName] Optional. The image provider to use.
         * @param {boolean} [includeAllLanguages] Optional. Include all languages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImages: function (itemId, type, startIndex, limit, providerName, includeAllLanguages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getRemoteImages', 'itemId', itemId);
                            localVarPath = "/Items/{itemId}/RemoteImages"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (providerName !== undefined) {
                                localVarQueryParameter['providerName'] = providerName;
                            }
                            if (includeAllLanguages !== undefined) {
                                localVarQueryParameter['includeAllLanguages'] = includeAllLanguages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RemoteImageApiAxiosParamCreator = RemoteImageApiAxiosParamCreator;
/**
 * RemoteImageApi - functional programming interface
 * @export
 */
var RemoteImageApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RemoteImageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Downloads a remote image for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} type The image type.
         * @param {string} [imageUrl] The image url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteImage: function (itemId, type, imageUrl, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.downloadRemoteImage(itemId, type, imageUrl, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available remote image providers for an item.
         * @param {string} itemId Item Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImageProviders: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRemoteImageProviders(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets available remote images for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} [type] The image type.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [providerName] Optional. The image provider to use.
         * @param {boolean} [includeAllLanguages] Optional. Include all languages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImages: function (itemId, type, startIndex, limit, providerName, includeAllLanguages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRemoteImages(itemId, type, startIndex, limit, providerName, includeAllLanguages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.RemoteImageApiFp = RemoteImageApiFp;
/**
 * RemoteImageApi - factory interface
 * @export
 */
var RemoteImageApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RemoteImageApiFp)(configuration);
    return {
        /**
         *
         * @summary Downloads a remote image for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} type The image type.
         * @param {string} [imageUrl] The image url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteImage: function (itemId, type, imageUrl, options) {
            return localVarFp.downloadRemoteImage(itemId, type, imageUrl, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available remote image providers for an item.
         * @param {string} itemId Item Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImageProviders: function (itemId, options) {
            return localVarFp.getRemoteImageProviders(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets available remote images for an item.
         * @param {string} itemId Item Id.
         * @param {ImageType} [type] The image type.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [providerName] Optional. The image provider to use.
         * @param {boolean} [includeAllLanguages] Optional. Include all languages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImages: function (itemId, type, startIndex, limit, providerName, includeAllLanguages, options) {
            return localVarFp.getRemoteImages(itemId, type, startIndex, limit, providerName, includeAllLanguages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RemoteImageApiFactory = RemoteImageApiFactory;
/**
 * RemoteImageApi - object-oriented interface
 * @export
 * @class RemoteImageApi
 * @extends {BaseAPI}
 */
var RemoteImageApi = /** @class */ (function (_super) {
    __extends(RemoteImageApi, _super);
    function RemoteImageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Downloads a remote image for an item.
     * @param {RemoteImageApiDownloadRemoteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageApi
     */
    RemoteImageApi.prototype.downloadRemoteImage = function (requestParameters, options) {
        var _this = this;
        return (0, exports.RemoteImageApiFp)(this.configuration).downloadRemoteImage(requestParameters.itemId, requestParameters.type, requestParameters.imageUrl, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available remote image providers for an item.
     * @param {RemoteImageApiGetRemoteImageProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageApi
     */
    RemoteImageApi.prototype.getRemoteImageProviders = function (requestParameters, options) {
        var _this = this;
        return (0, exports.RemoteImageApiFp)(this.configuration).getRemoteImageProviders(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets available remote images for an item.
     * @param {RemoteImageApiGetRemoteImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageApi
     */
    RemoteImageApi.prototype.getRemoteImages = function (requestParameters, options) {
        var _this = this;
        return (0, exports.RemoteImageApiFp)(this.configuration).getRemoteImages(requestParameters.itemId, requestParameters.type, requestParameters.startIndex, requestParameters.limit, requestParameters.providerName, requestParameters.includeAllLanguages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RemoteImageApi;
}(base_1.BaseAPI));
exports.RemoteImageApi = RemoteImageApi;

},{"../base":68,"../common":69,"axios":362}],48:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTasksApi = exports.ScheduledTasksApiFactory = exports.ScheduledTasksApiFp = exports.ScheduledTasksApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * ScheduledTasksApi - axios parameter creator
 * @export
 */
var ScheduledTasksApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get task by id.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTask: function (taskId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskId' is not null or undefined
                            (0, common_1.assertParamExists)('getTask', 'taskId', taskId);
                            localVarPath = "/ScheduledTasks/{taskId}"
                                .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get tasks.
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: function (isHidden, isEnabled, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ScheduledTasks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (isHidden !== undefined) {
                                localVarQueryParameter['isHidden'] = isHidden;
                            }
                            if (isEnabled !== undefined) {
                                localVarQueryParameter['isEnabled'] = isEnabled;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Start specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTask: function (taskId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskId' is not null or undefined
                            (0, common_1.assertParamExists)('startTask', 'taskId', taskId);
                            localVarPath = "/ScheduledTasks/Running/{taskId}"
                                .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Stop specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTask: function (taskId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskId' is not null or undefined
                            (0, common_1.assertParamExists)('stopTask', 'taskId', taskId);
                            localVarPath = "/ScheduledTasks/Running/{taskId}"
                                .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specified task triggers.
         * @param {string} taskId Task Id.
         * @param {Array<TaskTriggerInfo>} taskTriggerInfo Triggers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskId, taskTriggerInfo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taskId' is not null or undefined
                            (0, common_1.assertParamExists)('updateTask', 'taskId', taskId);
                            // verify required parameter 'taskTriggerInfo' is not null or undefined
                            (0, common_1.assertParamExists)('updateTask', 'taskTriggerInfo', taskTriggerInfo);
                            localVarPath = "/ScheduledTasks/{taskId}/Triggers"
                                .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(taskTriggerInfo, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ScheduledTasksApiAxiosParamCreator = ScheduledTasksApiAxiosParamCreator;
/**
 * ScheduledTasksApi - functional programming interface
 * @export
 */
var ScheduledTasksApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ScheduledTasksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get task by id.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTask: function (taskId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTask(taskId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get tasks.
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: function (isHidden, isEnabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTasks(isHidden, isEnabled, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Start specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTask: function (taskId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startTask(taskId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Stop specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTask: function (taskId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stopTask(taskId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specified task triggers.
         * @param {string} taskId Task Id.
         * @param {Array<TaskTriggerInfo>} taskTriggerInfo Triggers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskId, taskTriggerInfo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTask(taskId, taskTriggerInfo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ScheduledTasksApiFp = ScheduledTasksApiFp;
/**
 * ScheduledTasksApi - factory interface
 * @export
 */
var ScheduledTasksApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ScheduledTasksApiFp)(configuration);
    return {
        /**
         *
         * @summary Get task by id.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTask: function (taskId, options) {
            return localVarFp.getTask(taskId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get tasks.
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: function (isHidden, isEnabled, options) {
            return localVarFp.getTasks(isHidden, isEnabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Start specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTask: function (taskId, options) {
            return localVarFp.startTask(taskId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Stop specified task.
         * @param {string} taskId Task Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTask: function (taskId, options) {
            return localVarFp.stopTask(taskId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update specified task triggers.
         * @param {string} taskId Task Id.
         * @param {Array<TaskTriggerInfo>} taskTriggerInfo Triggers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: function (taskId, taskTriggerInfo, options) {
            return localVarFp.updateTask(taskId, taskTriggerInfo, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ScheduledTasksApiFactory = ScheduledTasksApiFactory;
/**
 * ScheduledTasksApi - object-oriented interface
 * @export
 * @class ScheduledTasksApi
 * @extends {BaseAPI}
 */
var ScheduledTasksApi = /** @class */ (function (_super) {
    __extends(ScheduledTasksApi, _super);
    function ScheduledTasksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get task by id.
     * @param {ScheduledTasksApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTasksApi
     */
    ScheduledTasksApi.prototype.getTask = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ScheduledTasksApiFp)(this.configuration).getTask(requestParameters.taskId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get tasks.
     * @param {ScheduledTasksApiGetTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTasksApi
     */
    ScheduledTasksApi.prototype.getTasks = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ScheduledTasksApiFp)(this.configuration).getTasks(requestParameters.isHidden, requestParameters.isEnabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Start specified task.
     * @param {ScheduledTasksApiStartTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTasksApi
     */
    ScheduledTasksApi.prototype.startTask = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ScheduledTasksApiFp)(this.configuration).startTask(requestParameters.taskId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Stop specified task.
     * @param {ScheduledTasksApiStopTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTasksApi
     */
    ScheduledTasksApi.prototype.stopTask = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ScheduledTasksApiFp)(this.configuration).stopTask(requestParameters.taskId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update specified task triggers.
     * @param {ScheduledTasksApiUpdateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTasksApi
     */
    ScheduledTasksApi.prototype.updateTask = function (requestParameters, options) {
        var _this = this;
        return (0, exports.ScheduledTasksApiFp)(this.configuration).updateTask(requestParameters.taskId, requestParameters.taskTriggerInfo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ScheduledTasksApi;
}(base_1.BaseAPI));
exports.ScheduledTasksApi = ScheduledTasksApi;

},{"../base":68,"../common":69,"axios":362}],49:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchApi = exports.SearchApiFactory = exports.SearchApiFp = exports.SearchApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SearchApi - axios parameter creator
 * @export
 */
var SearchApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: function (searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'searchTerm' is not null or undefined
                            (0, common_1.assertParamExists)('get', 'searchTerm', searchTerm);
                            localVarPath = "/Search/Hints";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (isMovie !== undefined) {
                                localVarQueryParameter['isMovie'] = isMovie;
                            }
                            if (isSeries !== undefined) {
                                localVarQueryParameter['isSeries'] = isSeries;
                            }
                            if (isNews !== undefined) {
                                localVarQueryParameter['isNews'] = isNews;
                            }
                            if (isKids !== undefined) {
                                localVarQueryParameter['isKids'] = isKids;
                            }
                            if (isSports !== undefined) {
                                localVarQueryParameter['isSports'] = isSports;
                            }
                            if (includePeople !== undefined) {
                                localVarQueryParameter['includePeople'] = includePeople;
                            }
                            if (includeMedia !== undefined) {
                                localVarQueryParameter['includeMedia'] = includeMedia;
                            }
                            if (includeGenres !== undefined) {
                                localVarQueryParameter['includeGenres'] = includeGenres;
                            }
                            if (includeStudios !== undefined) {
                                localVarQueryParameter['includeStudios'] = includeStudios;
                            }
                            if (includeArtists !== undefined) {
                                localVarQueryParameter['includeArtists'] = includeArtists;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SearchApiAxiosParamCreator = SearchApiAxiosParamCreator;
/**
 * SearchApi - functional programming interface
 * @export
 */
var SearchApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SearchApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: function (searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.get(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SearchApiFp = SearchApiFp;
/**
 * SearchApi - factory interface
 * @export
 */
var SearchApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SearchApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: function (searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options) {
            return localVarFp.get(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SearchApiFactory = SearchApiFactory;
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
var SearchApi = /** @class */ (function (_super) {
    __extends(SearchApi, _super);
    function SearchApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets the search hint result.
     * @param {SearchApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.get = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SearchApiFp)(this.configuration).get(requestParameters.searchTerm, requestParameters.startIndex, requestParameters.limit, requestParameters.userId, requestParameters.includeItemTypes, requestParameters.excludeItemTypes, requestParameters.mediaTypes, requestParameters.parentId, requestParameters.isMovie, requestParameters.isSeries, requestParameters.isNews, requestParameters.isKids, requestParameters.isSports, requestParameters.includePeople, requestParameters.includeMedia, requestParameters.includeGenres, requestParameters.includeStudios, requestParameters.includeArtists, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SearchApi;
}(base_1.BaseAPI));
exports.SearchApi = SearchApi;

},{"../base":68,"../common":69,"axios":362}],50:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionApi = exports.SessionApiFactory = exports.SessionApiFp = exports.SessionApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SessionApi - axios parameter creator
 * @export
 */
var SessionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToSession: function (sessionId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('addUserToSession', 'sessionId', sessionId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('addUserToSession', 'userId', userId);
                            localVarPath = "/Sessions/{sessionId}/User/{userId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayContent: function (sessionId, itemType, itemId, itemName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('displayContent', 'sessionId', sessionId);
                            // verify required parameter 'itemType' is not null or undefined
                            (0, common_1.assertParamExists)('displayContent', 'itemType', itemType);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('displayContent', 'itemId', itemId);
                            // verify required parameter 'itemName' is not null or undefined
                            (0, common_1.assertParamExists)('displayContent', 'itemName', itemName);
                            localVarPath = "/Sessions/{sessionId}/Viewing"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (itemType !== undefined) {
                                localVarQueryParameter['itemType'] = itemType;
                            }
                            if (itemId !== undefined) {
                                localVarQueryParameter['itemId'] = itemId;
                            }
                            if (itemName !== undefined) {
                                localVarQueryParameter['itemName'] = itemName;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthProviders: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Auth/Providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordResetProviders: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Auth/PasswordResetProviders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: function (controllableByUserId, deviceId, activeWithinSeconds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (controllableByUserId !== undefined) {
                                localVarQueryParameter['controllableByUserId'] = controllableByUserId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (activeWithinSeconds !== undefined) {
                                localVarQueryParameter['activeWithinSeconds'] = activeWithinSeconds;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {string} [mediaSourceId] Optional. The media source id.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to play.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to play.
         * @param {number} [startIndex] Optional. The start index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        play: function (sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('play', 'sessionId', sessionId);
                            // verify required parameter 'playCommand' is not null or undefined
                            (0, common_1.assertParamExists)('play', 'playCommand', playCommand);
                            // verify required parameter 'itemIds' is not null or undefined
                            (0, common_1.assertParamExists)('play', 'itemIds', itemIds);
                            localVarPath = "/Sessions/{sessionId}/Playing"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (playCommand !== undefined) {
                                localVarQueryParameter['playCommand'] = playCommand;
                            }
                            if (itemIds) {
                                localVarQueryParameter['itemIds'] = itemIds;
                            }
                            if (startPositionTicks !== undefined) {
                                localVarQueryParameter['startPositionTicks'] = startPositionTicks;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCapabilities: function (id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions/Capabilities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (playableMediaTypes) {
                                localVarQueryParameter['playableMediaTypes'] = playableMediaTypes;
                            }
                            if (supportedCommands) {
                                localVarQueryParameter['supportedCommands'] = supportedCommands;
                            }
                            if (supportsMediaControl !== undefined) {
                                localVarQueryParameter['supportsMediaControl'] = supportsMediaControl;
                            }
                            if (supportsSync !== undefined) {
                                localVarQueryParameter['supportsSync'] = supportsSync;
                            }
                            if (supportsPersistentIdentifier !== undefined) {
                                localVarQueryParameter['supportsPersistentIdentifier'] = supportsPersistentIdentifier;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {ClientCapabilitiesDto} clientCapabilitiesDto The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFullCapabilities: function (clientCapabilitiesDto, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'clientCapabilitiesDto' is not null or undefined
                            (0, common_1.assertParamExists)('postFullCapabilities', 'clientCapabilitiesDto', clientCapabilitiesDto);
                            localVarPath = "/Sessions/Capabilities/Full";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(clientCapabilitiesDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromSession: function (sessionId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('removeUserFromSession', 'sessionId', sessionId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('removeUserFromSession', 'userId', userId);
                            localVarPath = "/Sessions/{sessionId}/User/{userId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSessionEnded: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Sessions/Logout";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportViewing: function (itemId, sessionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('reportViewing', 'itemId', itemId);
                            localVarPath = "/Sessions/Viewing";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (sessionId !== undefined) {
                                localVarQueryParameter['sessionId'] = sessionId;
                            }
                            if (itemId !== undefined) {
                                localVarQueryParameter['itemId'] = itemId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommand} generalCommand The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFullGeneralCommand: function (sessionId, generalCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('sendFullGeneralCommand', 'sessionId', sessionId);
                            // verify required parameter 'generalCommand' is not null or undefined
                            (0, common_1.assertParamExists)('sendFullGeneralCommand', 'generalCommand', generalCommand);
                            localVarPath = "/Sessions/{sessionId}/Command"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generalCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGeneralCommand: function (sessionId, command, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('sendGeneralCommand', 'sessionId', sessionId);
                            // verify required parameter 'command' is not null or undefined
                            (0, common_1.assertParamExists)('sendGeneralCommand', 'command', command);
                            localVarPath = "/Sessions/{sessionId}/Command/{command}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("command", "}"), encodeURIComponent(String(command)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {MessageCommand} messageCommand The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageCommand: function (sessionId, messageCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('sendMessageCommand', 'sessionId', sessionId);
                            // verify required parameter 'messageCommand' is not null or undefined
                            (0, common_1.assertParamExists)('sendMessageCommand', 'messageCommand', messageCommand);
                            localVarPath = "/Sessions/{sessionId}/Message"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(messageCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPlaystateCommand: function (sessionId, command, seekPositionTicks, controllingUserId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('sendPlaystateCommand', 'sessionId', sessionId);
                            // verify required parameter 'command' is not null or undefined
                            (0, common_1.assertParamExists)('sendPlaystateCommand', 'command', command);
                            localVarPath = "/Sessions/{sessionId}/Playing/{command}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("command", "}"), encodeURIComponent(String(command)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (seekPositionTicks !== undefined) {
                                localVarQueryParameter['seekPositionTicks'] = seekPositionTicks;
                            }
                            if (controllingUserId !== undefined) {
                                localVarQueryParameter['controllingUserId'] = controllingUserId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSystemCommand: function (sessionId, command, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('sendSystemCommand', 'sessionId', sessionId);
                            // verify required parameter 'command' is not null or undefined
                            (0, common_1.assertParamExists)('sendSystemCommand', 'command', command);
                            localVarPath = "/Sessions/{sessionId}/System/{command}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("command", "}"), encodeURIComponent(String(command)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SessionApiAxiosParamCreator = SessionApiAxiosParamCreator;
/**
 * SessionApi - functional programming interface
 * @export
 */
var SessionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SessionApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToSession: function (sessionId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addUserToSession(sessionId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayContent: function (sessionId, itemType, itemId, itemName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.displayContent(sessionId, itemType, itemId, itemName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthProviders: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAuthProviders(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordResetProviders: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordResetProviders(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: function (controllableByUserId, deviceId, activeWithinSeconds, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSessions(controllableByUserId, deviceId, activeWithinSeconds, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {string} [mediaSourceId] Optional. The media source id.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to play.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to play.
         * @param {number} [startIndex] Optional. The start index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        play: function (sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.play(sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCapabilities: function (id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {ClientCapabilitiesDto} clientCapabilitiesDto The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFullCapabilities: function (clientCapabilitiesDto, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postFullCapabilities(clientCapabilitiesDto, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromSession: function (sessionId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeUserFromSession(sessionId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSessionEnded: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportSessionEnded(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportViewing: function (itemId, sessionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportViewing(itemId, sessionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommand} generalCommand The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFullGeneralCommand: function (sessionId, generalCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendFullGeneralCommand(sessionId, generalCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGeneralCommand: function (sessionId, command, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendGeneralCommand(sessionId, command, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {MessageCommand} messageCommand The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageCommand: function (sessionId, messageCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendMessageCommand(sessionId, messageCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPlaystateCommand: function (sessionId, command, seekPositionTicks, controllingUserId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSystemCommand: function (sessionId, command, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendSystemCommand(sessionId, command, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SessionApiFp = SessionApiFp;
/**
 * SessionApi - factory interface
 * @export
 */
var SessionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SessionApiFp)(configuration);
    return {
        /**
         *
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToSession: function (sessionId, userId, options) {
            return localVarFp.addUserToSession(sessionId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayContent: function (sessionId, itemType, itemId, itemName, options) {
            return localVarFp.displayContent(sessionId, itemType, itemId, itemName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthProviders: function (options) {
            return localVarFp.getAuthProviders(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordResetProviders: function (options) {
            return localVarFp.getPasswordResetProviders(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: function (controllableByUserId, deviceId, activeWithinSeconds, options) {
            return localVarFp.getSessions(controllableByUserId, deviceId, activeWithinSeconds, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {string} [mediaSourceId] Optional. The media source id.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to play.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to play.
         * @param {number} [startIndex] Optional. The start index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        play: function (sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, options) {
            return localVarFp.play(sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCapabilities: function (id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options) {
            return localVarFp.postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates capabilities for a device.
         * @param {ClientCapabilitiesDto} clientCapabilitiesDto The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFullCapabilities: function (clientCapabilitiesDto, id, options) {
            return localVarFp.postFullCapabilities(clientCapabilitiesDto, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromSession: function (sessionId, userId, options) {
            return localVarFp.removeUserFromSession(sessionId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSessionEnded: function (options) {
            return localVarFp.reportSessionEnded(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportViewing: function (itemId, sessionId, options) {
            return localVarFp.reportViewing(itemId, sessionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommand} generalCommand The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFullGeneralCommand: function (sessionId, generalCommand, options) {
            return localVarFp.sendFullGeneralCommand(sessionId, generalCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGeneralCommand: function (sessionId, command, options) {
            return localVarFp.sendGeneralCommand(sessionId, command, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {MessageCommand} messageCommand The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageCommand: function (sessionId, messageCommand, options) {
            return localVarFp.sendMessageCommand(sessionId, messageCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPlaystateCommand: function (sessionId, command, seekPositionTicks, controllingUserId, options) {
            return localVarFp.sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSystemCommand: function (sessionId, command, options) {
            return localVarFp.sendSystemCommand(sessionId, command, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SessionApiFactory = SessionApiFactory;
/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
var SessionApi = /** @class */ (function (_super) {
    __extends(SessionApi, _super);
    function SessionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Adds an additional user to a session.
     * @param {SessionApiAddUserToSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.addUserToSession = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).addUserToSession(requestParameters.sessionId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Instructs a session to browse to an item or view.
     * @param {SessionApiDisplayContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.displayContent = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).displayContent(requestParameters.sessionId, requestParameters.itemType, requestParameters.itemId, requestParameters.itemName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all auth providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.getAuthProviders = function (options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).getAuthProviders(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all password reset providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.getPasswordResetProviders = function (options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).getPasswordResetProviders(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of sessions.
     * @param {SessionApiGetSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.getSessions = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SessionApiFp)(this.configuration).getSessions(requestParameters.controllableByUserId, requestParameters.deviceId, requestParameters.activeWithinSeconds, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Instructs a session to play an item.
     * @param {SessionApiPlayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.play = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).play(requestParameters.sessionId, requestParameters.playCommand, requestParameters.itemIds, requestParameters.startPositionTicks, requestParameters.mediaSourceId, requestParameters.audioStreamIndex, requestParameters.subtitleStreamIndex, requestParameters.startIndex, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates capabilities for a device.
     * @param {SessionApiPostCapabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.postCapabilities = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SessionApiFp)(this.configuration).postCapabilities(requestParameters.id, requestParameters.playableMediaTypes, requestParameters.supportedCommands, requestParameters.supportsMediaControl, requestParameters.supportsSync, requestParameters.supportsPersistentIdentifier, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates capabilities for a device.
     * @param {SessionApiPostFullCapabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.postFullCapabilities = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).postFullCapabilities(requestParameters.clientCapabilitiesDto, requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes an additional user from a session.
     * @param {SessionApiRemoveUserFromSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.removeUserFromSession = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).removeUserFromSession(requestParameters.sessionId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that a session has ended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.reportSessionEnded = function (options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).reportSessionEnded(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Reports that a session is viewing an item.
     * @param {SessionApiReportViewingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.reportViewing = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).reportViewing(requestParameters.itemId, requestParameters.sessionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Issues a full general command to a client.
     * @param {SessionApiSendFullGeneralCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.sendFullGeneralCommand = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).sendFullGeneralCommand(requestParameters.sessionId, requestParameters.generalCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Issues a general command to a client.
     * @param {SessionApiSendGeneralCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.sendGeneralCommand = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).sendGeneralCommand(requestParameters.sessionId, requestParameters.command, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Issues a command to a client to display a message to the user.
     * @param {SessionApiSendMessageCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.sendMessageCommand = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).sendMessageCommand(requestParameters.sessionId, requestParameters.messageCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Issues a playstate command to a client.
     * @param {SessionApiSendPlaystateCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.sendPlaystateCommand = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).sendPlaystateCommand(requestParameters.sessionId, requestParameters.command, requestParameters.seekPositionTicks, requestParameters.controllingUserId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Issues a system command to a client.
     * @param {SessionApiSendSystemCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.sendSystemCommand = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SessionApiFp)(this.configuration).sendSystemCommand(requestParameters.sessionId, requestParameters.command, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SessionApi;
}(base_1.BaseAPI));
exports.SessionApi = SessionApi;

},{"../base":68,"../common":69,"axios":362}],51:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartupApi = exports.StartupApiFactory = exports.StartupApiFp = exports.StartupApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * StartupApi - axios parameter creator
 * @export
 */
var StartupApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Completes the startup wizard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeWizard: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Startup/Complete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Startup/User";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser2: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Startup/FirstUser";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the initial startup wizard configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartupConfiguration: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Startup/Configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets remote access and UPnP.
         * @param {StartupRemoteAccessDto} startupRemoteAccessDto The startup remote access dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRemoteAccess: function (startupRemoteAccessDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'startupRemoteAccessDto' is not null or undefined
                            (0, common_1.assertParamExists)('setRemoteAccess', 'startupRemoteAccessDto', startupRemoteAccessDto);
                            localVarPath = "/Startup/RemoteAccess";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(startupRemoteAccessDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the initial startup wizard configuration.
         * @param {StartupConfigurationDto} startupConfigurationDto The updated startup configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInitialConfiguration: function (startupConfigurationDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'startupConfigurationDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateInitialConfiguration', 'startupConfigurationDto', startupConfigurationDto);
                            localVarPath = "/Startup/Configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(startupConfigurationDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the user name and password.
         * @param {StartupUserDto} [startupUserDto] The DTO containing username and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStartupUser: function (startupUserDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Startup/User";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(startupUserDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.StartupApiAxiosParamCreator = StartupApiAxiosParamCreator;
/**
 * StartupApi - functional programming interface
 * @export
 */
var StartupApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StartupApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Completes the startup wizard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeWizard: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.completeWizard(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFirstUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser2: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFirstUser2(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the initial startup wizard configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartupConfiguration: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStartupConfiguration(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets remote access and UPnP.
         * @param {StartupRemoteAccessDto} startupRemoteAccessDto The startup remote access dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRemoteAccess: function (startupRemoteAccessDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setRemoteAccess(startupRemoteAccessDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the initial startup wizard configuration.
         * @param {StartupConfigurationDto} startupConfigurationDto The updated startup configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInitialConfiguration: function (startupConfigurationDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateInitialConfiguration(startupConfigurationDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sets the user name and password.
         * @param {StartupUserDto} [startupUserDto] The DTO containing username and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStartupUser: function (startupUserDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateStartupUser(startupUserDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.StartupApiFp = StartupApiFp;
/**
 * StartupApi - factory interface
 * @export
 */
var StartupApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StartupApiFp)(configuration);
    return {
        /**
         *
         * @summary Completes the startup wizard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeWizard: function (options) {
            return localVarFp.completeWizard(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser: function (options) {
            return localVarFp.getFirstUser(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the first user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstUser2: function (options) {
            return localVarFp.getFirstUser2(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the initial startup wizard configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartupConfiguration: function (options) {
            return localVarFp.getStartupConfiguration(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets remote access and UPnP.
         * @param {StartupRemoteAccessDto} startupRemoteAccessDto The startup remote access dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRemoteAccess: function (startupRemoteAccessDto, options) {
            return localVarFp.setRemoteAccess(startupRemoteAccessDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets the initial startup wizard configuration.
         * @param {StartupConfigurationDto} startupConfigurationDto The updated startup configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInitialConfiguration: function (startupConfigurationDto, options) {
            return localVarFp.updateInitialConfiguration(startupConfigurationDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sets the user name and password.
         * @param {StartupUserDto} [startupUserDto] The DTO containing username and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStartupUser: function (startupUserDto, options) {
            return localVarFp.updateStartupUser(startupUserDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StartupApiFactory = StartupApiFactory;
/**
 * StartupApi - object-oriented interface
 * @export
 * @class StartupApi
 * @extends {BaseAPI}
 */
var StartupApi = /** @class */ (function (_super) {
    __extends(StartupApi, _super);
    function StartupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Completes the startup wizard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.completeWizard = function (options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).completeWizard(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the first user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.getFirstUser = function (options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).getFirstUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the first user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.getFirstUser2 = function (options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).getFirstUser2(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the initial startup wizard configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.getStartupConfiguration = function (options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).getStartupConfiguration(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets remote access and UPnP.
     * @param {StartupApiSetRemoteAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.setRemoteAccess = function (requestParameters, options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).setRemoteAccess(requestParameters.startupRemoteAccessDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets the initial startup wizard configuration.
     * @param {StartupApiUpdateInitialConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.updateInitialConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.StartupApiFp)(this.configuration).updateInitialConfiguration(requestParameters.startupConfigurationDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sets the user name and password.
     * @param {StartupApiUpdateStartupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupApi
     */
    StartupApi.prototype.updateStartupUser = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.StartupApiFp)(this.configuration).updateStartupUser(requestParameters.startupUserDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StartupApi;
}(base_1.BaseAPI));
exports.StartupApi = StartupApi;

},{"../base":68,"../common":69,"axios":362}],52:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StudiosApi = exports.StudiosApiFactory = exports.StudiosApiFp = exports.StudiosApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * StudiosApi - axios parameter creator
 * @export
 */
var StudiosApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a studio by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudio: function (name, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getStudio', 'name', name);
                            localVarPath = "/Studios/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all studios from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudios: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Studios";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.StudiosApiAxiosParamCreator = StudiosApiAxiosParamCreator;
/**
 * StudiosApi - functional programming interface
 * @export
 */
var StudiosApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StudiosApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a studio by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudio: function (name, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStudio(name, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all studios from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudios: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStudios(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.StudiosApiFp = StudiosApiFp;
/**
 * StudiosApi - factory interface
 * @export
 */
var StudiosApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StudiosApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a studio by name.
         * @param {string} name Studio name.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudio: function (name, userId, options) {
            return localVarFp.getStudio(name, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all studios from a given item, folder, or the entire library.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [searchTerm] Optional. Search term.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User id.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {boolean} [enableTotalRecordCount] Total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudios: function (startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options) {
            return localVarFp.getStudios(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StudiosApiFactory = StudiosApiFactory;
/**
 * StudiosApi - object-oriented interface
 * @export
 * @class StudiosApi
 * @extends {BaseAPI}
 */
var StudiosApi = /** @class */ (function (_super) {
    __extends(StudiosApi, _super);
    function StudiosApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a studio by name.
     * @param {StudiosApiGetStudioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiosApi
     */
    StudiosApi.prototype.getStudio = function (requestParameters, options) {
        var _this = this;
        return (0, exports.StudiosApiFp)(this.configuration).getStudio(requestParameters.name, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all studios from a given item, folder, or the entire library.
     * @param {StudiosApiGetStudiosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiosApi
     */
    StudiosApi.prototype.getStudios = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.StudiosApiFp)(this.configuration).getStudios(requestParameters.startIndex, requestParameters.limit, requestParameters.searchTerm, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.isFavorite, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.userId, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.enableImages, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StudiosApi;
}(base_1.BaseAPI));
exports.StudiosApi = StudiosApi;

},{"../base":68,"../common":69,"axios":362}],53:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleApi = exports.SubtitleApiFactory = exports.SubtitleApiFp = exports.SubtitleApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SubtitleApi - axios parameter creator
 * @export
 */
var SubtitleApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtitle: function (itemId, index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSubtitle', 'itemId', itemId);
                            // verify required parameter 'index' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSubtitle', 'index', index);
                            localVarPath = "/Videos/{itemId}/Subtitles/{index}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("index", "}"), encodeURIComponent(String(index)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteSubtitles: function (itemId, subtitleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRemoteSubtitles', 'itemId', itemId);
                            // verify required parameter 'subtitleId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRemoteSubtitles', 'subtitleId', subtitleId);
                            localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("subtitleId", "}"), encodeURIComponent(String(subtitleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFont: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getFallbackFont', 'name', name);
                            localVarPath = "/FallbackFont/Fonts/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFontList: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/FallbackFont/Fonts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteSubtitles: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getRemoteSubtitles', 'id', id);
                            localVarPath = "/Providers/Subtitles/Subtitles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitle: function (routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'routeItemId' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitle', 'routeItemId', routeItemId);
                    // verify required parameter 'routeMediaSourceId' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitle', 'routeMediaSourceId', routeMediaSourceId);
                    // verify required parameter 'routeIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitle', 'routeIndex', routeIndex);
                    // verify required parameter 'routeFormat' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitle', 'routeFormat', routeFormat);
                    localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}"
                        .replace("{".concat("routeItemId", "}"), encodeURIComponent(String(routeItemId)))
                        .replace("{".concat("routeMediaSourceId", "}"), encodeURIComponent(String(routeMediaSourceId)))
                        .replace("{".concat("routeIndex", "}"), encodeURIComponent(String(routeIndex)))
                        .replace("{".concat("routeFormat", "}"), encodeURIComponent(String(routeFormat)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (itemId !== undefined) {
                        localVarQueryParameter['itemId'] = itemId;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (index !== undefined) {
                        localVarQueryParameter['index'] = index;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (endPositionTicks !== undefined) {
                        localVarQueryParameter['endPositionTicks'] = endPositionTicks;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (addVttTimeMap !== undefined) {
                        localVarQueryParameter['addVttTimeMap'] = addVttTimeMap;
                    }
                    if (startPositionTicks !== undefined) {
                        localVarQueryParameter['startPositionTicks'] = startPositionTicks;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitlePlaylist: function (itemId, index, mediaSourceId, segmentLength, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSubtitlePlaylist', 'itemId', itemId);
                            // verify required parameter 'index' is not null or undefined
                            (0, common_1.assertParamExists)('getSubtitlePlaylist', 'index', index);
                            // verify required parameter 'mediaSourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getSubtitlePlaylist', 'mediaSourceId', mediaSourceId);
                            // verify required parameter 'segmentLength' is not null or undefined
                            (0, common_1.assertParamExists)('getSubtitlePlaylist', 'segmentLength', segmentLength);
                            localVarPath = "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("index", "}"), encodeURIComponent(String(index)))
                                .replace("{".concat("mediaSourceId", "}"), encodeURIComponent(String(mediaSourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {number} routeStartPositionTicks The (route) start position of the subtitle in ticks.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitleWithTicks: function (routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'routeItemId' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitleWithTicks', 'routeItemId', routeItemId);
                    // verify required parameter 'routeMediaSourceId' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitleWithTicks', 'routeMediaSourceId', routeMediaSourceId);
                    // verify required parameter 'routeIndex' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitleWithTicks', 'routeIndex', routeIndex);
                    // verify required parameter 'routeStartPositionTicks' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitleWithTicks', 'routeStartPositionTicks', routeStartPositionTicks);
                    // verify required parameter 'routeFormat' is not null or undefined
                    (0, common_1.assertParamExists)('getSubtitleWithTicks', 'routeFormat', routeFormat);
                    localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}"
                        .replace("{".concat("routeItemId", "}"), encodeURIComponent(String(routeItemId)))
                        .replace("{".concat("routeMediaSourceId", "}"), encodeURIComponent(String(routeMediaSourceId)))
                        .replace("{".concat("routeIndex", "}"), encodeURIComponent(String(routeIndex)))
                        .replace("{".concat("routeStartPositionTicks", "}"), encodeURIComponent(String(routeStartPositionTicks)))
                        .replace("{".concat("routeFormat", "}"), encodeURIComponent(String(routeFormat)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (itemId !== undefined) {
                        localVarQueryParameter['itemId'] = itemId;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (index !== undefined) {
                        localVarQueryParameter['index'] = index;
                    }
                    if (startPositionTicks !== undefined) {
                        localVarQueryParameter['startPositionTicks'] = startPositionTicks;
                    }
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (endPositionTicks !== undefined) {
                        localVarQueryParameter['endPositionTicks'] = endPositionTicks;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (addVttTimeMap !== undefined) {
                        localVarQueryParameter['addVttTimeMap'] = addVttTimeMap;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteSubtitles: function (itemId, language, isPerfectMatch, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('searchRemoteSubtitles', 'itemId', itemId);
                            // verify required parameter 'language' is not null or undefined
                            (0, common_1.assertParamExists)('searchRemoteSubtitles', 'language', language);
                            localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{language}"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                                .replace("{".concat("language", "}"), encodeURIComponent(String(language)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (isPerfectMatch !== undefined) {
                                localVarQueryParameter['isPerfectMatch'] = isPerfectMatch;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UploadSubtitleDto} uploadSubtitleDto The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSubtitle: function (itemId, uploadSubtitleDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('uploadSubtitle', 'itemId', itemId);
                            // verify required parameter 'uploadSubtitleDto' is not null or undefined
                            (0, common_1.assertParamExists)('uploadSubtitle', 'uploadSubtitleDto', uploadSubtitleDto);
                            localVarPath = "/Videos/{itemId}/Subtitles"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(uploadSubtitleDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SubtitleApiAxiosParamCreator = SubtitleApiAxiosParamCreator;
/**
 * SubtitleApi - functional programming interface
 * @export
 */
var SubtitleApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SubtitleApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtitle: function (itemId, index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubtitle(itemId, index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteSubtitles: function (itemId, subtitleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.downloadRemoteSubtitles(itemId, subtitleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFont: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFallbackFont(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFontList: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFallbackFontList(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteSubtitles: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRemoteSubtitles(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitle: function (routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSubtitle(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitlePlaylist: function (itemId, index, mediaSourceId, segmentLength, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {number} routeStartPositionTicks The (route) start position of the subtitle in ticks.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitleWithTicks: function (routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSubtitleWithTicks(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteSubtitles: function (itemId, language, isPerfectMatch, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchRemoteSubtitles(itemId, language, isPerfectMatch, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UploadSubtitleDto} uploadSubtitleDto The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSubtitle: function (itemId, uploadSubtitleDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uploadSubtitle(itemId, uploadSubtitleDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SubtitleApiFp = SubtitleApiFp;
/**
 * SubtitleApi - factory interface
 * @export
 */
var SubtitleApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SubtitleApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtitle: function (itemId, index, options) {
            return localVarFp.deleteSubtitle(itemId, index, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteSubtitles: function (itemId, subtitleId, options) {
            return localVarFp.downloadRemoteSubtitles(itemId, subtitleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFont: function (name, options) {
            return localVarFp.getFallbackFont(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFontList: function (options) {
            return localVarFp.getFallbackFontList(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteSubtitles: function (id, options) {
            return localVarFp.getRemoteSubtitles(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitle: function (routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options) {
            return localVarFp.getSubtitle(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitlePlaylist: function (itemId, index, mediaSourceId, segmentLength, options) {
            return localVarFp.getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets subtitles in a specified format.
         * @param {string} routeItemId The (route) item id.
         * @param {string} routeMediaSourceId The (route) media source id.
         * @param {number} routeIndex The (route) subtitle stream index.
         * @param {number} routeStartPositionTicks The (route) start position of the subtitle in ticks.
         * @param {string} routeFormat The (route) format of the returned subtitle.
         * @param {string} [itemId] The item id.
         * @param {string} [mediaSourceId] The media source id.
         * @param {number} [index] The subtitle stream index.
         * @param {number} [startPositionTicks] The start position of the subtitle in ticks.
         * @param {string} [format] The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitleWithTicks: function (routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options) {
            return localVarFp.getSubtitleWithTicks(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteSubtitles: function (itemId, language, isPerfectMatch, options) {
            return localVarFp.searchRemoteSubtitles(itemId, language, isPerfectMatch, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UploadSubtitleDto} uploadSubtitleDto The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSubtitle: function (itemId, uploadSubtitleDto, options) {
            return localVarFp.uploadSubtitle(itemId, uploadSubtitleDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SubtitleApiFactory = SubtitleApiFactory;
/**
 * SubtitleApi - object-oriented interface
 * @export
 * @class SubtitleApi
 * @extends {BaseAPI}
 */
var SubtitleApi = /** @class */ (function (_super) {
    __extends(SubtitleApi, _super);
    function SubtitleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Deletes an external subtitle file.
     * @param {SubtitleApiDeleteSubtitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.deleteSubtitle = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).deleteSubtitle(requestParameters.itemId, requestParameters.index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Downloads a remote subtitle.
     * @param {SubtitleApiDownloadRemoteSubtitlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.downloadRemoteSubtitles = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).downloadRemoteSubtitles(requestParameters.itemId, requestParameters.subtitleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a fallback font file.
     * @param {SubtitleApiGetFallbackFontRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getFallbackFont = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getFallbackFont(requestParameters.name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of available fallback font files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getFallbackFontList = function (options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getFallbackFontList(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the remote subtitles.
     * @param {SubtitleApiGetRemoteSubtitlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getRemoteSubtitles = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getRemoteSubtitles(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets subtitles in a specified format.
     * @param {SubtitleApiGetSubtitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getSubtitle = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getSubtitle(requestParameters.routeItemId, requestParameters.routeMediaSourceId, requestParameters.routeIndex, requestParameters.routeFormat, requestParameters.itemId, requestParameters.mediaSourceId, requestParameters.index, requestParameters.format, requestParameters.endPositionTicks, requestParameters.copyTimestamps, requestParameters.addVttTimeMap, requestParameters.startPositionTicks, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an HLS subtitle playlist.
     * @param {SubtitleApiGetSubtitlePlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getSubtitlePlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getSubtitlePlaylist(requestParameters.itemId, requestParameters.index, requestParameters.mediaSourceId, requestParameters.segmentLength, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets subtitles in a specified format.
     * @param {SubtitleApiGetSubtitleWithTicksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.getSubtitleWithTicks = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).getSubtitleWithTicks(requestParameters.routeItemId, requestParameters.routeMediaSourceId, requestParameters.routeIndex, requestParameters.routeStartPositionTicks, requestParameters.routeFormat, requestParameters.itemId, requestParameters.mediaSourceId, requestParameters.index, requestParameters.startPositionTicks, requestParameters.format, requestParameters.endPositionTicks, requestParameters.copyTimestamps, requestParameters.addVttTimeMap, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Search remote subtitles.
     * @param {SubtitleApiSearchRemoteSubtitlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.searchRemoteSubtitles = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).searchRemoteSubtitles(requestParameters.itemId, requestParameters.language, requestParameters.isPerfectMatch, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Upload an external subtitle file.
     * @param {SubtitleApiUploadSubtitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    SubtitleApi.prototype.uploadSubtitle = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SubtitleApiFp)(this.configuration).uploadSubtitle(requestParameters.itemId, requestParameters.uploadSubtitleDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubtitleApi;
}(base_1.BaseAPI));
exports.SubtitleApi = SubtitleApi;

},{"../base":68,"../common":69,"axios":362}],54:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuggestionsApi = exports.SuggestionsApiFactory = exports.SuggestionsApiFp = exports.SuggestionsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SuggestionsApi - axios parameter creator
 * @export
 */
var SuggestionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets suggestions.
         * @param {string} userId The user id.
         * @param {Array<string>} [mediaType] The media types.
         * @param {Array<string>} [type] The type.
         * @param {number} [startIndex] Optional. The start index.
         * @param {number} [limit] Optional. The limit.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestions: function (userId, mediaType, type, startIndex, limit, enableTotalRecordCount, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getSuggestions', 'userId', userId);
                            localVarPath = "/Users/{userId}/Suggestions"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (mediaType) {
                                localVarQueryParameter['mediaType'] = mediaType;
                            }
                            if (type) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SuggestionsApiAxiosParamCreator = SuggestionsApiAxiosParamCreator;
/**
 * SuggestionsApi - functional programming interface
 * @export
 */
var SuggestionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SuggestionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets suggestions.
         * @param {string} userId The user id.
         * @param {Array<string>} [mediaType] The media types.
         * @param {Array<string>} [type] The type.
         * @param {number} [startIndex] Optional. The start index.
         * @param {number} [limit] Optional. The limit.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestions: function (userId, mediaType, type, startIndex, limit, enableTotalRecordCount, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSuggestions(userId, mediaType, type, startIndex, limit, enableTotalRecordCount, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SuggestionsApiFp = SuggestionsApiFp;
/**
 * SuggestionsApi - factory interface
 * @export
 */
var SuggestionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SuggestionsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets suggestions.
         * @param {string} userId The user id.
         * @param {Array<string>} [mediaType] The media types.
         * @param {Array<string>} [type] The type.
         * @param {number} [startIndex] Optional. The start index.
         * @param {number} [limit] Optional. The limit.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total record count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestions: function (userId, mediaType, type, startIndex, limit, enableTotalRecordCount, options) {
            return localVarFp.getSuggestions(userId, mediaType, type, startIndex, limit, enableTotalRecordCount, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SuggestionsApiFactory = SuggestionsApiFactory;
/**
 * SuggestionsApi - object-oriented interface
 * @export
 * @class SuggestionsApi
 * @extends {BaseAPI}
 */
var SuggestionsApi = /** @class */ (function (_super) {
    __extends(SuggestionsApi, _super);
    function SuggestionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets suggestions.
     * @param {SuggestionsApiGetSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionsApi
     */
    SuggestionsApi.prototype.getSuggestions = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SuggestionsApiFp)(this.configuration).getSuggestions(requestParameters.userId, requestParameters.mediaType, requestParameters.type, requestParameters.startIndex, requestParameters.limit, requestParameters.enableTotalRecordCount, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SuggestionsApi;
}(base_1.BaseAPI));
exports.SuggestionsApi = SuggestionsApi;

},{"../base":68,"../common":69,"axios":362}],55:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncPlayApi = exports.SyncPlayApiFactory = exports.SyncPlayApiFp = exports.SyncPlayApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SyncPlayApi - axios parameter creator
 * @export
 */
var SyncPlayApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Notify SyncPlay group that member is buffering.
         * @param {BufferRequestDto} bufferRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering: function (bufferRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'bufferRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayBuffering', 'bufferRequestDto', bufferRequestDto);
                            localVarPath = "/SyncPlay/Buffering";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bufferRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a new SyncPlay group.
         * @param {NewGroupRequestDto} newGroupRequestDto The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup: function (newGroupRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'newGroupRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayCreateGroup', 'newGroupRequestDto', newGroupRequestDto);
                            localVarPath = "/SyncPlay/New";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(newGroupRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/SyncPlay/List";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Join an existing SyncPlay group.
         * @param {JoinGroupRequestDto} joinGroupRequestDto The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup: function (joinGroupRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'joinGroupRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayJoinGroup', 'joinGroupRequestDto', joinGroupRequestDto);
                            localVarPath = "/SyncPlay/Join";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(joinGroupRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/SyncPlay/Leave";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem: function (movePlaylistItemRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'movePlaylistItemRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayMovePlaylistItem', 'movePlaylistItemRequestDto', movePlaylistItemRequestDto);
                            localVarPath = "/SyncPlay/MovePlaylistItem";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(movePlaylistItemRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request next item in SyncPlay group.
         * @param {NextItemRequestDto} nextItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem: function (nextItemRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nextItemRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayNextItem', 'nextItemRequestDto', nextItemRequestDto);
                            localVarPath = "/SyncPlay/NextItem";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nextItemRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/SyncPlay/Pause";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update session ping.
         * @param {PingRequestDto} pingRequestDto The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing: function (pingRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pingRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayPing', 'pingRequestDto', pingRequestDto);
                            localVarPath = "/SyncPlay/Ping";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pingRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request previous item in SyncPlay group.
         * @param {PreviousItemRequestDto} previousItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem: function (previousItemRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'previousItemRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayPreviousItem', 'previousItemRequestDto', previousItemRequestDto);
                            localVarPath = "/SyncPlay/PreviousItem";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(previousItemRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {QueueRequestDto} queueRequestDto The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue: function (queueRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'queueRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayQueue', 'queueRequestDto', queueRequestDto);
                            localVarPath = "/SyncPlay/Queue";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queueRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {ReadyRequestDto} readyRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady: function (readyRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'readyRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayReady', 'readyRequestDto', readyRequestDto);
                            localVarPath = "/SyncPlay/Ready";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(readyRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist: function (removeFromPlaylistRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'removeFromPlaylistRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlayRemoveFromPlaylist', 'removeFromPlaylistRequestDto', removeFromPlaylistRequestDto);
                            localVarPath = "/SyncPlay/RemoveFromPlaylist";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(removeFromPlaylistRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request seek in SyncPlay group.
         * @param {SeekRequestDto} seekRequestDto The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek: function (seekRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'seekRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySeek', 'seekRequestDto', seekRequestDto);
                            localVarPath = "/SyncPlay/Seek";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(seekRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait: function (ignoreWaitRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'ignoreWaitRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySetIgnoreWait', 'ignoreWaitRequestDto', ignoreWaitRequestDto);
                            localVarPath = "/SyncPlay/SetIgnoreWait";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ignoreWaitRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set new playlist in SyncPlay group.
         * @param {PlayRequestDto} playRequestDto The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue: function (playRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySetNewQueue', 'playRequestDto', playRequestDto);
                            localVarPath = "/SyncPlay/SetNewQueue";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(playRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem: function (setPlaylistItemRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'setPlaylistItemRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySetPlaylistItem', 'setPlaylistItemRequestDto', setPlaylistItemRequestDto);
                            localVarPath = "/SyncPlay/SetPlaylistItem";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setPlaylistItemRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode: function (setRepeatModeRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'setRepeatModeRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySetRepeatMode', 'setRepeatModeRequestDto', setRepeatModeRequestDto);
                            localVarPath = "/SyncPlay/SetRepeatMode";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setRepeatModeRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode: function (setShuffleModeRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'setShuffleModeRequestDto' is not null or undefined
                            (0, common_1.assertParamExists)('syncPlaySetShuffleMode', 'setShuffleModeRequestDto', setShuffleModeRequestDto);
                            localVarPath = "/SyncPlay/SetShuffleMode";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setShuffleModeRequestDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/SyncPlay/Stop";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/SyncPlay/Unpause";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SyncPlayApiAxiosParamCreator = SyncPlayApiAxiosParamCreator;
/**
 * SyncPlayApi - functional programming interface
 * @export
 */
var SyncPlayApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SyncPlayApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Notify SyncPlay group that member is buffering.
         * @param {BufferRequestDto} bufferRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering: function (bufferRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayBuffering(bufferRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a new SyncPlay group.
         * @param {NewGroupRequestDto} newGroupRequestDto The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup: function (newGroupRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayCreateGroup(newGroupRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayGetGroups(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Join an existing SyncPlay group.
         * @param {JoinGroupRequestDto} joinGroupRequestDto The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup: function (joinGroupRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayJoinGroup(joinGroupRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayLeaveGroup(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem: function (movePlaylistItemRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayMovePlaylistItem(movePlaylistItemRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request next item in SyncPlay group.
         * @param {NextItemRequestDto} nextItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem: function (nextItemRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayNextItem(nextItemRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayPause(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update session ping.
         * @param {PingRequestDto} pingRequestDto The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing: function (pingRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayPing(pingRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request previous item in SyncPlay group.
         * @param {PreviousItemRequestDto} previousItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem: function (previousItemRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayPreviousItem(previousItemRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {QueueRequestDto} queueRequestDto The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue: function (queueRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayQueue(queueRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {ReadyRequestDto} readyRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady: function (readyRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayReady(readyRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist: function (removeFromPlaylistRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request seek in SyncPlay group.
         * @param {SeekRequestDto} seekRequestDto The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek: function (seekRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySeek(seekRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait: function (ignoreWaitRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySetIgnoreWait(ignoreWaitRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set new playlist in SyncPlay group.
         * @param {PlayRequestDto} playRequestDto The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue: function (playRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySetNewQueue(playRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem: function (setPlaylistItemRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySetPlaylistItem(setPlaylistItemRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode: function (setRepeatModeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySetRepeatMode(setRepeatModeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode: function (setShuffleModeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlaySetShuffleMode(setShuffleModeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayStop(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncPlayUnpause(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SyncPlayApiFp = SyncPlayApiFp;
/**
 * SyncPlayApi - factory interface
 * @export
 */
var SyncPlayApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SyncPlayApiFp)(configuration);
    return {
        /**
         *
         * @summary Notify SyncPlay group that member is buffering.
         * @param {BufferRequestDto} bufferRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering: function (bufferRequestDto, options) {
            return localVarFp.syncPlayBuffering(bufferRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create a new SyncPlay group.
         * @param {NewGroupRequestDto} newGroupRequestDto The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup: function (newGroupRequestDto, options) {
            return localVarFp.syncPlayCreateGroup(newGroupRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups: function (options) {
            return localVarFp.syncPlayGetGroups(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Join an existing SyncPlay group.
         * @param {JoinGroupRequestDto} joinGroupRequestDto The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup: function (joinGroupRequestDto, options) {
            return localVarFp.syncPlayJoinGroup(joinGroupRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup: function (options) {
            return localVarFp.syncPlayLeaveGroup(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem: function (movePlaylistItemRequestDto, options) {
            return localVarFp.syncPlayMovePlaylistItem(movePlaylistItemRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request next item in SyncPlay group.
         * @param {NextItemRequestDto} nextItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem: function (nextItemRequestDto, options) {
            return localVarFp.syncPlayNextItem(nextItemRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause: function (options) {
            return localVarFp.syncPlayPause(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update session ping.
         * @param {PingRequestDto} pingRequestDto The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing: function (pingRequestDto, options) {
            return localVarFp.syncPlayPing(pingRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request previous item in SyncPlay group.
         * @param {PreviousItemRequestDto} previousItemRequestDto The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem: function (previousItemRequestDto, options) {
            return localVarFp.syncPlayPreviousItem(previousItemRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {QueueRequestDto} queueRequestDto The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue: function (queueRequestDto, options) {
            return localVarFp.syncPlayQueue(queueRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {ReadyRequestDto} readyRequestDto The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady: function (readyRequestDto, options) {
            return localVarFp.syncPlayReady(readyRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist: function (removeFromPlaylistRequestDto, options) {
            return localVarFp.syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request seek in SyncPlay group.
         * @param {SeekRequestDto} seekRequestDto The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek: function (seekRequestDto, options) {
            return localVarFp.syncPlaySeek(seekRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait: function (ignoreWaitRequestDto, options) {
            return localVarFp.syncPlaySetIgnoreWait(ignoreWaitRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to set new playlist in SyncPlay group.
         * @param {PlayRequestDto} playRequestDto The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue: function (playRequestDto, options) {
            return localVarFp.syncPlaySetNewQueue(playRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to change playlist item in SyncPlay group.
         * @param {SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem: function (setPlaylistItemRequestDto, options) {
            return localVarFp.syncPlaySetPlaylistItem(setPlaylistItemRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode: function (setRepeatModeRequestDto, options) {
            return localVarFp.syncPlaySetRepeatMode(setRepeatModeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode: function (setShuffleModeRequestDto, options) {
            return localVarFp.syncPlaySetShuffleMode(setShuffleModeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop: function (options) {
            return localVarFp.syncPlayStop(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause: function (options) {
            return localVarFp.syncPlayUnpause(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SyncPlayApiFactory = SyncPlayApiFactory;
/**
 * SyncPlayApi - object-oriented interface
 * @export
 * @class SyncPlayApi
 * @extends {BaseAPI}
 */
var SyncPlayApi = /** @class */ (function (_super) {
    __extends(SyncPlayApi, _super);
    function SyncPlayApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Notify SyncPlay group that member is buffering.
     * @param {SyncPlayApiSyncPlayBufferingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayBuffering = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayBuffering(requestParameters.bufferRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create a new SyncPlay group.
     * @param {SyncPlayApiSyncPlayCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayCreateGroup = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayCreateGroup(requestParameters.newGroupRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all SyncPlay groups.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayGetGroups = function (options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayGetGroups(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Join an existing SyncPlay group.
     * @param {SyncPlayApiSyncPlayJoinGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayJoinGroup = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayJoinGroup(requestParameters.joinGroupRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Leave the joined SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayLeaveGroup = function (options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayLeaveGroup(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to move an item in the playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlayMovePlaylistItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayMovePlaylistItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayMovePlaylistItem(requestParameters.movePlaylistItemRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request next item in SyncPlay group.
     * @param {SyncPlayApiSyncPlayNextItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayNextItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayNextItem(requestParameters.nextItemRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request pause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayPause = function (options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayPause(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update session ping.
     * @param {SyncPlayApiSyncPlayPingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayPing = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayPing(requestParameters.pingRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request previous item in SyncPlay group.
     * @param {SyncPlayApiSyncPlayPreviousItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayPreviousItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayPreviousItem(requestParameters.previousItemRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to queue items to the playlist of a SyncPlay group.
     * @param {SyncPlayApiSyncPlayQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayQueue = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayQueue(requestParameters.queueRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Notify SyncPlay group that member is ready for playback.
     * @param {SyncPlayApiSyncPlayReadyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayReady = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayReady(requestParameters.readyRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to remove items from the playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlayRemoveFromPlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayRemoveFromPlaylist = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayRemoveFromPlaylist(requestParameters.removeFromPlaylistRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request seek in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySeekRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySeek = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySeek(requestParameters.seekRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request SyncPlay group to ignore member during group-wait.
     * @param {SyncPlayApiSyncPlaySetIgnoreWaitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySetIgnoreWait = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySetIgnoreWait(requestParameters.ignoreWaitRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to set new playlist in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetNewQueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySetNewQueue = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySetNewQueue(requestParameters.playRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to change playlist item in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetPlaylistItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySetPlaylistItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySetPlaylistItem(requestParameters.setPlaylistItemRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to set repeat mode in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetRepeatModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySetRepeatMode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySetRepeatMode(requestParameters.setRepeatModeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request to set shuffle mode in SyncPlay group.
     * @param {SyncPlayApiSyncPlaySetShuffleModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlaySetShuffleMode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlaySetShuffleMode(requestParameters.setShuffleModeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request stop in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayStop = function (options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayStop(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Request unpause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    SyncPlayApi.prototype.syncPlayUnpause = function (options) {
        var _this = this;
        return (0, exports.SyncPlayApiFp)(this.configuration).syncPlayUnpause(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SyncPlayApi;
}(base_1.BaseAPI));
exports.SyncPlayApi = SyncPlayApi;

},{"../base":68,"../common":69,"axios":362}],56:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemApi = exports.SystemApiFactory = exports.SystemApiFp = exports.SystemApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * SystemApi - axios parameter creator
 * @export
 */
var SystemApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets information about the request endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Endpoint";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a log file.
         * @param {string} name The name of the log file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogFile: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getLogFile', 'name', name);
                            localVarPath = "/System/Logs/Log";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPingSystem: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/System/Ping";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets public information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSystemInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/System/Info/Public";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a list of available server log files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerLogs: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Info";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets wake on lan information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWakeOnLanInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/WakeOnLanInfo";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPingSystem: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/System/Ping";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Restarts the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartApplication: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Restart";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Shuts down the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shutdownApplication: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/System/Shutdown";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemApiAxiosParamCreator = SystemApiAxiosParamCreator;
/**
 * SystemApi - functional programming interface
 * @export
 */
var SystemApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets information about the request endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEndpointInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a log file.
         * @param {string} name The name of the log file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogFile: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLogFile(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPingSystem: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPingSystem(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets public information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSystemInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPublicSystemInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of available server log files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerLogs: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getServerLogs(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets wake on lan information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWakeOnLanInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWakeOnLanInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPingSystem: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postPingSystem(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Restarts the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartApplication: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.restartApplication(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Shuts down the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shutdownApplication: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.shutdownApplication(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SystemApiFp = SystemApiFp;
/**
 * SystemApi - factory interface
 * @export
 */
var SystemApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets information about the request endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfo: function (options) {
            return localVarFp.getEndpointInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a log file.
         * @param {string} name The name of the log file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogFile: function (name, options) {
            return localVarFp.getLogFile(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPingSystem: function (options) {
            return localVarFp.getPingSystem(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets public information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSystemInfo: function (options) {
            return localVarFp.getPublicSystemInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of available server log files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerLogs: function (options) {
            return localVarFp.getServerLogs(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets information about the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo: function (options) {
            return localVarFp.getSystemInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets wake on lan information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWakeOnLanInfo: function (options) {
            return localVarFp.getWakeOnLanInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pings the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPingSystem: function (options) {
            return localVarFp.postPingSystem(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Restarts the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartApplication: function (options) {
            return localVarFp.restartApplication(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Shuts down the application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shutdownApplication: function (options) {
            return localVarFp.shutdownApplication(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemApiFactory = SystemApiFactory;
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
var SystemApi = /** @class */ (function (_super) {
    __extends(SystemApi, _super);
    function SystemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets information about the request endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getEndpointInfo = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getEndpointInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a log file.
     * @param {SystemApiGetLogFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getLogFile = function (requestParameters, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getLogFile(requestParameters.name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pings the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getPingSystem = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getPingSystem(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets public information about the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getPublicSystemInfo = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getPublicSystemInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of available server log files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getServerLogs = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getServerLogs(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets information about the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getSystemInfo = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getSystemInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets wake on lan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.getWakeOnLanInfo = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).getWakeOnLanInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pings the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.postPingSystem = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).postPingSystem(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Restarts the application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.restartApplication = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).restartApplication(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Shuts down the application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.shutdownApplication = function (options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).shutdownApplication(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemApi;
}(base_1.BaseAPI));
exports.SystemApi = SystemApi;

},{"../base":68,"../common":69,"axios":362}],57:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSyncApi = exports.TimeSyncApiFactory = exports.TimeSyncApiFp = exports.TimeSyncApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * TimeSyncApi - axios parameter creator
 * @export
 */
var TimeSyncApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets the current UTC time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtcTime: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/GetUtcTime";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TimeSyncApiAxiosParamCreator = TimeSyncApiAxiosParamCreator;
/**
 * TimeSyncApi - functional programming interface
 * @export
 */
var TimeSyncApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TimeSyncApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets the current UTC time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtcTime: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUtcTime(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TimeSyncApiFp = TimeSyncApiFp;
/**
 * TimeSyncApi - factory interface
 * @export
 */
var TimeSyncApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TimeSyncApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets the current UTC time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtcTime: function (options) {
            return localVarFp.getUtcTime(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TimeSyncApiFactory = TimeSyncApiFactory;
/**
 * TimeSyncApi - object-oriented interface
 * @export
 * @class TimeSyncApi
 * @extends {BaseAPI}
 */
var TimeSyncApi = /** @class */ (function (_super) {
    __extends(TimeSyncApi, _super);
    function TimeSyncApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets the current UTC time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSyncApi
     */
    TimeSyncApi.prototype.getUtcTime = function (options) {
        var _this = this;
        return (0, exports.TimeSyncApiFp)(this.configuration).getUtcTime(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TimeSyncApi;
}(base_1.BaseAPI));
exports.TimeSyncApi = TimeSyncApi;

},{"../base":68,"../common":69,"axios":362}],58:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrailersApi = exports.TrailersApiFactory = exports.TrailersApiFp = exports.TrailersApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * TrailersApi - axios parameter creator
 * @export
 */
var TrailersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Trailers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (maxOfficialRating !== undefined) {
                                localVarQueryParameter['maxOfficialRating'] = maxOfficialRating;
                            }
                            if (hasThemeSong !== undefined) {
                                localVarQueryParameter['hasThemeSong'] = hasThemeSong;
                            }
                            if (hasThemeVideo !== undefined) {
                                localVarQueryParameter['hasThemeVideo'] = hasThemeVideo;
                            }
                            if (hasSubtitles !== undefined) {
                                localVarQueryParameter['hasSubtitles'] = hasSubtitles;
                            }
                            if (hasSpecialFeature !== undefined) {
                                localVarQueryParameter['hasSpecialFeature'] = hasSpecialFeature;
                            }
                            if (hasTrailer !== undefined) {
                                localVarQueryParameter['hasTrailer'] = hasTrailer;
                            }
                            if (adjacentTo !== undefined) {
                                localVarQueryParameter['adjacentTo'] = adjacentTo;
                            }
                            if (parentIndexNumber !== undefined) {
                                localVarQueryParameter['parentIndexNumber'] = parentIndexNumber;
                            }
                            if (hasParentalRating !== undefined) {
                                localVarQueryParameter['hasParentalRating'] = hasParentalRating;
                            }
                            if (isHd !== undefined) {
                                localVarQueryParameter['isHd'] = isHd;
                            }
                            if (is4K !== undefined) {
                                localVarQueryParameter['is4K'] = is4K;
                            }
                            if (locationTypes) {
                                localVarQueryParameter['locationTypes'] = locationTypes;
                            }
                            if (excludeLocationTypes) {
                                localVarQueryParameter['excludeLocationTypes'] = excludeLocationTypes;
                            }
                            if (isMissing !== undefined) {
                                localVarQueryParameter['isMissing'] = isMissing;
                            }
                            if (isUnaired !== undefined) {
                                localVarQueryParameter['isUnaired'] = isUnaired;
                            }
                            if (minCommunityRating !== undefined) {
                                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
                            }
                            if (minCriticRating !== undefined) {
                                localVarQueryParameter['minCriticRating'] = minCriticRating;
                            }
                            if (minPremiereDate !== undefined) {
                                localVarQueryParameter['minPremiereDate'] = (minPremiereDate instanceof Date) ?
                                    minPremiereDate.toISOString() :
                                    minPremiereDate;
                            }
                            if (minDateLastSaved !== undefined) {
                                localVarQueryParameter['minDateLastSaved'] = (minDateLastSaved instanceof Date) ?
                                    minDateLastSaved.toISOString() :
                                    minDateLastSaved;
                            }
                            if (minDateLastSavedForUser !== undefined) {
                                localVarQueryParameter['minDateLastSavedForUser'] = (minDateLastSavedForUser instanceof Date) ?
                                    minDateLastSavedForUser.toISOString() :
                                    minDateLastSavedForUser;
                            }
                            if (maxPremiereDate !== undefined) {
                                localVarQueryParameter['maxPremiereDate'] = (maxPremiereDate instanceof Date) ?
                                    maxPremiereDate.toISOString() :
                                    maxPremiereDate;
                            }
                            if (hasOverview !== undefined) {
                                localVarQueryParameter['hasOverview'] = hasOverview;
                            }
                            if (hasImdbId !== undefined) {
                                localVarQueryParameter['hasImdbId'] = hasImdbId;
                            }
                            if (hasTmdbId !== undefined) {
                                localVarQueryParameter['hasTmdbId'] = hasTmdbId;
                            }
                            if (hasTvdbId !== undefined) {
                                localVarQueryParameter['hasTvdbId'] = hasTvdbId;
                            }
                            if (excludeItemIds) {
                                localVarQueryParameter['excludeItemIds'] = excludeItemIds;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (recursive !== undefined) {
                                localVarQueryParameter['recursive'] = recursive;
                            }
                            if (searchTerm !== undefined) {
                                localVarQueryParameter['searchTerm'] = searchTerm;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (filters) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (isFavorite !== undefined) {
                                localVarQueryParameter['isFavorite'] = isFavorite;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (imageTypes) {
                                localVarQueryParameter['imageTypes'] = imageTypes;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (isPlayed !== undefined) {
                                localVarQueryParameter['isPlayed'] = isPlayed;
                            }
                            if (genres) {
                                localVarQueryParameter['genres'] = genres;
                            }
                            if (officialRatings) {
                                localVarQueryParameter['officialRatings'] = officialRatings;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags;
                            }
                            if (years) {
                                localVarQueryParameter['years'] = years;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (person !== undefined) {
                                localVarQueryParameter['person'] = person;
                            }
                            if (personIds) {
                                localVarQueryParameter['personIds'] = personIds;
                            }
                            if (personTypes) {
                                localVarQueryParameter['personTypes'] = personTypes;
                            }
                            if (studios) {
                                localVarQueryParameter['studios'] = studios;
                            }
                            if (artists) {
                                localVarQueryParameter['artists'] = artists;
                            }
                            if (excludeArtistIds) {
                                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
                            }
                            if (artistIds) {
                                localVarQueryParameter['artistIds'] = artistIds;
                            }
                            if (albumArtistIds) {
                                localVarQueryParameter['albumArtistIds'] = albumArtistIds;
                            }
                            if (contributingArtistIds) {
                                localVarQueryParameter['contributingArtistIds'] = contributingArtistIds;
                            }
                            if (albums) {
                                localVarQueryParameter['albums'] = albums;
                            }
                            if (albumIds) {
                                localVarQueryParameter['albumIds'] = albumIds;
                            }
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            if (videoTypes) {
                                localVarQueryParameter['videoTypes'] = videoTypes;
                            }
                            if (minOfficialRating !== undefined) {
                                localVarQueryParameter['minOfficialRating'] = minOfficialRating;
                            }
                            if (isLocked !== undefined) {
                                localVarQueryParameter['isLocked'] = isLocked;
                            }
                            if (isPlaceHolder !== undefined) {
                                localVarQueryParameter['isPlaceHolder'] = isPlaceHolder;
                            }
                            if (hasOfficialRating !== undefined) {
                                localVarQueryParameter['hasOfficialRating'] = hasOfficialRating;
                            }
                            if (collapseBoxSetItems !== undefined) {
                                localVarQueryParameter['collapseBoxSetItems'] = collapseBoxSetItems;
                            }
                            if (minWidth !== undefined) {
                                localVarQueryParameter['minWidth'] = minWidth;
                            }
                            if (minHeight !== undefined) {
                                localVarQueryParameter['minHeight'] = minHeight;
                            }
                            if (maxWidth !== undefined) {
                                localVarQueryParameter['maxWidth'] = maxWidth;
                            }
                            if (maxHeight !== undefined) {
                                localVarQueryParameter['maxHeight'] = maxHeight;
                            }
                            if (is3D !== undefined) {
                                localVarQueryParameter['is3D'] = is3D;
                            }
                            if (seriesStatus) {
                                localVarQueryParameter['seriesStatus'] = seriesStatus;
                            }
                            if (nameStartsWithOrGreater !== undefined) {
                                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
                            }
                            if (nameStartsWith !== undefined) {
                                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
                            }
                            if (nameLessThan !== undefined) {
                                localVarQueryParameter['nameLessThan'] = nameLessThan;
                            }
                            if (studioIds) {
                                localVarQueryParameter['studioIds'] = studioIds;
                            }
                            if (genreIds) {
                                localVarQueryParameter['genreIds'] = genreIds;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TrailersApiAxiosParamCreator = TrailersApiAxiosParamCreator;
/**
 * TrailersApi - functional programming interface
 * @export
 */
var TrailersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TrailersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTrailers(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TrailersApiFp = TrailersApiFp;
/**
 * TrailersApi - factory interface
 * @export
 */
var TrailersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TrailersApiFp)(configuration);
    return {
        /**
         *
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {Array<LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
         * @param {Array<LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {Array<string>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {Array<ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {Array<string>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {Array<string>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
         * @param {Array<string>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
         * @param {Array<string>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
         * @param {Array<number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {Array<string>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {Array<string>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {Array<string>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
         * @param {Array<string>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
         * @param {Array<string>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
         * @param {Array<string>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {Array<string>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {Array<string>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {Array<string>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
         * @param {Array<string>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
         * @param {Array<string>} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {Array<VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {Array<SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {Array<string>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
         * @param {Array<string>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers: function (userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options) {
            return localVarFp.getTrailers(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TrailersApiFactory = TrailersApiFactory;
/**
 * TrailersApi - object-oriented interface
 * @export
 * @class TrailersApi
 * @extends {BaseAPI}
 */
var TrailersApi = /** @class */ (function (_super) {
    __extends(TrailersApi, _super);
    function TrailersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Finds movies and trailers similar to a given trailer.
     * @param {TrailersApiGetTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailersApi
     */
    TrailersApi.prototype.getTrailers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TrailersApiFp)(this.configuration).getTrailers(requestParameters.userId, requestParameters.maxOfficialRating, requestParameters.hasThemeSong, requestParameters.hasThemeVideo, requestParameters.hasSubtitles, requestParameters.hasSpecialFeature, requestParameters.hasTrailer, requestParameters.adjacentTo, requestParameters.parentIndexNumber, requestParameters.hasParentalRating, requestParameters.isHd, requestParameters.is4K, requestParameters.locationTypes, requestParameters.excludeLocationTypes, requestParameters.isMissing, requestParameters.isUnaired, requestParameters.minCommunityRating, requestParameters.minCriticRating, requestParameters.minPremiereDate, requestParameters.minDateLastSaved, requestParameters.minDateLastSavedForUser, requestParameters.maxPremiereDate, requestParameters.hasOverview, requestParameters.hasImdbId, requestParameters.hasTmdbId, requestParameters.hasTvdbId, requestParameters.excludeItemIds, requestParameters.startIndex, requestParameters.limit, requestParameters.recursive, requestParameters.searchTerm, requestParameters.sortOrder, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.imageTypes, requestParameters.sortBy, requestParameters.isPlayed, requestParameters.genres, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.artists, requestParameters.excludeArtistIds, requestParameters.artistIds, requestParameters.albumArtistIds, requestParameters.contributingArtistIds, requestParameters.albums, requestParameters.albumIds, requestParameters.ids, requestParameters.videoTypes, requestParameters.minOfficialRating, requestParameters.isLocked, requestParameters.isPlaceHolder, requestParameters.hasOfficialRating, requestParameters.collapseBoxSetItems, requestParameters.minWidth, requestParameters.minHeight, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.is3D, requestParameters.seriesStatus, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.studioIds, requestParameters.genreIds, requestParameters.enableTotalRecordCount, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TrailersApi;
}(base_1.BaseAPI));
exports.TrailersApi = TrailersApi;

},{"../base":68,"../common":69,"axios":362}],59:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TvShowsApi = exports.TvShowsApiFactory = exports.TvShowsApiFp = exports.TvShowsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * TvShowsApi - axios parameter creator
 * @export
 */
var TvShowsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets episodes for a tv season.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {number} [season] Optional filter by season number.
         * @param {string} [seasonId] Optional. Filter by season id.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {string} [startItemId] Optional. Skip through the list until a given item is found.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes: function (seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'seriesId' is not null or undefined
                            (0, common_1.assertParamExists)('getEpisodes', 'seriesId', seriesId);
                            localVarPath = "/Shows/{seriesId}/Episodes"
                                .replace("{".concat("seriesId", "}"), encodeURIComponent(String(seriesId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (season !== undefined) {
                                localVarQueryParameter['season'] = season;
                            }
                            if (seasonId !== undefined) {
                                localVarQueryParameter['seasonId'] = seasonId;
                            }
                            if (isMissing !== undefined) {
                                localVarQueryParameter['isMissing'] = isMissing;
                            }
                            if (adjacentTo !== undefined) {
                                localVarQueryParameter['adjacentTo'] = adjacentTo;
                            }
                            if (startItemId !== undefined) {
                                localVarQueryParameter['startItemId'] = startItemId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (sortBy !== undefined) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of next up episodes.
         * @param {string} [userId] The user id of the user to get the next up episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [seriesId] Optional. Filter by series id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total records count. Defaults to true.
         * @param {boolean} [disableFirstEpisode] Whether to disable sending the first episode in a series as next up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextUp: function (userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Shows/NextUp";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (seriesId !== undefined) {
                                localVarQueryParameter['seriesId'] = seriesId;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (enableImges !== undefined) {
                                localVarQueryParameter['enableImges'] = enableImges;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (enableTotalRecordCount !== undefined) {
                                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
                            }
                            if (disableFirstEpisode !== undefined) {
                                localVarQueryParameter['disableFirstEpisode'] = disableFirstEpisode;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets seasons for a tv series.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {boolean} [isSpecialSeason] Optional. Filter by special season.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons: function (seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'seriesId' is not null or undefined
                            (0, common_1.assertParamExists)('getSeasons', 'seriesId', seriesId);
                            localVarPath = "/Shows/{seriesId}/Seasons"
                                .replace("{".concat("seriesId", "}"), encodeURIComponent(String(seriesId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (isSpecialSeason !== undefined) {
                                localVarQueryParameter['isSpecialSeason'] = isSpecialSeason;
                            }
                            if (isMissing !== undefined) {
                                localVarQueryParameter['isMissing'] = isMissing;
                            }
                            if (adjacentTo !== undefined) {
                                localVarQueryParameter['adjacentTo'] = adjacentTo;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of upcoming episodes.
         * @param {string} [userId] The user id of the user to get the upcoming episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingEpisodes: function (userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Shows/Upcoming";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (enableImges !== undefined) {
                                localVarQueryParameter['enableImges'] = enableImges;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TvShowsApiAxiosParamCreator = TvShowsApiAxiosParamCreator;
/**
 * TvShowsApi - functional programming interface
 * @export
 */
var TvShowsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TvShowsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets episodes for a tv season.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {number} [season] Optional filter by season number.
         * @param {string} [seasonId] Optional. Filter by season id.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {string} [startItemId] Optional. Skip through the list until a given item is found.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes: function (seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEpisodes(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of next up episodes.
         * @param {string} [userId] The user id of the user to get the next up episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [seriesId] Optional. Filter by series id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total records count. Defaults to true.
         * @param {boolean} [disableFirstEpisode] Whether to disable sending the first episode in a series as next up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextUp: function (userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNextUp(userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets seasons for a tv series.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {boolean} [isSpecialSeason] Optional. Filter by special season.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons: function (seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSeasons(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of upcoming episodes.
         * @param {string} [userId] The user id of the user to get the upcoming episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingEpisodes: function (userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUpcomingEpisodes(userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TvShowsApiFp = TvShowsApiFp;
/**
 * TvShowsApi - factory interface
 * @export
 */
var TvShowsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TvShowsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets episodes for a tv season.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {number} [season] Optional filter by season number.
         * @param {string} [seasonId] Optional. Filter by season id.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {string} [startItemId] Optional. Skip through the list until a given item is found.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes: function (seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, options) {
            return localVarFp.getEpisodes(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of next up episodes.
         * @param {string} [userId] The user id of the user to get the next up episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [seriesId] Optional. Filter by series id.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {boolean} [enableTotalRecordCount] Whether to enable the total records count. Defaults to true.
         * @param {boolean} [disableFirstEpisode] Whether to disable sending the first episode in a series as next up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextUp: function (userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, options) {
            return localVarFp.getNextUp(userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets seasons for a tv series.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
         * @param {boolean} [isSpecialSeason] Optional. Filter by special season.
         * @param {boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons: function (seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
            return localVarFp.getSeasons(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of upcoming episodes.
         * @param {string} [userId] The user id of the user to get the upcoming episodes for.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {string} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {boolean} [enableImges] Optional. Include image information in output.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpcomingEpisodes: function (userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, options) {
            return localVarFp.getUpcomingEpisodes(userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TvShowsApiFactory = TvShowsApiFactory;
/**
 * TvShowsApi - object-oriented interface
 * @export
 * @class TvShowsApi
 * @extends {BaseAPI}
 */
var TvShowsApi = /** @class */ (function (_super) {
    __extends(TvShowsApi, _super);
    function TvShowsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets episodes for a tv season.
     * @param {TvShowsApiGetEpisodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowsApi
     */
    TvShowsApi.prototype.getEpisodes = function (requestParameters, options) {
        var _this = this;
        return (0, exports.TvShowsApiFp)(this.configuration).getEpisodes(requestParameters.seriesId, requestParameters.userId, requestParameters.fields, requestParameters.season, requestParameters.seasonId, requestParameters.isMissing, requestParameters.adjacentTo, requestParameters.startItemId, requestParameters.startIndex, requestParameters.limit, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, requestParameters.sortBy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of next up episodes.
     * @param {TvShowsApiGetNextUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowsApi
     */
    TvShowsApi.prototype.getNextUp = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TvShowsApiFp)(this.configuration).getNextUp(requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.fields, requestParameters.seriesId, requestParameters.parentId, requestParameters.enableImges, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, requestParameters.enableTotalRecordCount, requestParameters.disableFirstEpisode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets seasons for a tv series.
     * @param {TvShowsApiGetSeasonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowsApi
     */
    TvShowsApi.prototype.getSeasons = function (requestParameters, options) {
        var _this = this;
        return (0, exports.TvShowsApiFp)(this.configuration).getSeasons(requestParameters.seriesId, requestParameters.userId, requestParameters.fields, requestParameters.isSpecialSeason, requestParameters.isMissing, requestParameters.adjacentTo, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of upcoming episodes.
     * @param {TvShowsApiGetUpcomingEpisodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TvShowsApi
     */
    TvShowsApi.prototype.getUpcomingEpisodes = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TvShowsApiFp)(this.configuration).getUpcomingEpisodes(requestParameters.userId, requestParameters.startIndex, requestParameters.limit, requestParameters.fields, requestParameters.parentId, requestParameters.enableImges, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TvShowsApi;
}(base_1.BaseAPI));
exports.TvShowsApi = TvShowsApi;

},{"../base":68,"../common":69,"axios":362}],60:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniversalAudioApi = exports.UniversalAudioApiFactory = exports.UniversalAudioApiFp = exports.UniversalAudioApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * UniversalAudioApi - axios parameter creator
 * @export
 */
var UniversalAudioApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getUniversalAudioStream', 'itemId', itemId);
                            localVarPath = "/Audio/{itemId}/universal"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (container) {
                                localVarQueryParameter['container'] = container;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (transcodingAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingAudioChannels'] = transcodingAudioChannels;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (transcodingContainer !== undefined) {
                                localVarQueryParameter['transcodingContainer'] = transcodingContainer;
                            }
                            if (transcodingProtocol !== undefined) {
                                localVarQueryParameter['transcodingProtocol'] = transcodingProtocol;
                            }
                            if (maxAudioSampleRate !== undefined) {
                                localVarQueryParameter['maxAudioSampleRate'] = maxAudioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (enableRemoteMedia !== undefined) {
                                localVarQueryParameter['enableRemoteMedia'] = enableRemoteMedia;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (enableRedirection !== undefined) {
                                localVarQueryParameter['enableRedirection'] = enableRedirection;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('headUniversalAudioStream', 'itemId', itemId);
                            localVarPath = "/Audio/{itemId}/universal"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (container) {
                                localVarQueryParameter['container'] = container;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (transcodingAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingAudioChannels'] = transcodingAudioChannels;
                            }
                            if (maxStreamingBitrate !== undefined) {
                                localVarQueryParameter['maxStreamingBitrate'] = maxStreamingBitrate;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (transcodingContainer !== undefined) {
                                localVarQueryParameter['transcodingContainer'] = transcodingContainer;
                            }
                            if (transcodingProtocol !== undefined) {
                                localVarQueryParameter['transcodingProtocol'] = transcodingProtocol;
                            }
                            if (maxAudioSampleRate !== undefined) {
                                localVarQueryParameter['maxAudioSampleRate'] = maxAudioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (enableRemoteMedia !== undefined) {
                                localVarQueryParameter['enableRemoteMedia'] = enableRemoteMedia;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (enableRedirection !== undefined) {
                                localVarQueryParameter['enableRedirection'] = enableRedirection;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UniversalAudioApiAxiosParamCreator = UniversalAudioApiAxiosParamCreator;
/**
 * UniversalAudioApi - functional programming interface
 * @export
 */
var UniversalAudioApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UniversalAudioApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUniversalAudioStream(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headUniversalAudioStream(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UniversalAudioApiFp = UniversalAudioApiFp;
/**
 * UniversalAudioApi - factory interface
 * @export
 */
var UniversalAudioApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UniversalAudioApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            return localVarFp.getUniversalAudioStream(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an audio stream.
         * @param {string} itemId The item id.
         * @param {Array<string>} [container] Optional. The audio container.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [userId] Optional. The user id.
         * @param {string} [audioCodec] Optional. The audio codec to transcode to.
         * @param {number} [maxAudioChannels] Optional. The maximum number of audio channels.
         * @param {number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
         * @param {number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {string} [transcodingContainer] Optional. The container to transcode to.
         * @param {string} [transcodingProtocol] Optional. The transcoding protocol.
         * @param {number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {boolean} [enableRedirection] Whether to enable redirection. Defaults to true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headUniversalAudioStream: function (itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options) {
            return localVarFp.headUniversalAudioStream(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UniversalAudioApiFactory = UniversalAudioApiFactory;
/**
 * UniversalAudioApi - object-oriented interface
 * @export
 * @class UniversalAudioApi
 * @extends {BaseAPI}
 */
var UniversalAudioApi = /** @class */ (function (_super) {
    __extends(UniversalAudioApi, _super);
    function UniversalAudioApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets an audio stream.
     * @param {UniversalAudioApiGetUniversalAudioStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioApi
     */
    UniversalAudioApi.prototype.getUniversalAudioStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UniversalAudioApiFp)(this.configuration).getUniversalAudioStream(requestParameters.itemId, requestParameters.container, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.userId, requestParameters.audioCodec, requestParameters.maxAudioChannels, requestParameters.transcodingAudioChannels, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.startTimeTicks, requestParameters.transcodingContainer, requestParameters.transcodingProtocol, requestParameters.maxAudioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.enableRemoteMedia, requestParameters.breakOnNonKeyFrames, requestParameters.enableRedirection, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an audio stream.
     * @param {UniversalAudioApiHeadUniversalAudioStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioApi
     */
    UniversalAudioApi.prototype.headUniversalAudioStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UniversalAudioApiFp)(this.configuration).headUniversalAudioStream(requestParameters.itemId, requestParameters.container, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.userId, requestParameters.audioCodec, requestParameters.maxAudioChannels, requestParameters.transcodingAudioChannels, requestParameters.maxStreamingBitrate, requestParameters.audioBitRate, requestParameters.startTimeTicks, requestParameters.transcodingContainer, requestParameters.transcodingProtocol, requestParameters.maxAudioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.enableRemoteMedia, requestParameters.breakOnNonKeyFrames, requestParameters.enableRedirection, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UniversalAudioApi;
}(base_1.BaseAPI));
exports.UniversalAudioApi = UniversalAudioApi;

},{"../base":68,"../common":69,"axios":362}],61:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * UserApi - axios parameter creator
 * @export
 */
var UserApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Authenticates a user.
         * @param {string} userId The user id.
         * @param {string} pw The password as plain text.
         * @param {string} [password] The password sha1-hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUser: function (userId, pw, password, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('authenticateUser', 'userId', userId);
                    // verify required parameter 'pw' is not null or undefined
                    (0, common_1.assertParamExists)('authenticateUser', 'pw', pw);
                    localVarPath = "/Users/{userId}/Authenticate"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pw !== undefined) {
                        localVarQueryParameter['pw'] = pw;
                    }
                    if (password !== undefined) {
                        localVarQueryParameter['password'] = password;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Authenticates a user by name.
         * @param {AuthenticateUserByName} authenticateUserByName The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUserByName: function (authenticateUserByName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authenticateUserByName' is not null or undefined
                    (0, common_1.assertParamExists)('authenticateUserByName', 'authenticateUserByName', authenticateUserByName);
                    localVarPath = "/Users/AuthenticateByName";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authenticateUserByName, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Authenticates a user with quick connect.
         * @param {QuickConnectDto} quickConnectDto The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWithQuickConnect: function (quickConnectDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'quickConnectDto' is not null or undefined
                    (0, common_1.assertParamExists)('authenticateWithQuickConnect', 'quickConnectDto', quickConnectDto);
                    localVarPath = "/Users/AuthenticateWithQuickConnect";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(quickConnectDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Creates a user.
         * @param {CreateUserByName} createUserByName The create user by name request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserByName: function (createUserByName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createUserByName' is not null or undefined
                            (0, common_1.assertParamExists)('createUserByName', 'createUserByName', createUserByName);
                            localVarPath = "/Users/New";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createUserByName, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a user.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUser', 'userId', userId);
                            localVarPath = "/Users/{userId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Initiates the forgot password process for a local user.
         * @param {ForgotPasswordDto} forgotPasswordDto The forgot password request containing the entered username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: function (forgotPasswordDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'forgotPasswordDto' is not null or undefined
                    (0, common_1.assertParamExists)('forgotPassword', 'forgotPasswordDto', forgotPasswordDto);
                    localVarPath = "/Users/ForgotPassword";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(forgotPasswordDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Redeems a forgot password pin.
         * @param {ForgotPasswordPinDto} forgotPasswordPinDto The forgot password pin request containing the entered pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPin: function (forgotPasswordPinDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'forgotPasswordPinDto' is not null or undefined
                    (0, common_1.assertParamExists)('forgotPasswordPin', 'forgotPasswordPinDto', forgotPasswordPinDto);
                    localVarPath = "/Users/ForgotPassword/Pin";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(forgotPasswordPinDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the user based on auth token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Users/Me";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicUsers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/Users/Public";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a user by Id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getUserById', 'userId', userId);
                            localVarPath = "/Users/{userId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of users.
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false.
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (isHidden, isDisabled, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (isHidden !== undefined) {
                                localVarQueryParameter['isHidden'] = isHidden;
                            }
                            if (isDisabled !== undefined) {
                                localVarQueryParameter['isDisabled'] = isDisabled;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user.
         * @param {string} userId The user id.
         * @param {UserDto} userDto The updated user model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, userDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUser', 'userId', userId);
                            // verify required parameter 'userDto' is not null or undefined
                            (0, common_1.assertParamExists)('updateUser', 'userDto', userDto);
                            localVarPath = "/Users/{userId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userDto, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user configuration.
         * @param {string} userId The user id.
         * @param {UserConfiguration} userConfiguration The new user configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserConfiguration: function (userId, userConfiguration, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserConfiguration', 'userId', userId);
                            // verify required parameter 'userConfiguration' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserConfiguration', 'userConfiguration', userConfiguration);
                            localVarPath = "/Users/{userId}/Configuration"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userConfiguration, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s easy password.
         * @param {string} userId The user id.
         * @param {UpdateUserEasyPassword} updateUserEasyPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEasyPassword: function (userId, updateUserEasyPassword, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserEasyPassword', 'userId', userId);
                            // verify required parameter 'updateUserEasyPassword' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserEasyPassword', 'updateUserEasyPassword', updateUserEasyPassword);
                            localVarPath = "/Users/{userId}/EasyPassword"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateUserEasyPassword, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s password.
         * @param {string} userId The user id.
         * @param {UpdateUserPassword} updateUserPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (userId, updateUserPassword, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserPassword', 'userId', userId);
                            // verify required parameter 'updateUserPassword' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserPassword', 'updateUserPassword', updateUserPassword);
                            localVarPath = "/Users/{userId}/Password"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateUserPassword, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user policy.
         * @param {string} userId The user id.
         * @param {UserPolicy} userPolicy The new user policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPolicy: function (userId, userPolicy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserPolicy', 'userId', userId);
                            // verify required parameter 'userPolicy' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserPolicy', 'userPolicy', userPolicy);
                            localVarPath = "/Users/{userId}/Policy"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userPolicy, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
var UserApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Authenticates a user.
         * @param {string} userId The user id.
         * @param {string} pw The password as plain text.
         * @param {string} [password] The password sha1-hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUser: function (userId, pw, password, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authenticateUser(userId, pw, password, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Authenticates a user by name.
         * @param {AuthenticateUserByName} authenticateUserByName The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUserByName: function (authenticateUserByName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authenticateUserByName(authenticateUserByName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Authenticates a user with quick connect.
         * @param {QuickConnectDto} quickConnectDto The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWithQuickConnect: function (quickConnectDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authenticateWithQuickConnect(quickConnectDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a user.
         * @param {CreateUserByName} createUserByName The create user by name request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserByName: function (createUserByName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createUserByName(createUserByName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a user.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUser(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Initiates the forgot password process for a local user.
         * @param {ForgotPasswordDto} forgotPasswordDto The forgot password request containing the entered username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: function (forgotPasswordDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.forgotPassword(forgotPasswordDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Redeems a forgot password pin.
         * @param {ForgotPasswordPinDto} forgotPasswordPinDto The forgot password pin request containing the entered pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPin: function (forgotPasswordPinDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.forgotPasswordPin(forgotPasswordPinDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the user based on auth token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCurrentUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicUsers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPublicUsers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a user by Id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserById(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a list of users.
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false.
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (isHidden, isDisabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsers(isHidden, isDisabled, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user.
         * @param {string} userId The user id.
         * @param {UserDto} userDto The updated user model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, userDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUser(userId, userDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user configuration.
         * @param {string} userId The user id.
         * @param {UserConfiguration} userConfiguration The new user configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserConfiguration: function (userId, userConfiguration, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserConfiguration(userId, userConfiguration, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s easy password.
         * @param {string} userId The user id.
         * @param {UpdateUserEasyPassword} updateUserEasyPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEasyPassword: function (userId, updateUserEasyPassword, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserEasyPassword(userId, updateUserEasyPassword, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s password.
         * @param {string} userId The user id.
         * @param {UpdateUserPassword} updateUserPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (userId, updateUserPassword, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserPassword(userId, updateUserPassword, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user policy.
         * @param {string} userId The user id.
         * @param {UserPolicy} userPolicy The new user policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPolicy: function (userId, userPolicy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserPolicy(userId, userPolicy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
var UserApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         *
         * @summary Authenticates a user.
         * @param {string} userId The user id.
         * @param {string} pw The password as plain text.
         * @param {string} [password] The password sha1-hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUser: function (userId, pw, password, options) {
            return localVarFp.authenticateUser(userId, pw, password, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Authenticates a user by name.
         * @param {AuthenticateUserByName} authenticateUserByName The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUserByName: function (authenticateUserByName, options) {
            return localVarFp.authenticateUserByName(authenticateUserByName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Authenticates a user with quick connect.
         * @param {QuickConnectDto} quickConnectDto The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWithQuickConnect: function (quickConnectDto, options) {
            return localVarFp.authenticateWithQuickConnect(quickConnectDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a user.
         * @param {CreateUserByName} createUserByName The create user by name request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserByName: function (createUserByName, options) {
            return localVarFp.createUserByName(createUserByName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes a user.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            return localVarFp.deleteUser(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Initiates the forgot password process for a local user.
         * @param {ForgotPasswordDto} forgotPasswordDto The forgot password request containing the entered username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: function (forgotPasswordDto, options) {
            return localVarFp.forgotPassword(forgotPasswordDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Redeems a forgot password pin.
         * @param {ForgotPasswordPinDto} forgotPasswordPinDto The forgot password pin request containing the entered pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPin: function (forgotPasswordPinDto, options) {
            return localVarFp.forgotPasswordPin(forgotPasswordPinDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the user based on auth token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            return localVarFp.getCurrentUser(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicUsers: function (options) {
            return localVarFp.getPublicUsers(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a user by Id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: function (userId, options) {
            return localVarFp.getUserById(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a list of users.
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false.
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (isHidden, isDisabled, options) {
            return localVarFp.getUsers(isHidden, isDisabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user.
         * @param {string} userId The user id.
         * @param {UserDto} userDto The updated user model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, userDto, options) {
            return localVarFp.updateUser(userId, userDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user configuration.
         * @param {string} userId The user id.
         * @param {UserConfiguration} userConfiguration The new user configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserConfiguration: function (userId, userConfiguration, options) {
            return localVarFp.updateUserConfiguration(userId, userConfiguration, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user\'s easy password.
         * @param {string} userId The user id.
         * @param {UpdateUserEasyPassword} updateUserEasyPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEasyPassword: function (userId, updateUserEasyPassword, options) {
            return localVarFp.updateUserEasyPassword(userId, updateUserEasyPassword, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user\'s password.
         * @param {string} userId The user id.
         * @param {UpdateUserPassword} updateUserPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: function (userId, updateUserPassword, options) {
            return localVarFp.updateUserPassword(userId, updateUserPassword, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user policy.
         * @param {string} userId The user id.
         * @param {UserPolicy} userPolicy The new user policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPolicy: function (userId, userPolicy, options) {
            return localVarFp.updateUserPolicy(userId, userPolicy, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Authenticates a user.
     * @param {UserApiAuthenticateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.authenticateUser = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).authenticateUser(requestParameters.userId, requestParameters.pw, requestParameters.password, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Authenticates a user by name.
     * @param {UserApiAuthenticateUserByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.authenticateUserByName = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).authenticateUserByName(requestParameters.authenticateUserByName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Authenticates a user with quick connect.
     * @param {UserApiAuthenticateWithQuickConnectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.authenticateWithQuickConnect = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).authenticateWithQuickConnect(requestParameters.quickConnectDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a user.
     * @param {UserApiCreateUserByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.createUserByName = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).createUserByName(requestParameters.createUserByName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes a user.
     * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUser = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).deleteUser(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Initiates the forgot password process for a local user.
     * @param {UserApiForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.forgotPassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).forgotPassword(requestParameters.forgotPasswordDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Redeems a forgot password pin.
     * @param {UserApiForgotPasswordPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.forgotPasswordPin = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).forgotPasswordPin(requestParameters.forgotPasswordPinDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the user based on auth token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getCurrentUser = function (options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).getCurrentUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of publicly visible users for display on a login screen.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getPublicUsers = function (options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).getPublicUsers(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a user by Id.
     * @param {UserApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserById = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).getUserById(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a list of users.
     * @param {UserApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUsers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.UserApiFp)(this.configuration).getUsers(requestParameters.isHidden, requestParameters.isDisabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user.
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUser = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).updateUser(requestParameters.userId, requestParameters.userDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user configuration.
     * @param {UserApiUpdateUserConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).updateUserConfiguration(requestParameters.userId, requestParameters.userConfiguration, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user\'s easy password.
     * @param {UserApiUpdateUserEasyPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserEasyPassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).updateUserEasyPassword(requestParameters.userId, requestParameters.updateUserEasyPassword, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user\'s password.
     * @param {UserApiUpdateUserPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserPassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).updateUserPassword(requestParameters.userId, requestParameters.updateUserPassword, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user policy.
     * @param {UserApiUpdateUserPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUserPolicy = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).updateUserPolicy(requestParameters.userId, requestParameters.userPolicy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserApi;
}(base_1.BaseAPI));
exports.UserApi = UserApi;

},{"../base":68,"../common":69,"axios":362}],62:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserLibraryApi = exports.UserLibraryApiFactory = exports.UserLibraryApiFp = exports.UserLibraryApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * UserLibraryApi - axios parameter creator
 * @export
 */
var UserLibraryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Deletes a user\'s saved personal rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserItemRating: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserItemRating', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUserItemRating', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}/Rating"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets intros to play before the main media item plays.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntros: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getIntros', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getIntros', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}/Intros"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an item from a user\'s library.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getItem', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getItem', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets latest media.
         * @param {string} userId User id.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [enableImages] Optional. include image information in output.
         * @param {number} [imageTypeLimit] Optional. the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {number} [limit] Return item limit.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestMedia: function (userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getLatestMedia', 'userId', userId);
                            localVarPath = "/Users/{userId}/Items/Latest"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (isPlayed !== undefined) {
                                localVarQueryParameter['isPlayed'] = isPlayed;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (groupItems !== undefined) {
                                localVarQueryParameter['groupItems'] = groupItems;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets local trailers for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalTrailers: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getLocalTrailers', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getLocalTrailers', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}/LocalTrailers"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the root folder from a user\'s library.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootFolder: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getRootFolder', 'userId', userId);
                            localVarPath = "/Users/{userId}/Items/Root"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets special features for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialFeatures: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('getSpecialFeatures', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSpecialFeatures', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}/SpecialFeatures"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Marks an item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markFavoriteItem: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('markFavoriteItem', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('markFavoriteItem', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/FavoriteItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Unmarks item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmarkFavoriteItem: function (userId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('unmarkFavoriteItem', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('unmarkFavoriteItem', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/FavoriteItems/{itemId}"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {boolean} [likes] Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserItemRating: function (userId, itemId, likes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserItemRating', 'userId', userId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateUserItemRating', 'itemId', itemId);
                            localVarPath = "/Users/{userId}/Items/{itemId}/Rating"
                                .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (likes !== undefined) {
                                localVarQueryParameter['likes'] = likes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UserLibraryApiAxiosParamCreator = UserLibraryApiAxiosParamCreator;
/**
 * UserLibraryApi - functional programming interface
 * @export
 */
var UserLibraryApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UserLibraryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes a user\'s saved personal rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserItemRating: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUserItemRating(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets intros to play before the main media item plays.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntros: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIntros(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an item from a user\'s library.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItem(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets latest media.
         * @param {string} userId User id.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [enableImages] Optional. include image information in output.
         * @param {number} [imageTypeLimit] Optional. the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {number} [limit] Return item limit.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestMedia: function (userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestMedia(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets local trailers for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalTrailers: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLocalTrailers(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the root folder from a user\'s library.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootFolder: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRootFolder(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets special features for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialFeatures: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSpecialFeatures(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Marks an item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markFavoriteItem: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.markFavoriteItem(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Unmarks item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmarkFavoriteItem: function (userId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unmarkFavoriteItem(userId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a user\'s rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {boolean} [likes] Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserItemRating: function (userId, itemId, likes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUserItemRating(userId, itemId, likes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UserLibraryApiFp = UserLibraryApiFp;
/**
 * UserLibraryApi - factory interface
 * @export
 */
var UserLibraryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UserLibraryApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes a user\'s saved personal rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserItemRating: function (userId, itemId, options) {
            return localVarFp.deleteUserItemRating(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets intros to play before the main media item plays.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntros: function (userId, itemId, options) {
            return localVarFp.getIntros(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an item from a user\'s library.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (userId, itemId, options) {
            return localVarFp.getItem(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets latest media.
         * @param {string} userId User id.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [enableImages] Optional. include image information in output.
         * @param {number} [imageTypeLimit] Optional. the max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional. include user data.
         * @param {number} [limit] Return item limit.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestMedia: function (userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems, options) {
            return localVarFp.getLatestMedia(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets local trailers for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalTrailers: function (userId, itemId, options) {
            return localVarFp.getLocalTrailers(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the root folder from a user\'s library.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootFolder: function (userId, options) {
            return localVarFp.getRootFolder(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets special features for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialFeatures: function (userId, itemId, options) {
            return localVarFp.getSpecialFeatures(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Marks an item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markFavoriteItem: function (userId, itemId, options) {
            return localVarFp.markFavoriteItem(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Unmarks item as a favorite.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmarkFavoriteItem: function (userId, itemId, options) {
            return localVarFp.unmarkFavoriteItem(userId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a user\'s rating for an item.
         * @param {string} userId User id.
         * @param {string} itemId Item id.
         * @param {boolean} [likes] Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserItemRating: function (userId, itemId, likes, options) {
            return localVarFp.updateUserItemRating(userId, itemId, likes, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserLibraryApiFactory = UserLibraryApiFactory;
/**
 * UserLibraryApi - object-oriented interface
 * @export
 * @class UserLibraryApi
 * @extends {BaseAPI}
 */
var UserLibraryApi = /** @class */ (function (_super) {
    __extends(UserLibraryApi, _super);
    function UserLibraryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Deletes a user\'s saved personal rating for an item.
     * @param {UserLibraryApiDeleteUserItemRatingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.deleteUserItemRating = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).deleteUserItemRating(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets intros to play before the main media item plays.
     * @param {UserLibraryApiGetIntrosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getIntros = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getIntros(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an item from a user\'s library.
     * @param {UserLibraryApiGetItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getItem(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets latest media.
     * @param {UserLibraryApiGetLatestMediaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getLatestMedia = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getLatestMedia(requestParameters.userId, requestParameters.parentId, requestParameters.fields, requestParameters.includeItemTypes, requestParameters.isPlayed, requestParameters.enableImages, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.enableUserData, requestParameters.limit, requestParameters.groupItems, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets local trailers for an item.
     * @param {UserLibraryApiGetLocalTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getLocalTrailers = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getLocalTrailers(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the root folder from a user\'s library.
     * @param {UserLibraryApiGetRootFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getRootFolder = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getRootFolder(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets special features for an item.
     * @param {UserLibraryApiGetSpecialFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.getSpecialFeatures = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).getSpecialFeatures(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Marks an item as a favorite.
     * @param {UserLibraryApiMarkFavoriteItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.markFavoriteItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).markFavoriteItem(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Unmarks item as a favorite.
     * @param {UserLibraryApiUnmarkFavoriteItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.unmarkFavoriteItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).unmarkFavoriteItem(requestParameters.userId, requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a user\'s rating for an item.
     * @param {UserLibraryApiUpdateUserItemRatingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryApi
     */
    UserLibraryApi.prototype.updateUserItemRating = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserLibraryApiFp)(this.configuration).updateUserItemRating(requestParameters.userId, requestParameters.itemId, requestParameters.likes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserLibraryApi;
}(base_1.BaseAPI));
exports.UserLibraryApi = UserLibraryApi;

},{"../base":68,"../common":69,"axios":362}],63:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserViewsApi = exports.UserViewsApiFactory = exports.UserViewsApiFp = exports.UserViewsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * UserViewsApi - axios parameter creator
 * @export
 */
var UserViewsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get user view grouping options.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupingOptions: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getGroupingOptions', 'userId', userId);
                    localVarPath = "/Users/{userId}/GroupingOptions"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get user views.
         * @param {string} userId User id.
         * @param {boolean} [includeExternalContent] Whether or not to include external views such as channels or live tv.
         * @param {Array<string>} [presetViews] Preset views.
         * @param {boolean} [includeHidden] Whether or not to include hidden content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserViews: function (userId, includeExternalContent, presetViews, includeHidden, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    (0, common_1.assertParamExists)('getUserViews', 'userId', userId);
                    localVarPath = "/Users/{userId}/Views"
                        .replace("{".concat("userId", "}"), encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (includeExternalContent !== undefined) {
                        localVarQueryParameter['includeExternalContent'] = includeExternalContent;
                    }
                    if (presetViews) {
                        localVarQueryParameter['presetViews'] = presetViews;
                    }
                    if (includeHidden !== undefined) {
                        localVarQueryParameter['includeHidden'] = includeHidden;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserViewsApiAxiosParamCreator = UserViewsApiAxiosParamCreator;
/**
 * UserViewsApi - functional programming interface
 * @export
 */
var UserViewsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UserViewsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get user view grouping options.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupingOptions: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroupingOptions(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user views.
         * @param {string} userId User id.
         * @param {boolean} [includeExternalContent] Whether or not to include external views such as channels or live tv.
         * @param {Array<string>} [presetViews] Preset views.
         * @param {boolean} [includeHidden] Whether or not to include hidden content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserViews: function (userId, includeExternalContent, presetViews, includeHidden, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserViews(userId, includeExternalContent, presetViews, includeHidden, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UserViewsApiFp = UserViewsApiFp;
/**
 * UserViewsApi - factory interface
 * @export
 */
var UserViewsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UserViewsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get user view grouping options.
         * @param {string} userId User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupingOptions: function (userId, options) {
            return localVarFp.getGroupingOptions(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user views.
         * @param {string} userId User id.
         * @param {boolean} [includeExternalContent] Whether or not to include external views such as channels or live tv.
         * @param {Array<string>} [presetViews] Preset views.
         * @param {boolean} [includeHidden] Whether or not to include hidden content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserViews: function (userId, includeExternalContent, presetViews, includeHidden, options) {
            return localVarFp.getUserViews(userId, includeExternalContent, presetViews, includeHidden, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserViewsApiFactory = UserViewsApiFactory;
/**
 * UserViewsApi - object-oriented interface
 * @export
 * @class UserViewsApi
 * @extends {BaseAPI}
 */
var UserViewsApi = /** @class */ (function (_super) {
    __extends(UserViewsApi, _super);
    function UserViewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get user view grouping options.
     * @param {UserViewsApiGetGroupingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserViewsApi
     */
    UserViewsApi.prototype.getGroupingOptions = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserViewsApiFp)(this.configuration).getGroupingOptions(requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user views.
     * @param {UserViewsApiGetUserViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserViewsApi
     */
    UserViewsApi.prototype.getUserViews = function (requestParameters, options) {
        var _this = this;
        return (0, exports.UserViewsApiFp)(this.configuration).getUserViews(requestParameters.userId, requestParameters.includeExternalContent, requestParameters.presetViews, requestParameters.includeHidden, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserViewsApi;
}(base_1.BaseAPI));
exports.UserViewsApi = UserViewsApi;

},{"../base":68,"../common":69,"axios":362}],64:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoAttachmentsApi = exports.VideoAttachmentsApiFactory = exports.VideoAttachmentsApiFp = exports.VideoAttachmentsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * VideoAttachmentsApi - axios parameter creator
 * @export
 */
var VideoAttachmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get video attachment.
         * @param {string} videoId Video ID.
         * @param {string} mediaSourceId Media Source ID.
         * @param {number} index Attachment Index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (videoId, mediaSourceId, index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'videoId' is not null or undefined
                    (0, common_1.assertParamExists)('getAttachment', 'videoId', videoId);
                    // verify required parameter 'mediaSourceId' is not null or undefined
                    (0, common_1.assertParamExists)('getAttachment', 'mediaSourceId', mediaSourceId);
                    // verify required parameter 'index' is not null or undefined
                    (0, common_1.assertParamExists)('getAttachment', 'index', index);
                    localVarPath = "/Videos/{videoId}/{mediaSourceId}/Attachments/{index}"
                        .replace("{".concat("videoId", "}"), encodeURIComponent(String(videoId)))
                        .replace("{".concat("mediaSourceId", "}"), encodeURIComponent(String(mediaSourceId)))
                        .replace("{".concat("index", "}"), encodeURIComponent(String(index)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.VideoAttachmentsApiAxiosParamCreator = VideoAttachmentsApiAxiosParamCreator;
/**
 * VideoAttachmentsApi - functional programming interface
 * @export
 */
var VideoAttachmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VideoAttachmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get video attachment.
         * @param {string} videoId Video ID.
         * @param {string} mediaSourceId Media Source ID.
         * @param {number} index Attachment Index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (videoId, mediaSourceId, index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAttachment(videoId, mediaSourceId, index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.VideoAttachmentsApiFp = VideoAttachmentsApiFp;
/**
 * VideoAttachmentsApi - factory interface
 * @export
 */
var VideoAttachmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VideoAttachmentsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get video attachment.
         * @param {string} videoId Video ID.
         * @param {string} mediaSourceId Media Source ID.
         * @param {number} index Attachment Index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (videoId, mediaSourceId, index, options) {
            return localVarFp.getAttachment(videoId, mediaSourceId, index, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VideoAttachmentsApiFactory = VideoAttachmentsApiFactory;
/**
 * VideoAttachmentsApi - object-oriented interface
 * @export
 * @class VideoAttachmentsApi
 * @extends {BaseAPI}
 */
var VideoAttachmentsApi = /** @class */ (function (_super) {
    __extends(VideoAttachmentsApi, _super);
    function VideoAttachmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get video attachment.
     * @param {VideoAttachmentsApiGetAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoAttachmentsApi
     */
    VideoAttachmentsApi.prototype.getAttachment = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideoAttachmentsApiFp)(this.configuration).getAttachment(requestParameters.videoId, requestParameters.mediaSourceId, requestParameters.index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VideoAttachmentsApi;
}(base_1.BaseAPI));
exports.VideoAttachmentsApi = VideoAttachmentsApi;

},{"../base":68,"../common":69,"axios":362}],65:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoHlsApi = exports.VideoHlsApiFactory = exports.VideoHlsApiFp = exports.VideoHlsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * VideoHlsApi - axios parameter creator
 * @export
 */
var VideoHlsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a hls live stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {number} [maxWidth] Optional. The max width.
         * @param {number} [maxHeight] Optional. The max height.
         * @param {boolean} [enableSubtitlesInManifest] Optional. Whether to enable subtitles in the manifest.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveHlsStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, maxWidth, maxHeight, enableSubtitlesInManifest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getLiveHlsStream', 'itemId', itemId);
                            localVarPath = "/Videos/{itemId}/live.m3u8"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (container !== undefined) {
                                localVarQueryParameter['container'] = container;
                            }
                            if (_static !== undefined) {
                                localVarQueryParameter['static'] = _static;
                            }
                            if (params !== undefined) {
                                localVarQueryParameter['params'] = params;
                            }
                            if (tag !== undefined) {
                                localVarQueryParameter['tag'] = tag;
                            }
                            if (deviceProfileId !== undefined) {
                                localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                            }
                            if (playSessionId !== undefined) {
                                localVarQueryParameter['playSessionId'] = playSessionId;
                            }
                            if (segmentContainer !== undefined) {
                                localVarQueryParameter['segmentContainer'] = segmentContainer;
                            }
                            if (segmentLength !== undefined) {
                                localVarQueryParameter['segmentLength'] = segmentLength;
                            }
                            if (minSegments !== undefined) {
                                localVarQueryParameter['minSegments'] = minSegments;
                            }
                            if (mediaSourceId !== undefined) {
                                localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['deviceId'] = deviceId;
                            }
                            if (audioCodec !== undefined) {
                                localVarQueryParameter['audioCodec'] = audioCodec;
                            }
                            if (enableAutoStreamCopy !== undefined) {
                                localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                            }
                            if (allowVideoStreamCopy !== undefined) {
                                localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                            }
                            if (allowAudioStreamCopy !== undefined) {
                                localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                            }
                            if (breakOnNonKeyFrames !== undefined) {
                                localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                            }
                            if (audioSampleRate !== undefined) {
                                localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                            }
                            if (maxAudioBitDepth !== undefined) {
                                localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                            }
                            if (audioBitRate !== undefined) {
                                localVarQueryParameter['audioBitRate'] = audioBitRate;
                            }
                            if (audioChannels !== undefined) {
                                localVarQueryParameter['audioChannels'] = audioChannels;
                            }
                            if (maxAudioChannels !== undefined) {
                                localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                            }
                            if (profile !== undefined) {
                                localVarQueryParameter['profile'] = profile;
                            }
                            if (level !== undefined) {
                                localVarQueryParameter['level'] = level;
                            }
                            if (framerate !== undefined) {
                                localVarQueryParameter['framerate'] = framerate;
                            }
                            if (maxFramerate !== undefined) {
                                localVarQueryParameter['maxFramerate'] = maxFramerate;
                            }
                            if (copyTimestamps !== undefined) {
                                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                            }
                            if (startTimeTicks !== undefined) {
                                localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                            }
                            if (width !== undefined) {
                                localVarQueryParameter['width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['height'] = height;
                            }
                            if (videoBitRate !== undefined) {
                                localVarQueryParameter['videoBitRate'] = videoBitRate;
                            }
                            if (subtitleStreamIndex !== undefined) {
                                localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                            }
                            if (subtitleMethod !== undefined) {
                                localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                            }
                            if (maxRefFrames !== undefined) {
                                localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                            }
                            if (maxVideoBitDepth !== undefined) {
                                localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                            }
                            if (requireAvc !== undefined) {
                                localVarQueryParameter['requireAvc'] = requireAvc;
                            }
                            if (deInterlace !== undefined) {
                                localVarQueryParameter['deInterlace'] = deInterlace;
                            }
                            if (requireNonAnamorphic !== undefined) {
                                localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                            }
                            if (transcodingMaxAudioChannels !== undefined) {
                                localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                            }
                            if (cpuCoreLimit !== undefined) {
                                localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                            }
                            if (liveStreamId !== undefined) {
                                localVarQueryParameter['liveStreamId'] = liveStreamId;
                            }
                            if (enableMpegtsM2TsMode !== undefined) {
                                localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                            }
                            if (videoCodec !== undefined) {
                                localVarQueryParameter['videoCodec'] = videoCodec;
                            }
                            if (subtitleCodec !== undefined) {
                                localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                            }
                            if (transcodeReasons !== undefined) {
                                localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                            }
                            if (audioStreamIndex !== undefined) {
                                localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                            }
                            if (videoStreamIndex !== undefined) {
                                localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                            }
                            if (context !== undefined) {
                                localVarQueryParameter['context'] = context;
                            }
                            if (streamOptions !== undefined) {
                                localVarQueryParameter['streamOptions'] = streamOptions;
                            }
                            if (maxWidth !== undefined) {
                                localVarQueryParameter['maxWidth'] = maxWidth;
                            }
                            if (maxHeight !== undefined) {
                                localVarQueryParameter['maxHeight'] = maxHeight;
                            }
                            if (enableSubtitlesInManifest !== undefined) {
                                localVarQueryParameter['enableSubtitlesInManifest'] = enableSubtitlesInManifest;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VideoHlsApiAxiosParamCreator = VideoHlsApiAxiosParamCreator;
/**
 * VideoHlsApi - functional programming interface
 * @export
 */
var VideoHlsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VideoHlsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a hls live stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {number} [maxWidth] Optional. The max width.
         * @param {number} [maxHeight] Optional. The max height.
         * @param {boolean} [enableSubtitlesInManifest] Optional. Whether to enable subtitles in the manifest.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveHlsStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, maxWidth, maxHeight, enableSubtitlesInManifest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLiveHlsStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, maxWidth, maxHeight, enableSubtitlesInManifest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.VideoHlsApiFp = VideoHlsApiFp;
/**
 * VideoHlsApi - factory interface
 * @export
 */
var VideoHlsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VideoHlsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a hls live stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The audio container.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment lenght.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {number} [maxWidth] Optional. The max width.
         * @param {number} [maxHeight] Optional. The max height.
         * @param {boolean} [enableSubtitlesInManifest] Optional. Whether to enable subtitles in the manifest.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveHlsStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, maxWidth, maxHeight, enableSubtitlesInManifest, options) {
            return localVarFp.getLiveHlsStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, maxWidth, maxHeight, enableSubtitlesInManifest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VideoHlsApiFactory = VideoHlsApiFactory;
/**
 * VideoHlsApi - object-oriented interface
 * @export
 * @class VideoHlsApi
 * @extends {BaseAPI}
 */
var VideoHlsApi = /** @class */ (function (_super) {
    __extends(VideoHlsApi, _super);
    function VideoHlsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a hls live stream.
     * @param {VideoHlsApiGetLiveHlsStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoHlsApi
     */
    VideoHlsApi.prototype.getLiveHlsStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideoHlsApiFp)(this.configuration).getLiveHlsStream(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.enableSubtitlesInManifest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VideoHlsApi;
}(base_1.BaseAPI));
exports.VideoHlsApi = VideoHlsApi;

},{"../base":68,"../common":69,"axios":362}],66:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideosApi = exports.VideosApiFactory = exports.VideosApiFp = exports.VideosApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * VideosApi - axios parameter creator
 * @export
 */
var VideosApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Removes alternate video sources.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlternateSources: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAlternateSources', 'itemId', itemId);
                            localVarPath = "/Videos/{itemId}/AlternateSources"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets additional parts for a video.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalPart: function (itemId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getAdditionalPart', 'itemId', itemId);
                            localVarPath = "/Videos/{itemId}/AdditionalParts"
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getVideoStream', 'itemId', itemId);
                    localVarPath = "/Videos/{itemId}/stream"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (container !== undefined) {
                        localVarQueryParameter['container'] = container;
                    }
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('getVideoStreamByContainer', 'itemId', itemId);
                    // verify required parameter 'container' is not null or undefined
                    (0, common_1.assertParamExists)('getVideoStreamByContainer', 'container', container);
                    localVarPath = "/Videos/{itemId}/stream.{container}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headVideoStream', 'itemId', itemId);
                    localVarPath = "/Videos/{itemId}/stream"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (container !== undefined) {
                        localVarQueryParameter['container'] = container;
                    }
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('headVideoStreamByContainer', 'itemId', itemId);
                    // verify required parameter 'container' is not null or undefined
                    (0, common_1.assertParamExists)('headVideoStreamByContainer', 'container', container);
                    localVarPath = "/Videos/{itemId}/stream.{container}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)))
                        .replace("{".concat("container", "}"), encodeURIComponent(String(container)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (_static !== undefined) {
                        localVarQueryParameter['static'] = _static;
                    }
                    if (params !== undefined) {
                        localVarQueryParameter['params'] = params;
                    }
                    if (tag !== undefined) {
                        localVarQueryParameter['tag'] = tag;
                    }
                    if (deviceProfileId !== undefined) {
                        localVarQueryParameter['deviceProfileId'] = deviceProfileId;
                    }
                    if (playSessionId !== undefined) {
                        localVarQueryParameter['playSessionId'] = playSessionId;
                    }
                    if (segmentContainer !== undefined) {
                        localVarQueryParameter['segmentContainer'] = segmentContainer;
                    }
                    if (segmentLength !== undefined) {
                        localVarQueryParameter['segmentLength'] = segmentLength;
                    }
                    if (minSegments !== undefined) {
                        localVarQueryParameter['minSegments'] = minSegments;
                    }
                    if (mediaSourceId !== undefined) {
                        localVarQueryParameter['mediaSourceId'] = mediaSourceId;
                    }
                    if (deviceId !== undefined) {
                        localVarQueryParameter['deviceId'] = deviceId;
                    }
                    if (audioCodec !== undefined) {
                        localVarQueryParameter['audioCodec'] = audioCodec;
                    }
                    if (enableAutoStreamCopy !== undefined) {
                        localVarQueryParameter['enableAutoStreamCopy'] = enableAutoStreamCopy;
                    }
                    if (allowVideoStreamCopy !== undefined) {
                        localVarQueryParameter['allowVideoStreamCopy'] = allowVideoStreamCopy;
                    }
                    if (allowAudioStreamCopy !== undefined) {
                        localVarQueryParameter['allowAudioStreamCopy'] = allowAudioStreamCopy;
                    }
                    if (breakOnNonKeyFrames !== undefined) {
                        localVarQueryParameter['breakOnNonKeyFrames'] = breakOnNonKeyFrames;
                    }
                    if (audioSampleRate !== undefined) {
                        localVarQueryParameter['audioSampleRate'] = audioSampleRate;
                    }
                    if (maxAudioBitDepth !== undefined) {
                        localVarQueryParameter['maxAudioBitDepth'] = maxAudioBitDepth;
                    }
                    if (audioBitRate !== undefined) {
                        localVarQueryParameter['audioBitRate'] = audioBitRate;
                    }
                    if (audioChannels !== undefined) {
                        localVarQueryParameter['audioChannels'] = audioChannels;
                    }
                    if (maxAudioChannels !== undefined) {
                        localVarQueryParameter['maxAudioChannels'] = maxAudioChannels;
                    }
                    if (profile !== undefined) {
                        localVarQueryParameter['profile'] = profile;
                    }
                    if (level !== undefined) {
                        localVarQueryParameter['level'] = level;
                    }
                    if (framerate !== undefined) {
                        localVarQueryParameter['framerate'] = framerate;
                    }
                    if (maxFramerate !== undefined) {
                        localVarQueryParameter['maxFramerate'] = maxFramerate;
                    }
                    if (copyTimestamps !== undefined) {
                        localVarQueryParameter['copyTimestamps'] = copyTimestamps;
                    }
                    if (startTimeTicks !== undefined) {
                        localVarQueryParameter['startTimeTicks'] = startTimeTicks;
                    }
                    if (width !== undefined) {
                        localVarQueryParameter['width'] = width;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (maxWidth !== undefined) {
                        localVarQueryParameter['maxWidth'] = maxWidth;
                    }
                    if (maxHeight !== undefined) {
                        localVarQueryParameter['maxHeight'] = maxHeight;
                    }
                    if (videoBitRate !== undefined) {
                        localVarQueryParameter['videoBitRate'] = videoBitRate;
                    }
                    if (subtitleStreamIndex !== undefined) {
                        localVarQueryParameter['subtitleStreamIndex'] = subtitleStreamIndex;
                    }
                    if (subtitleMethod !== undefined) {
                        localVarQueryParameter['subtitleMethod'] = subtitleMethod;
                    }
                    if (maxRefFrames !== undefined) {
                        localVarQueryParameter['maxRefFrames'] = maxRefFrames;
                    }
                    if (maxVideoBitDepth !== undefined) {
                        localVarQueryParameter['maxVideoBitDepth'] = maxVideoBitDepth;
                    }
                    if (requireAvc !== undefined) {
                        localVarQueryParameter['requireAvc'] = requireAvc;
                    }
                    if (deInterlace !== undefined) {
                        localVarQueryParameter['deInterlace'] = deInterlace;
                    }
                    if (requireNonAnamorphic !== undefined) {
                        localVarQueryParameter['requireNonAnamorphic'] = requireNonAnamorphic;
                    }
                    if (transcodingMaxAudioChannels !== undefined) {
                        localVarQueryParameter['transcodingMaxAudioChannels'] = transcodingMaxAudioChannels;
                    }
                    if (cpuCoreLimit !== undefined) {
                        localVarQueryParameter['cpuCoreLimit'] = cpuCoreLimit;
                    }
                    if (liveStreamId !== undefined) {
                        localVarQueryParameter['liveStreamId'] = liveStreamId;
                    }
                    if (enableMpegtsM2TsMode !== undefined) {
                        localVarQueryParameter['enableMpegtsM2TsMode'] = enableMpegtsM2TsMode;
                    }
                    if (videoCodec !== undefined) {
                        localVarQueryParameter['videoCodec'] = videoCodec;
                    }
                    if (subtitleCodec !== undefined) {
                        localVarQueryParameter['subtitleCodec'] = subtitleCodec;
                    }
                    if (transcodeReasons !== undefined) {
                        localVarQueryParameter['transcodeReasons'] = transcodeReasons;
                    }
                    if (audioStreamIndex !== undefined) {
                        localVarQueryParameter['audioStreamIndex'] = audioStreamIndex;
                    }
                    if (videoStreamIndex !== undefined) {
                        localVarQueryParameter['videoStreamIndex'] = videoStreamIndex;
                    }
                    if (context !== undefined) {
                        localVarQueryParameter['context'] = context;
                    }
                    if (streamOptions !== undefined) {
                        localVarQueryParameter['streamOptions'] = streamOptions;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Merges videos into a single record.
         * @param {Array<string>} ids Item id list. This allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVersions: function (ids, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'ids' is not null or undefined
                            (0, common_1.assertParamExists)('mergeVersions', 'ids', ids);
                            localVarPath = "/Videos/MergeVersions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VideosApiAxiosParamCreator = VideosApiAxiosParamCreator;
/**
 * VideosApi - functional programming interface
 * @export
 */
var VideosApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VideosApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Removes alternate video sources.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlternateSources: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAlternateSources(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets additional parts for a video.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalPart: function (itemId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAdditionalPart(itemId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVideoStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVideoStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headVideoStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.headVideoStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Merges videos into a single record.
         * @param {Array<string>} ids Item id list. This allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVersions: function (ids, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mergeVersions(ids, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.VideosApiFp = VideosApiFp;
/**
 * VideosApi - factory interface
 * @export
 */
var VideosApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VideosApiFp)(configuration);
    return {
        /**
         *
         * @summary Removes alternate video sources.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlternateSources: function (itemId, options) {
            return localVarFp.deleteAlternateSources(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets additional parts for a video.
         * @param {string} itemId The item id.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalPart: function (itemId, userId, options) {
            return localVarFp.getAdditionalPart(itemId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getVideoStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.getVideoStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} [container] The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStream: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.headVideoStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets a video stream.
         * @param {string} itemId The item id.
         * @param {string} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
         * @param {string} [params] The streaming parameters.
         * @param {string} [tag] The tag.
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [playSessionId] The play session id.
         * @param {string} [segmentContainer] The segment container.
         * @param {number} [segmentLength] The segment length.
         * @param {number} [minSegments] The minimum number of segments.
         * @param {string} [mediaSourceId] The media version id, if playing an alternate version.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url\&#39;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
         * @param {boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
         * @param {boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
         * @param {number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
         * @param {string} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional. The maximum video bit depth.
         * @param {boolean} [requireAvc] Optional. Whether to require avc.
         * @param {boolean} [deInterlace] Optional. Whether to deinterlace the video.
         * @param {boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
         * @param {number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
         * @param {number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
         * @param {string} [liveStreamId] The live stream id.
         * @param {boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url\&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
         * @param {string} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
         * @param {string} [transcodeReasons] Optional. The transcoding reason.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
         * @param {{ [key: string]: string; }} [streamOptions] Optional. The streaming options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headVideoStreamByContainer: function (itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options) {
            return localVarFp.headVideoStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Merges videos into a single record.
         * @param {Array<string>} ids Item id list. This allows multiple, comma delimited.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVersions: function (ids, options) {
            return localVarFp.mergeVersions(ids, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VideosApiFactory = VideosApiFactory;
/**
 * VideosApi - object-oriented interface
 * @export
 * @class VideosApi
 * @extends {BaseAPI}
 */
var VideosApi = /** @class */ (function (_super) {
    __extends(VideosApi, _super);
    function VideosApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Removes alternate video sources.
     * @param {VideosApiDeleteAlternateSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.deleteAlternateSources = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).deleteAlternateSources(requestParameters.itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets additional parts for a video.
     * @param {VideosApiGetAdditionalPartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.getAdditionalPart = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).getAdditionalPart(requestParameters.itemId, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream.
     * @param {VideosApiGetVideoStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.getVideoStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).getVideoStream(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream.
     * @param {VideosApiGetVideoStreamByContainerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.getVideoStreamByContainer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).getVideoStreamByContainer(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream.
     * @param {VideosApiHeadVideoStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.headVideoStream = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).headVideoStream(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets a video stream.
     * @param {VideosApiHeadVideoStreamByContainerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.headVideoStreamByContainer = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).headVideoStreamByContainer(requestParameters.itemId, requestParameters.container, requestParameters._static, requestParameters.params, requestParameters.tag, requestParameters.deviceProfileId, requestParameters.playSessionId, requestParameters.segmentContainer, requestParameters.segmentLength, requestParameters.minSegments, requestParameters.mediaSourceId, requestParameters.deviceId, requestParameters.audioCodec, requestParameters.enableAutoStreamCopy, requestParameters.allowVideoStreamCopy, requestParameters.allowAudioStreamCopy, requestParameters.breakOnNonKeyFrames, requestParameters.audioSampleRate, requestParameters.maxAudioBitDepth, requestParameters.audioBitRate, requestParameters.audioChannels, requestParameters.maxAudioChannels, requestParameters.profile, requestParameters.level, requestParameters.framerate, requestParameters.maxFramerate, requestParameters.copyTimestamps, requestParameters.startTimeTicks, requestParameters.width, requestParameters.height, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.videoBitRate, requestParameters.subtitleStreamIndex, requestParameters.subtitleMethod, requestParameters.maxRefFrames, requestParameters.maxVideoBitDepth, requestParameters.requireAvc, requestParameters.deInterlace, requestParameters.requireNonAnamorphic, requestParameters.transcodingMaxAudioChannels, requestParameters.cpuCoreLimit, requestParameters.liveStreamId, requestParameters.enableMpegtsM2TsMode, requestParameters.videoCodec, requestParameters.subtitleCodec, requestParameters.transcodeReasons, requestParameters.audioStreamIndex, requestParameters.videoStreamIndex, requestParameters.context, requestParameters.streamOptions, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Merges videos into a single record.
     * @param {VideosApiMergeVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    VideosApi.prototype.mergeVersions = function (requestParameters, options) {
        var _this = this;
        return (0, exports.VideosApiFp)(this.configuration).mergeVersions(requestParameters.ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VideosApi;
}(base_1.BaseAPI));
exports.VideosApi = VideosApi;

},{"../base":68,"../common":69,"axios":362}],67:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YearsApi = exports.YearsApiFactory = exports.YearsApiFp = exports.YearsApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * YearsApi - axios parameter creator
 * @export
 */
var YearsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Gets a year.
         * @param {number} year The year.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYear: function (year, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'year' is not null or undefined
                            (0, common_1.assertParamExists)('getYear', 'year', year);
                            localVarPath = "/Years/{year}"
                                .replace("{".concat("year", "}"), encodeURIComponent(String(year)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get years.
         * @param {number} [startIndex] Skips over a given number of items within the results. Use for paging.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be excluded based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be included based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User Id.
         * @param {boolean} [recursive] Search recursively.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYears: function (startIndex, limit, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, mediaTypes, sortBy, enableUserData, imageTypeLimit, enableImageTypes, userId, recursive, enableImages, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/Years";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication CustomAuthentication required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Emby-Authorization", configuration)];
                        case 1:
                            // authentication CustomAuthentication required
                            _a.sent();
                            if (startIndex !== undefined) {
                                localVarQueryParameter['startIndex'] = startIndex;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (sortOrder) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parentId'] = parentId;
                            }
                            if (fields) {
                                localVarQueryParameter['fields'] = fields;
                            }
                            if (excludeItemTypes) {
                                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
                            }
                            if (includeItemTypes) {
                                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
                            }
                            if (mediaTypes) {
                                localVarQueryParameter['mediaTypes'] = mediaTypes;
                            }
                            if (sortBy) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            if (enableUserData !== undefined) {
                                localVarQueryParameter['enableUserData'] = enableUserData;
                            }
                            if (imageTypeLimit !== undefined) {
                                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
                            }
                            if (enableImageTypes) {
                                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['userId'] = userId;
                            }
                            if (recursive !== undefined) {
                                localVarQueryParameter['recursive'] = recursive;
                            }
                            if (enableImages !== undefined) {
                                localVarQueryParameter['enableImages'] = enableImages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.YearsApiAxiosParamCreator = YearsApiAxiosParamCreator;
/**
 * YearsApi - functional programming interface
 * @export
 */
var YearsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.YearsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Gets a year.
         * @param {number} year The year.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYear: function (year, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getYear(year, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get years.
         * @param {number} [startIndex] Skips over a given number of items within the results. Use for paging.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be excluded based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be included based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User Id.
         * @param {boolean} [recursive] Search recursively.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYears: function (startIndex, limit, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, mediaTypes, sortBy, enableUserData, imageTypeLimit, enableImageTypes, userId, recursive, enableImages, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getYears(startIndex, limit, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, mediaTypes, sortBy, enableUserData, imageTypeLimit, enableImageTypes, userId, recursive, enableImages, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.YearsApiFp = YearsApiFp;
/**
 * YearsApi - factory interface
 * @export
 */
var YearsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.YearsApiFp)(configuration);
    return {
        /**
         *
         * @summary Gets a year.
         * @param {number} year The year.
         * @param {string} [userId] Optional. Filter by user id, and attach user data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYear: function (year, userId, options) {
            return localVarFp.getYear(year, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get years.
         * @param {number} [startIndex] Skips over a given number of items within the results. Use for paging.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {Array<SortOrder>} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {Array<ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
         * @param {Array<string>} [excludeItemTypes] Optional. If specified, results will be excluded based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [includeItemTypes] Optional. If specified, results will be included based on item type. This allows multiple, comma delimited.
         * @param {Array<string>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
         * @param {Array<string>} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [enableUserData] Optional. Include user data.
         * @param {number} [imageTypeLimit] Optional. The max number of images to return, per image type.
         * @param {Array<ImageType>} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] User Id.
         * @param {boolean} [recursive] Search recursively.
         * @param {boolean} [enableImages] Optional. Include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYears: function (startIndex, limit, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, mediaTypes, sortBy, enableUserData, imageTypeLimit, enableImageTypes, userId, recursive, enableImages, options) {
            return localVarFp.getYears(startIndex, limit, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, mediaTypes, sortBy, enableUserData, imageTypeLimit, enableImageTypes, userId, recursive, enableImages, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.YearsApiFactory = YearsApiFactory;
/**
 * YearsApi - object-oriented interface
 * @export
 * @class YearsApi
 * @extends {BaseAPI}
 */
var YearsApi = /** @class */ (function (_super) {
    __extends(YearsApi, _super);
    function YearsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Gets a year.
     * @param {YearsApiGetYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YearsApi
     */
    YearsApi.prototype.getYear = function (requestParameters, options) {
        var _this = this;
        return (0, exports.YearsApiFp)(this.configuration).getYear(requestParameters.year, requestParameters.userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get years.
     * @param {YearsApiGetYearsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YearsApi
     */
    YearsApi.prototype.getYears = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.YearsApiFp)(this.configuration).getYears(requestParameters.startIndex, requestParameters.limit, requestParameters.sortOrder, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.includeItemTypes, requestParameters.mediaTypes, requestParameters.sortBy, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.userId, requestParameters.recursive, requestParameters.enableImages, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return YearsApi;
}(base_1.BaseAPI));
exports.YearsApi = YearsApi;

},{"../base":68,"../common":69,"axios":362}],68:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
var axios_1 = __importDefault(require("axios"));
exports.BASE_PATH = "http://localhost".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, axios) {
        if (basePath === void 0) { basePath = exports.BASE_PATH; }
        if (axios === void 0) { axios = axios_1.default; }
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;

},{"axios":362}],69:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
var base_1 = require("./base");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com';
/**
 *
 * @throws {RequiredError}
 * @export
 */
var assertParamExists = function (functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new base_1.RequiredError(paramName, "Required parameter ".concat(paramName, " was null or undefined when calling ").concat(functionName, "."));
    }
};
exports.assertParamExists = assertParamExists;
/**
 *
 * @export
 */
var setApiKeyToObject = function (object, keyParamName, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarApiKeyValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                    if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.apiKey(keyParamName)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.apiKey];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarApiKeyValue = _a;
                    object[keyParamName] = localVarApiKeyValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setApiKeyToObject = setApiKeyToObject;
/**
 *
 * @export
 */
var setBasicAuthToObject = function (object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
};
exports.setBasicAuthToObject = setBasicAuthToObject;
/**
 *
 * @export
 */
var setBearerAuthToObject = function (object, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var accessToken, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken()];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    accessToken = _a;
                    object["Authorization"] = "Bearer " + accessToken;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
/**
 *
 * @export
 */
var setOAuthToObject = function (object, name, scopes, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarAccessTokenValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken(name, scopes)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarAccessTokenValue = _a;
                    object["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setOAuthToObject = setOAuthToObject;
/**
 *
 * @export
 */
var setSearchParams = function (url) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
    }
    var searchParams = new URLSearchParams(url.search);
    for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
        var object = objects_1[_a];
        for (var key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (var _b = 0, _c = object[key]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    searchParams.append(key, item);
                }
            }
            else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
 *
 * @export
 */
var serializeDataIfNeeded = function (value, requestOptions, configuration) {
    var nonString = typeof value !== 'string';
    var needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
var toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
exports.toPathString = toPathString;
/**
 *
 * @export
 */
var createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
    return function (axios, basePath) {
        if (axios === void 0) { axios = globalAxios; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        var axiosRequestArgs = __assign(__assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
    };
};
exports.createRequestFunction = createRequestFunction;

},{"./base":68}],70:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
var Configuration = /** @class */ (function () {
    function Configuration(param) {
        if (param === void 0) { param = {}; }
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    Configuration.prototype.isJsonMime = function (mime) {
        var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    };
    return Configuration;
}());
exports.Configuration = Configuration;

},{}],71:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api"), exports);
__exportStar(require("./configuration"), exports);
__exportStar(require("./models"), exports);

},{"./api":7,"./configuration":70,"./models":168}],72:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });

},{}],73:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],74:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],75:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],76:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],77:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],78:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],79:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],80:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Architecture = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var Architecture;
(function (Architecture) {
    Architecture["X86"] = "X86";
    Architecture["X64"] = "X64";
    Architecture["Arm"] = "Arm";
    Architecture["Arm64"] = "Arm64";
    Architecture["Wasm"] = "Wasm";
})(Architecture = exports.Architecture || (exports.Architecture = {}));

},{}],81:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],82:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],83:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],84:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],85:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],86:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],87:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],88:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],89:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],90:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],91:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],92:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],93:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],94:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],95:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],96:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],97:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],98:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],99:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],100:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelItemSortField = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ChannelItemSortField;
(function (ChannelItemSortField) {
    ChannelItemSortField["Name"] = "Name";
    ChannelItemSortField["CommunityRating"] = "CommunityRating";
    ChannelItemSortField["PremiereDate"] = "PremiereDate";
    ChannelItemSortField["DateCreated"] = "DateCreated";
    ChannelItemSortField["Runtime"] = "Runtime";
    ChannelItemSortField["PlayCount"] = "PlayCount";
    ChannelItemSortField["CommunityPlayCount"] = "CommunityPlayCount";
})(ChannelItemSortField = exports.ChannelItemSortField || (exports.ChannelItemSortField = {}));

},{}],101:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],102:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMediaContentType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ChannelMediaContentType;
(function (ChannelMediaContentType) {
    ChannelMediaContentType["Clip"] = "Clip";
    ChannelMediaContentType["Podcast"] = "Podcast";
    ChannelMediaContentType["Trailer"] = "Trailer";
    ChannelMediaContentType["Movie"] = "Movie";
    ChannelMediaContentType["Episode"] = "Episode";
    ChannelMediaContentType["Song"] = "Song";
    ChannelMediaContentType["MovieExtra"] = "MovieExtra";
    ChannelMediaContentType["TvExtra"] = "TvExtra";
})(ChannelMediaContentType = exports.ChannelMediaContentType || (exports.ChannelMediaContentType = {}));

},{}],103:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMediaType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ChannelMediaType;
(function (ChannelMediaType) {
    ChannelMediaType["Audio"] = "Audio";
    ChannelMediaType["Video"] = "Video";
    ChannelMediaType["Photo"] = "Photo";
})(ChannelMediaType = exports.ChannelMediaType || (exports.ChannelMediaType = {}));

},{}],104:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelType = void 0;
/**
 * Enum ChannelType.
 * @export
 * @enum {string}
 */
var ChannelType;
(function (ChannelType) {
    ChannelType["Tv"] = "TV";
    ChannelType["Radio"] = "Radio";
})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));

},{}],105:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],106:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],107:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],108:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],109:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodecType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var CodecType;
(function (CodecType) {
    CodecType["Video"] = "Video";
    CodecType["VideoAudio"] = "VideoAudio";
    CodecType["Audio"] = "Audio";
})(CodecType = exports.CodecType || (exports.CodecType = {}));

},{}],110:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],111:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionTypeOptions = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var CollectionTypeOptions;
(function (CollectionTypeOptions) {
    CollectionTypeOptions["Movies"] = "Movies";
    CollectionTypeOptions["TvShows"] = "TvShows";
    CollectionTypeOptions["Music"] = "Music";
    CollectionTypeOptions["MusicVideos"] = "MusicVideos";
    CollectionTypeOptions["HomeVideos"] = "HomeVideos";
    CollectionTypeOptions["BoxSets"] = "BoxSets";
    CollectionTypeOptions["Books"] = "Books";
    CollectionTypeOptions["Mixed"] = "Mixed";
})(CollectionTypeOptions = exports.CollectionTypeOptions || (exports.CollectionTypeOptions = {}));

},{}],112:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],113:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationPageType = void 0;
/**
 * Enum ConfigurationPageType.
 * @export
 * @enum {string}
 */
var ConfigurationPageType;
(function (ConfigurationPageType) {
    ConfigurationPageType["PluginConfiguration"] = "PluginConfiguration";
    ConfigurationPageType["None"] = "None";
})(ConfigurationPageType = exports.ConfigurationPageType || (exports.ConfigurationPageType = {}));

},{}],114:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],115:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],116:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],117:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],118:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],119:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],120:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DayOfWeek = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["Sunday"] = "Sunday";
    DayOfWeek["Monday"] = "Monday";
    DayOfWeek["Tuesday"] = "Tuesday";
    DayOfWeek["Wednesday"] = "Wednesday";
    DayOfWeek["Thursday"] = "Thursday";
    DayOfWeek["Friday"] = "Friday";
    DayOfWeek["Saturday"] = "Saturday";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));

},{}],121:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DayPattern = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var DayPattern;
(function (DayPattern) {
    DayPattern["Daily"] = "Daily";
    DayPattern["Weekdays"] = "Weekdays";
    DayPattern["Weekends"] = "Weekends";
})(DayPattern = exports.DayPattern || (exports.DayPattern = {}));

},{}],122:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],123:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],124:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],125:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],126:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],127:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],128:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceProfileType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var DeviceProfileType;
(function (DeviceProfileType) {
    DeviceProfileType["System"] = "System";
    DeviceProfileType["User"] = "User";
})(DeviceProfileType = exports.DeviceProfileType || (exports.DeviceProfileType = {}));

},{}],129:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],130:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],131:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],132:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlnaProfileType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var DlnaProfileType;
(function (DlnaProfileType) {
    DlnaProfileType["Audio"] = "Audio";
    DlnaProfileType["Video"] = "Video";
    DlnaProfileType["Photo"] = "Photo";
})(DlnaProfileType = exports.DlnaProfileType || (exports.DlnaProfileType = {}));

},{}],133:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicDayOfWeek = void 0;
/**
 * An enum that represents a day of the week, weekdays, weekends, or all days.
 * @export
 * @enum {string}
 */
var DynamicDayOfWeek;
(function (DynamicDayOfWeek) {
    DynamicDayOfWeek["Sunday"] = "Sunday";
    DynamicDayOfWeek["Monday"] = "Monday";
    DynamicDayOfWeek["Tuesday"] = "Tuesday";
    DynamicDayOfWeek["Wednesday"] = "Wednesday";
    DynamicDayOfWeek["Thursday"] = "Thursday";
    DynamicDayOfWeek["Friday"] = "Friday";
    DynamicDayOfWeek["Saturday"] = "Saturday";
    DynamicDayOfWeek["Everyday"] = "Everyday";
    DynamicDayOfWeek["Weekday"] = "Weekday";
    DynamicDayOfWeek["Weekend"] = "Weekend";
})(DynamicDayOfWeek = exports.DynamicDayOfWeek || (exports.DynamicDayOfWeek = {}));

},{}],134:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncodingContext = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var EncodingContext;
(function (EncodingContext) {
    EncodingContext["Streaming"] = "Streaming";
    EncodingContext["Static"] = "Static";
})(EncodingContext = exports.EncodingContext || (exports.EncodingContext = {}));

},{}],135:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],136:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],137:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalIdMediaType = void 0;
/**
 * The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
 * @export
 * @enum {string}
 */
var ExternalIdMediaType;
(function (ExternalIdMediaType) {
    ExternalIdMediaType["Album"] = "Album";
    ExternalIdMediaType["AlbumArtist"] = "AlbumArtist";
    ExternalIdMediaType["Artist"] = "Artist";
    ExternalIdMediaType["BoxSet"] = "BoxSet";
    ExternalIdMediaType["Episode"] = "Episode";
    ExternalIdMediaType["Movie"] = "Movie";
    ExternalIdMediaType["OtherArtist"] = "OtherArtist";
    ExternalIdMediaType["Person"] = "Person";
    ExternalIdMediaType["ReleaseGroup"] = "ReleaseGroup";
    ExternalIdMediaType["Season"] = "Season";
    ExternalIdMediaType["Series"] = "Series";
    ExternalIdMediaType["Track"] = "Track";
})(ExternalIdMediaType = exports.ExternalIdMediaType || (exports.ExternalIdMediaType = {}));

},{}],138:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],139:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FFmpegLocation = void 0;
/**
 * Enum describing the location of the FFmpeg tool.
 * @export
 * @enum {string}
 */
var FFmpegLocation;
(function (FFmpegLocation) {
    FFmpegLocation["NotFound"] = "NotFound";
    FFmpegLocation["SetByArgument"] = "SetByArgument";
    FFmpegLocation["Custom"] = "Custom";
    FFmpegLocation["System"] = "System";
})(FFmpegLocation = exports.FFmpegLocation || (exports.FFmpegLocation = {}));

},{}],140:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],141:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemEntryType = void 0;
/**
 * Enum FileSystemEntryType.
 * @export
 * @enum {string}
 */
var FileSystemEntryType;
(function (FileSystemEntryType) {
    FileSystemEntryType["File"] = "File";
    FileSystemEntryType["Directory"] = "Directory";
    FileSystemEntryType["NetworkComputer"] = "NetworkComputer";
    FileSystemEntryType["NetworkShare"] = "NetworkShare";
})(FileSystemEntryType = exports.FileSystemEntryType || (exports.FileSystemEntryType = {}));

},{}],142:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],143:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForgotPasswordAction = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ForgotPasswordAction;
(function (ForgotPasswordAction) {
    ForgotPasswordAction["ContactAdmin"] = "ContactAdmin";
    ForgotPasswordAction["PinCode"] = "PinCode";
    ForgotPasswordAction["InNetworkRequired"] = "InNetworkRequired";
})(ForgotPasswordAction = exports.ForgotPasswordAction || (exports.ForgotPasswordAction = {}));

},{}],144:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],145:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],146:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],147:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralCommandType = void 0;
/**
 * This exists simply to identify a set of known commands.
 * @export
 * @enum {string}
 */
var GeneralCommandType;
(function (GeneralCommandType) {
    GeneralCommandType["MoveUp"] = "MoveUp";
    GeneralCommandType["MoveDown"] = "MoveDown";
    GeneralCommandType["MoveLeft"] = "MoveLeft";
    GeneralCommandType["MoveRight"] = "MoveRight";
    GeneralCommandType["PageUp"] = "PageUp";
    GeneralCommandType["PageDown"] = "PageDown";
    GeneralCommandType["PreviousLetter"] = "PreviousLetter";
    GeneralCommandType["NextLetter"] = "NextLetter";
    GeneralCommandType["ToggleOsd"] = "ToggleOsd";
    GeneralCommandType["ToggleContextMenu"] = "ToggleContextMenu";
    GeneralCommandType["Select"] = "Select";
    GeneralCommandType["Back"] = "Back";
    GeneralCommandType["TakeScreenshot"] = "TakeScreenshot";
    GeneralCommandType["SendKey"] = "SendKey";
    GeneralCommandType["SendString"] = "SendString";
    GeneralCommandType["GoHome"] = "GoHome";
    GeneralCommandType["GoToSettings"] = "GoToSettings";
    GeneralCommandType["VolumeUp"] = "VolumeUp";
    GeneralCommandType["VolumeDown"] = "VolumeDown";
    GeneralCommandType["Mute"] = "Mute";
    GeneralCommandType["Unmute"] = "Unmute";
    GeneralCommandType["ToggleMute"] = "ToggleMute";
    GeneralCommandType["SetVolume"] = "SetVolume";
    GeneralCommandType["SetAudioStreamIndex"] = "SetAudioStreamIndex";
    GeneralCommandType["SetSubtitleStreamIndex"] = "SetSubtitleStreamIndex";
    GeneralCommandType["ToggleFullscreen"] = "ToggleFullscreen";
    GeneralCommandType["DisplayContent"] = "DisplayContent";
    GeneralCommandType["GoToSearch"] = "GoToSearch";
    GeneralCommandType["DisplayMessage"] = "DisplayMessage";
    GeneralCommandType["SetRepeatMode"] = "SetRepeatMode";
    GeneralCommandType["ChannelUp"] = "ChannelUp";
    GeneralCommandType["ChannelDown"] = "ChannelDown";
    GeneralCommandType["Guide"] = "Guide";
    GeneralCommandType["ToggleStats"] = "ToggleStats";
    GeneralCommandType["PlayMediaSource"] = "PlayMediaSource";
    GeneralCommandType["PlayTrailers"] = "PlayTrailers";
    GeneralCommandType["SetShuffleQueue"] = "SetShuffleQueue";
    GeneralCommandType["PlayState"] = "PlayState";
    GeneralCommandType["PlayNext"] = "PlayNext";
    GeneralCommandType["ToggleOsdMenu"] = "ToggleOsdMenu";
    GeneralCommandType["Play"] = "Play";
})(GeneralCommandType = exports.GeneralCommandType || (exports.GeneralCommandType = {}));

},{}],148:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],149:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],150:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],151:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupQueueMode = void 0;
/**
 * Enum GroupQueueMode.
 * @export
 * @enum {string}
 */
var GroupQueueMode;
(function (GroupQueueMode) {
    GroupQueueMode["Queue"] = "Queue";
    GroupQueueMode["QueueNext"] = "QueueNext";
})(GroupQueueMode = exports.GroupQueueMode || (exports.GroupQueueMode = {}));

},{}],152:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupRepeatMode = void 0;
/**
 * Enum GroupRepeatMode.
 * @export
 * @enum {string}
 */
var GroupRepeatMode;
(function (GroupRepeatMode) {
    GroupRepeatMode["RepeatOne"] = "RepeatOne";
    GroupRepeatMode["RepeatAll"] = "RepeatAll";
    GroupRepeatMode["RepeatNone"] = "RepeatNone";
})(GroupRepeatMode = exports.GroupRepeatMode || (exports.GroupRepeatMode = {}));

},{}],153:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupShuffleMode = void 0;
/**
 * Enum GroupShuffleMode.
 * @export
 * @enum {string}
 */
var GroupShuffleMode;
(function (GroupShuffleMode) {
    GroupShuffleMode["Sorted"] = "Sorted";
    GroupShuffleMode["Shuffle"] = "Shuffle";
})(GroupShuffleMode = exports.GroupShuffleMode || (exports.GroupShuffleMode = {}));

},{}],154:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupStateType = void 0;
/**
 * Enum GroupState.
 * @export
 * @enum {string}
 */
var GroupStateType;
(function (GroupStateType) {
    GroupStateType["Idle"] = "Idle";
    GroupStateType["Waiting"] = "Waiting";
    GroupStateType["Paused"] = "Paused";
    GroupStateType["Playing"] = "Playing";
})(GroupStateType = exports.GroupStateType || (exports.GroupStateType = {}));

},{}],155:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupUpdateType = void 0;
/**
 * Enum GroupUpdateType.
 * @export
 * @enum {string}
 */
var GroupUpdateType;
(function (GroupUpdateType) {
    GroupUpdateType["UserJoined"] = "UserJoined";
    GroupUpdateType["UserLeft"] = "UserLeft";
    GroupUpdateType["GroupJoined"] = "GroupJoined";
    GroupUpdateType["GroupLeft"] = "GroupLeft";
    GroupUpdateType["StateUpdate"] = "StateUpdate";
    GroupUpdateType["PlayQueue"] = "PlayQueue";
    GroupUpdateType["NotInGroup"] = "NotInGroup";
    GroupUpdateType["GroupDoesNotExist"] = "GroupDoesNotExist";
    GroupUpdateType["CreateGroupDenied"] = "CreateGroupDenied";
    GroupUpdateType["JoinGroupDenied"] = "JoinGroupDenied";
    GroupUpdateType["LibraryAccessDenied"] = "LibraryAccessDenied";
})(GroupUpdateType = exports.GroupUpdateType || (exports.GroupUpdateType = {}));

},{}],156:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],157:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderMatchType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var HeaderMatchType;
(function (HeaderMatchType) {
    HeaderMatchType["Equals"] = "Equals";
    HeaderMatchType["Regex"] = "Regex";
    HeaderMatchType["Substring"] = "Substring";
})(HeaderMatchType = exports.HeaderMatchType || (exports.HeaderMatchType = {}));

},{}],158:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],159:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],160:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],161:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageFormat = void 0;
/**
 * Enum ImageOutputFormat.
 * @export
 * @enum {string}
 */
var ImageFormat;
(function (ImageFormat) {
    ImageFormat["Bmp"] = "Bmp";
    ImageFormat["Gif"] = "Gif";
    ImageFormat["Jpg"] = "Jpg";
    ImageFormat["Png"] = "Png";
    ImageFormat["Webp"] = "Webp";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));

},{}],162:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],163:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],164:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageOrientation = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ImageOrientation;
(function (ImageOrientation) {
    ImageOrientation["TopLeft"] = "TopLeft";
    ImageOrientation["TopRight"] = "TopRight";
    ImageOrientation["BottomRight"] = "BottomRight";
    ImageOrientation["BottomLeft"] = "BottomLeft";
    ImageOrientation["LeftTop"] = "LeftTop";
    ImageOrientation["RightTop"] = "RightTop";
    ImageOrientation["RightBottom"] = "RightBottom";
    ImageOrientation["LeftBottom"] = "LeftBottom";
})(ImageOrientation = exports.ImageOrientation || (exports.ImageOrientation = {}));

},{}],165:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],166:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageSavingConvention = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ImageSavingConvention;
(function (ImageSavingConvention) {
    ImageSavingConvention["Legacy"] = "Legacy";
    ImageSavingConvention["Compatible"] = "Compatible";
})(ImageSavingConvention = exports.ImageSavingConvention || (exports.ImageSavingConvention = {}));

},{}],167:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageType = void 0;
/**
 * Enum ImageType.
 * @export
 * @enum {string}
 */
var ImageType;
(function (ImageType) {
    ImageType["Primary"] = "Primary";
    ImageType["Art"] = "Art";
    ImageType["Backdrop"] = "Backdrop";
    ImageType["Banner"] = "Banner";
    ImageType["Logo"] = "Logo";
    ImageType["Thumb"] = "Thumb";
    ImageType["Disc"] = "Disc";
    ImageType["Box"] = "Box";
    ImageType["Screenshot"] = "Screenshot";
    ImageType["Menu"] = "Menu";
    ImageType["Chapter"] = "Chapter";
    ImageType["BoxRear"] = "BoxRear";
    ImageType["Profile"] = "Profile";
})(ImageType = exports.ImageType || (exports.ImageType = {}));

},{}],168:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./access-schedule"), exports);
__exportStar(require("./activity-log-entry"), exports);
__exportStar(require("./activity-log-entry-query-result"), exports);
__exportStar(require("./add-virtual-folder-dto"), exports);
__exportStar(require("./admin-notification-dto"), exports);
__exportStar(require("./album-info"), exports);
__exportStar(require("./album-info-remote-search-query"), exports);
__exportStar(require("./all-theme-media-result"), exports);
__exportStar(require("./architecture"), exports);
__exportStar(require("./artist-info"), exports);
__exportStar(require("./artist-info-remote-search-query"), exports);
__exportStar(require("./authenticate-user-by-name"), exports);
__exportStar(require("./authentication-info"), exports);
__exportStar(require("./authentication-info-query-result"), exports);
__exportStar(require("./authentication-result"), exports);
__exportStar(require("./base-item"), exports);
__exportStar(require("./base-item-dto"), exports);
__exportStar(require("./base-item-dto-image-blur-hashes"), exports);
__exportStar(require("./base-item-dto-query-result"), exports);
__exportStar(require("./base-item-person"), exports);
__exportStar(require("./base-item-person-image-blur-hashes"), exports);
__exportStar(require("./book-info"), exports);
__exportStar(require("./book-info-remote-search-query"), exports);
__exportStar(require("./box-set-info"), exports);
__exportStar(require("./box-set-info-remote-search-query"), exports);
__exportStar(require("./branding-options"), exports);
__exportStar(require("./buffer-request-dto"), exports);
__exportStar(require("./channel-features"), exports);
__exportStar(require("./channel-item-sort-field"), exports);
__exportStar(require("./channel-mapping-options-dto"), exports);
__exportStar(require("./channel-media-content-type"), exports);
__exportStar(require("./channel-media-type"), exports);
__exportStar(require("./channel-type"), exports);
__exportStar(require("./chapter-info"), exports);
__exportStar(require("./client-capabilities"), exports);
__exportStar(require("./client-capabilities-dto"), exports);
__exportStar(require("./codec-profile"), exports);
__exportStar(require("./codec-type"), exports);
__exportStar(require("./collection-creation-result"), exports);
__exportStar(require("./collection-type-options"), exports);
__exportStar(require("./configuration-page-info"), exports);
__exportStar(require("./configuration-page-type"), exports);
__exportStar(require("./container-profile"), exports);
__exportStar(require("./control-response"), exports);
__exportStar(require("./country-info"), exports);
__exportStar(require("./create-playlist-dto"), exports);
__exportStar(require("./create-user-by-name"), exports);
__exportStar(require("./culture-dto"), exports);
__exportStar(require("./day-of-week"), exports);
__exportStar(require("./day-pattern"), exports);
__exportStar(require("./default-directory-browser-info-dto"), exports);
__exportStar(require("./device-identification"), exports);
__exportStar(require("./device-info"), exports);
__exportStar(require("./device-info-query-result"), exports);
__exportStar(require("./device-options"), exports);
__exportStar(require("./device-profile"), exports);
__exportStar(require("./device-profile-info"), exports);
__exportStar(require("./device-profile-type"), exports);
__exportStar(require("./direct-play-profile"), exports);
__exportStar(require("./display-preferences-dto"), exports);
__exportStar(require("./dlna-profile-type"), exports);
__exportStar(require("./dynamic-day-of-week"), exports);
__exportStar(require("./encoding-context"), exports);
__exportStar(require("./end-point-info"), exports);
__exportStar(require("./external-id-info"), exports);
__exportStar(require("./external-id-media-type"), exports);
__exportStar(require("./external-url"), exports);
__exportStar(require("./ffmpeg-location"), exports);
__exportStar(require("./file-system-entry-info"), exports);
__exportStar(require("./file-system-entry-type"), exports);
__exportStar(require("./font-file"), exports);
__exportStar(require("./forgot-password-action"), exports);
__exportStar(require("./forgot-password-dto"), exports);
__exportStar(require("./forgot-password-pin-dto"), exports);
__exportStar(require("./forgot-password-result"), exports);
__exportStar(require("./general-command"), exports);
__exportStar(require("./general-command-type"), exports);
__exportStar(require("./get-programs-dto"), exports);
__exportStar(require("./group-info-dto"), exports);
__exportStar(require("./group-queue-mode"), exports);
__exportStar(require("./group-repeat-mode"), exports);
__exportStar(require("./group-shuffle-mode"), exports);
__exportStar(require("./group-state-type"), exports);
__exportStar(require("./group-update-type"), exports);
__exportStar(require("./guide-info"), exports);
__exportStar(require("./header-match-type"), exports);
__exportStar(require("./http-header-info"), exports);
__exportStar(require("./iplugin"), exports);
__exportStar(require("./ignore-wait-request-dto"), exports);
__exportStar(require("./image-by-name-info"), exports);
__exportStar(require("./image-format"), exports);
__exportStar(require("./image-info"), exports);
__exportStar(require("./image-option"), exports);
__exportStar(require("./image-orientation"), exports);
__exportStar(require("./image-provider-info"), exports);
__exportStar(require("./image-saving-convention"), exports);
__exportStar(require("./image-type"), exports);
__exportStar(require("./installation-info"), exports);
__exportStar(require("./iso-type"), exports);
__exportStar(require("./item-counts"), exports);
__exportStar(require("./item-fields"), exports);
__exportStar(require("./item-filter"), exports);
__exportStar(require("./join-group-request-dto"), exports);
__exportStar(require("./keep-until"), exports);
__exportStar(require("./library-option-info-dto"), exports);
__exportStar(require("./library-options"), exports);
__exportStar(require("./library-options-result-dto"), exports);
__exportStar(require("./library-type-options-dto"), exports);
__exportStar(require("./library-update-info"), exports);
__exportStar(require("./listings-provider-info"), exports);
__exportStar(require("./live-stream-response"), exports);
__exportStar(require("./live-tv-info"), exports);
__exportStar(require("./live-tv-service-info"), exports);
__exportStar(require("./live-tv-service-status"), exports);
__exportStar(require("./localization-option"), exports);
__exportStar(require("./location-type"), exports);
__exportStar(require("./log-file"), exports);
__exportStar(require("./log-level"), exports);
__exportStar(require("./media-attachment"), exports);
__exportStar(require("./media-encoder-path-dto"), exports);
__exportStar(require("./media-path-dto"), exports);
__exportStar(require("./media-path-info"), exports);
__exportStar(require("./media-protocol"), exports);
__exportStar(require("./media-source-info"), exports);
__exportStar(require("./media-source-type"), exports);
__exportStar(require("./media-stream"), exports);
__exportStar(require("./media-stream-type"), exports);
__exportStar(require("./media-update-info-dto"), exports);
__exportStar(require("./media-update-info-path-dto"), exports);
__exportStar(require("./media-url"), exports);
__exportStar(require("./message-command"), exports);
__exportStar(require("./metadata-editor-info"), exports);
__exportStar(require("./metadata-field"), exports);
__exportStar(require("./metadata-options"), exports);
__exportStar(require("./metadata-refresh-mode"), exports);
__exportStar(require("./move-playlist-item-request-dto"), exports);
__exportStar(require("./movie-info"), exports);
__exportStar(require("./movie-info-remote-search-query"), exports);
__exportStar(require("./music-video-info"), exports);
__exportStar(require("./music-video-info-remote-search-query"), exports);
__exportStar(require("./name-guid-pair"), exports);
__exportStar(require("./name-id-pair"), exports);
__exportStar(require("./name-value-pair"), exports);
__exportStar(require("./new-group-request-dto"), exports);
__exportStar(require("./next-item-request-dto"), exports);
__exportStar(require("./notification-dto"), exports);
__exportStar(require("./notification-level"), exports);
__exportStar(require("./notification-result-dto"), exports);
__exportStar(require("./notification-type-info"), exports);
__exportStar(require("./notifications-summary-dto"), exports);
__exportStar(require("./object-group-update"), exports);
__exportStar(require("./open-live-stream-dto"), exports);
__exportStar(require("./package-info"), exports);
__exportStar(require("./parental-rating"), exports);
__exportStar(require("./path-substitution"), exports);
__exportStar(require("./person-lookup-info"), exports);
__exportStar(require("./person-lookup-info-remote-search-query"), exports);
__exportStar(require("./pin-redeem-result"), exports);
__exportStar(require("./ping-request-dto"), exports);
__exportStar(require("./play-access"), exports);
__exportStar(require("./play-command"), exports);
__exportStar(require("./play-method"), exports);
__exportStar(require("./play-request"), exports);
__exportStar(require("./play-request-dto"), exports);
__exportStar(require("./playback-error-code"), exports);
__exportStar(require("./playback-info-dto"), exports);
__exportStar(require("./playback-info-response"), exports);
__exportStar(require("./playback-progress-info"), exports);
__exportStar(require("./playback-start-info"), exports);
__exportStar(require("./playback-stop-info"), exports);
__exportStar(require("./player-state-info"), exports);
__exportStar(require("./playlist-creation-result"), exports);
__exportStar(require("./playstate-command"), exports);
__exportStar(require("./playstate-request"), exports);
__exportStar(require("./plugin-info"), exports);
__exportStar(require("./plugin-security-info"), exports);
__exportStar(require("./plugin-status"), exports);
__exportStar(require("./previous-item-request-dto"), exports);
__exportStar(require("./problem-details"), exports);
__exportStar(require("./profile-condition"), exports);
__exportStar(require("./profile-condition-type"), exports);
__exportStar(require("./profile-condition-value"), exports);
__exportStar(require("./program-audio"), exports);
__exportStar(require("./public-system-info"), exports);
__exportStar(require("./query-filters"), exports);
__exportStar(require("./query-filters-legacy"), exports);
__exportStar(require("./queue-item"), exports);
__exportStar(require("./queue-request-dto"), exports);
__exportStar(require("./quick-connect-dto"), exports);
__exportStar(require("./quick-connect-result"), exports);
__exportStar(require("./quick-connect-state"), exports);
__exportStar(require("./rating-type"), exports);
__exportStar(require("./ready-request-dto"), exports);
__exportStar(require("./recommendation-dto"), exports);
__exportStar(require("./recommendation-type"), exports);
__exportStar(require("./recording-status"), exports);
__exportStar(require("./remote-image-info"), exports);
__exportStar(require("./remote-image-result"), exports);
__exportStar(require("./remote-search-result"), exports);
__exportStar(require("./remote-subtitle-info"), exports);
__exportStar(require("./remove-from-playlist-request-dto"), exports);
__exportStar(require("./repeat-mode"), exports);
__exportStar(require("./repository-info"), exports);
__exportStar(require("./response-profile"), exports);
__exportStar(require("./scroll-direction"), exports);
__exportStar(require("./search-hint"), exports);
__exportStar(require("./search-hint-result"), exports);
__exportStar(require("./seek-request-dto"), exports);
__exportStar(require("./send-command"), exports);
__exportStar(require("./send-command-type"), exports);
__exportStar(require("./series-info"), exports);
__exportStar(require("./series-info-remote-search-query"), exports);
__exportStar(require("./series-status"), exports);
__exportStar(require("./series-timer-info-dto"), exports);
__exportStar(require("./series-timer-info-dto-query-result"), exports);
__exportStar(require("./server-configuration"), exports);
__exportStar(require("./server-discovery-info"), exports);
__exportStar(require("./session-info"), exports);
__exportStar(require("./session-message-type"), exports);
__exportStar(require("./session-user-info"), exports);
__exportStar(require("./set-channel-mapping-dto"), exports);
__exportStar(require("./set-playlist-item-request-dto"), exports);
__exportStar(require("./set-repeat-mode-request-dto"), exports);
__exportStar(require("./set-shuffle-mode-request-dto"), exports);
__exportStar(require("./song-info"), exports);
__exportStar(require("./sort-order"), exports);
__exportStar(require("./special-view-option-dto"), exports);
__exportStar(require("./startup-configuration-dto"), exports);
__exportStar(require("./startup-remote-access-dto"), exports);
__exportStar(require("./startup-user-dto"), exports);
__exportStar(require("./subtitle-delivery-method"), exports);
__exportStar(require("./subtitle-playback-mode"), exports);
__exportStar(require("./subtitle-profile"), exports);
__exportStar(require("./sync-play-user-access-type"), exports);
__exportStar(require("./system-info"), exports);
__exportStar(require("./task-completion-status"), exports);
__exportStar(require("./task-info"), exports);
__exportStar(require("./task-result"), exports);
__exportStar(require("./task-state"), exports);
__exportStar(require("./task-trigger-info"), exports);
__exportStar(require("./theme-media-result"), exports);
__exportStar(require("./timer-event-info"), exports);
__exportStar(require("./timer-info-dto"), exports);
__exportStar(require("./timer-info-dto-query-result"), exports);
__exportStar(require("./trailer-info"), exports);
__exportStar(require("./trailer-info-remote-search-query"), exports);
__exportStar(require("./transcode-reason"), exports);
__exportStar(require("./transcode-seek-info"), exports);
__exportStar(require("./transcoding-info"), exports);
__exportStar(require("./transcoding-profile"), exports);
__exportStar(require("./transport-stream-timestamp"), exports);
__exportStar(require("./tuner-channel-mapping"), exports);
__exportStar(require("./tuner-host-info"), exports);
__exportStar(require("./type-options"), exports);
__exportStar(require("./unrated-item"), exports);
__exportStar(require("./update-library-options-dto"), exports);
__exportStar(require("./update-media-path-request-dto"), exports);
__exportStar(require("./update-user-easy-password"), exports);
__exportStar(require("./update-user-password"), exports);
__exportStar(require("./upload-subtitle-dto"), exports);
__exportStar(require("./user-configuration"), exports);
__exportStar(require("./user-dto"), exports);
__exportStar(require("./user-item-data-dto"), exports);
__exportStar(require("./user-policy"), exports);
__exportStar(require("./utc-time-response"), exports);
__exportStar(require("./validate-path-dto"), exports);
__exportStar(require("./version"), exports);
__exportStar(require("./version-info"), exports);
__exportStar(require("./video3-dformat"), exports);
__exportStar(require("./video-type"), exports);
__exportStar(require("./virtual-folder-info"), exports);
__exportStar(require("./wake-on-lan-info"), exports);
__exportStar(require("./xml-attribute"), exports);

},{"./access-schedule":72,"./activity-log-entry":74,"./activity-log-entry-query-result":73,"./add-virtual-folder-dto":75,"./admin-notification-dto":76,"./album-info":78,"./album-info-remote-search-query":77,"./all-theme-media-result":79,"./architecture":80,"./artist-info":82,"./artist-info-remote-search-query":81,"./authenticate-user-by-name":83,"./authentication-info":85,"./authentication-info-query-result":84,"./authentication-result":86,"./base-item":92,"./base-item-dto":89,"./base-item-dto-image-blur-hashes":87,"./base-item-dto-query-result":88,"./base-item-person":91,"./base-item-person-image-blur-hashes":90,"./book-info":94,"./book-info-remote-search-query":93,"./box-set-info":96,"./box-set-info-remote-search-query":95,"./branding-options":97,"./buffer-request-dto":98,"./channel-features":99,"./channel-item-sort-field":100,"./channel-mapping-options-dto":101,"./channel-media-content-type":102,"./channel-media-type":103,"./channel-type":104,"./chapter-info":105,"./client-capabilities":107,"./client-capabilities-dto":106,"./codec-profile":108,"./codec-type":109,"./collection-creation-result":110,"./collection-type-options":111,"./configuration-page-info":112,"./configuration-page-type":113,"./container-profile":114,"./control-response":115,"./country-info":116,"./create-playlist-dto":117,"./create-user-by-name":118,"./culture-dto":119,"./day-of-week":120,"./day-pattern":121,"./default-directory-browser-info-dto":122,"./device-identification":123,"./device-info":125,"./device-info-query-result":124,"./device-options":126,"./device-profile":129,"./device-profile-info":127,"./device-profile-type":128,"./direct-play-profile":130,"./display-preferences-dto":131,"./dlna-profile-type":132,"./dynamic-day-of-week":133,"./encoding-context":134,"./end-point-info":135,"./external-id-info":136,"./external-id-media-type":137,"./external-url":138,"./ffmpeg-location":139,"./file-system-entry-info":140,"./file-system-entry-type":141,"./font-file":142,"./forgot-password-action":143,"./forgot-password-dto":144,"./forgot-password-pin-dto":145,"./forgot-password-result":146,"./general-command":148,"./general-command-type":147,"./get-programs-dto":149,"./group-info-dto":150,"./group-queue-mode":151,"./group-repeat-mode":152,"./group-shuffle-mode":153,"./group-state-type":154,"./group-update-type":155,"./guide-info":156,"./header-match-type":157,"./http-header-info":158,"./ignore-wait-request-dto":159,"./image-by-name-info":160,"./image-format":161,"./image-info":162,"./image-option":163,"./image-orientation":164,"./image-provider-info":165,"./image-saving-convention":166,"./image-type":167,"./installation-info":169,"./iplugin":170,"./iso-type":171,"./item-counts":172,"./item-fields":173,"./item-filter":174,"./join-group-request-dto":175,"./keep-until":176,"./library-option-info-dto":177,"./library-options":179,"./library-options-result-dto":178,"./library-type-options-dto":180,"./library-update-info":181,"./listings-provider-info":182,"./live-stream-response":183,"./live-tv-info":184,"./live-tv-service-info":185,"./live-tv-service-status":186,"./localization-option":187,"./location-type":188,"./log-file":189,"./log-level":190,"./media-attachment":191,"./media-encoder-path-dto":192,"./media-path-dto":193,"./media-path-info":194,"./media-protocol":195,"./media-source-info":196,"./media-source-type":197,"./media-stream":199,"./media-stream-type":198,"./media-update-info-dto":200,"./media-update-info-path-dto":201,"./media-url":202,"./message-command":203,"./metadata-editor-info":204,"./metadata-field":205,"./metadata-options":206,"./metadata-refresh-mode":207,"./move-playlist-item-request-dto":208,"./movie-info":210,"./movie-info-remote-search-query":209,"./music-video-info":212,"./music-video-info-remote-search-query":211,"./name-guid-pair":213,"./name-id-pair":214,"./name-value-pair":215,"./new-group-request-dto":216,"./next-item-request-dto":217,"./notification-dto":218,"./notification-level":219,"./notification-result-dto":220,"./notification-type-info":221,"./notifications-summary-dto":222,"./object-group-update":223,"./open-live-stream-dto":224,"./package-info":225,"./parental-rating":226,"./path-substitution":227,"./person-lookup-info":229,"./person-lookup-info-remote-search-query":228,"./pin-redeem-result":230,"./ping-request-dto":231,"./play-access":232,"./play-command":233,"./play-method":234,"./play-request":236,"./play-request-dto":235,"./playback-error-code":237,"./playback-info-dto":238,"./playback-info-response":239,"./playback-progress-info":240,"./playback-start-info":241,"./playback-stop-info":242,"./player-state-info":243,"./playlist-creation-result":244,"./playstate-command":245,"./playstate-request":246,"./plugin-info":247,"./plugin-security-info":248,"./plugin-status":249,"./previous-item-request-dto":250,"./problem-details":251,"./profile-condition":254,"./profile-condition-type":252,"./profile-condition-value":253,"./program-audio":255,"./public-system-info":256,"./query-filters":258,"./query-filters-legacy":257,"./queue-item":259,"./queue-request-dto":260,"./quick-connect-dto":261,"./quick-connect-result":262,"./quick-connect-state":263,"./rating-type":264,"./ready-request-dto":265,"./recommendation-dto":266,"./recommendation-type":267,"./recording-status":268,"./remote-image-info":269,"./remote-image-result":270,"./remote-search-result":271,"./remote-subtitle-info":272,"./remove-from-playlist-request-dto":273,"./repeat-mode":274,"./repository-info":275,"./response-profile":276,"./scroll-direction":277,"./search-hint":279,"./search-hint-result":278,"./seek-request-dto":280,"./send-command":282,"./send-command-type":281,"./series-info":284,"./series-info-remote-search-query":283,"./series-status":285,"./series-timer-info-dto":287,"./series-timer-info-dto-query-result":286,"./server-configuration":288,"./server-discovery-info":289,"./session-info":290,"./session-message-type":291,"./session-user-info":292,"./set-channel-mapping-dto":293,"./set-playlist-item-request-dto":294,"./set-repeat-mode-request-dto":295,"./set-shuffle-mode-request-dto":296,"./song-info":297,"./sort-order":298,"./special-view-option-dto":299,"./startup-configuration-dto":300,"./startup-remote-access-dto":301,"./startup-user-dto":302,"./subtitle-delivery-method":303,"./subtitle-playback-mode":304,"./subtitle-profile":305,"./sync-play-user-access-type":306,"./system-info":307,"./task-completion-status":308,"./task-info":309,"./task-result":310,"./task-state":311,"./task-trigger-info":312,"./theme-media-result":313,"./timer-event-info":314,"./timer-info-dto":316,"./timer-info-dto-query-result":315,"./trailer-info":318,"./trailer-info-remote-search-query":317,"./transcode-reason":319,"./transcode-seek-info":320,"./transcoding-info":321,"./transcoding-profile":322,"./transport-stream-timestamp":323,"./tuner-channel-mapping":324,"./tuner-host-info":325,"./type-options":326,"./unrated-item":327,"./update-library-options-dto":328,"./update-media-path-request-dto":329,"./update-user-easy-password":330,"./update-user-password":331,"./upload-subtitle-dto":332,"./user-configuration":333,"./user-dto":334,"./user-item-data-dto":335,"./user-policy":336,"./utc-time-response":337,"./validate-path-dto":338,"./version":340,"./version-info":339,"./video-type":341,"./video3-dformat":342,"./virtual-folder-info":343,"./wake-on-lan-info":344,"./xml-attribute":345}],169:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],170:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],171:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsoType = void 0;
/**
 * Enum IsoType.
 * @export
 * @enum {string}
 */
var IsoType;
(function (IsoType) {
    IsoType["Dvd"] = "Dvd";
    IsoType["BluRay"] = "BluRay";
})(IsoType = exports.IsoType || (exports.IsoType = {}));

},{}],172:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],173:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemFields = void 0;
/**
 * Used to control the data that gets attached to DtoBaseItems.
 * @export
 * @enum {string}
 */
var ItemFields;
(function (ItemFields) {
    ItemFields["AirTime"] = "AirTime";
    ItemFields["CanDelete"] = "CanDelete";
    ItemFields["CanDownload"] = "CanDownload";
    ItemFields["ChannelInfo"] = "ChannelInfo";
    ItemFields["Chapters"] = "Chapters";
    ItemFields["ChildCount"] = "ChildCount";
    ItemFields["CumulativeRunTimeTicks"] = "CumulativeRunTimeTicks";
    ItemFields["CustomRating"] = "CustomRating";
    ItemFields["DateCreated"] = "DateCreated";
    ItemFields["DateLastMediaAdded"] = "DateLastMediaAdded";
    ItemFields["DisplayPreferencesId"] = "DisplayPreferencesId";
    ItemFields["Etag"] = "Etag";
    ItemFields["ExternalUrls"] = "ExternalUrls";
    ItemFields["Genres"] = "Genres";
    ItemFields["HomePageUrl"] = "HomePageUrl";
    ItemFields["ItemCounts"] = "ItemCounts";
    ItemFields["MediaSourceCount"] = "MediaSourceCount";
    ItemFields["MediaSources"] = "MediaSources";
    ItemFields["OriginalTitle"] = "OriginalTitle";
    ItemFields["Overview"] = "Overview";
    ItemFields["ParentId"] = "ParentId";
    ItemFields["Path"] = "Path";
    ItemFields["People"] = "People";
    ItemFields["PlayAccess"] = "PlayAccess";
    ItemFields["ProductionLocations"] = "ProductionLocations";
    ItemFields["ProviderIds"] = "ProviderIds";
    ItemFields["PrimaryImageAspectRatio"] = "PrimaryImageAspectRatio";
    ItemFields["RecursiveItemCount"] = "RecursiveItemCount";
    ItemFields["Settings"] = "Settings";
    ItemFields["ScreenshotImageTags"] = "ScreenshotImageTags";
    ItemFields["SeriesPrimaryImage"] = "SeriesPrimaryImage";
    ItemFields["SeriesStudio"] = "SeriesStudio";
    ItemFields["SortName"] = "SortName";
    ItemFields["SpecialEpisodeNumbers"] = "SpecialEpisodeNumbers";
    ItemFields["Studios"] = "Studios";
    ItemFields["BasicSyncInfo"] = "BasicSyncInfo";
    ItemFields["SyncInfo"] = "SyncInfo";
    ItemFields["Taglines"] = "Taglines";
    ItemFields["Tags"] = "Tags";
    ItemFields["RemoteTrailers"] = "RemoteTrailers";
    ItemFields["MediaStreams"] = "MediaStreams";
    ItemFields["SeasonUserData"] = "SeasonUserData";
    ItemFields["ServiceName"] = "ServiceName";
    ItemFields["ThemeSongIds"] = "ThemeSongIds";
    ItemFields["ThemeVideoIds"] = "ThemeVideoIds";
    ItemFields["ExternalEtag"] = "ExternalEtag";
    ItemFields["PresentationUniqueKey"] = "PresentationUniqueKey";
    ItemFields["InheritedParentalRatingValue"] = "InheritedParentalRatingValue";
    ItemFields["ExternalSeriesId"] = "ExternalSeriesId";
    ItemFields["SeriesPresentationUniqueKey"] = "SeriesPresentationUniqueKey";
    ItemFields["DateLastRefreshed"] = "DateLastRefreshed";
    ItemFields["DateLastSaved"] = "DateLastSaved";
    ItemFields["RefreshState"] = "RefreshState";
    ItemFields["ChannelImage"] = "ChannelImage";
    ItemFields["EnableMediaSourceDisplay"] = "EnableMediaSourceDisplay";
    ItemFields["Width"] = "Width";
    ItemFields["Height"] = "Height";
    ItemFields["ExtraIds"] = "ExtraIds";
    ItemFields["LocalTrailerCount"] = "LocalTrailerCount";
    ItemFields["IsHd"] = "IsHD";
    ItemFields["SpecialFeatureCount"] = "SpecialFeatureCount";
})(ItemFields = exports.ItemFields || (exports.ItemFields = {}));

},{}],174:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemFilter = void 0;
/**
 * Enum ItemFilter.
 * @export
 * @enum {string}
 */
var ItemFilter;
(function (ItemFilter) {
    ItemFilter["IsFolder"] = "IsFolder";
    ItemFilter["IsNotFolder"] = "IsNotFolder";
    ItemFilter["IsUnplayed"] = "IsUnplayed";
    ItemFilter["IsPlayed"] = "IsPlayed";
    ItemFilter["IsFavorite"] = "IsFavorite";
    ItemFilter["IsResumable"] = "IsResumable";
    ItemFilter["Likes"] = "Likes";
    ItemFilter["Dislikes"] = "Dislikes";
    ItemFilter["IsFavoriteOrLikes"] = "IsFavoriteOrLikes";
})(ItemFilter = exports.ItemFilter || (exports.ItemFilter = {}));

},{}],175:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],176:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeepUntil = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var KeepUntil;
(function (KeepUntil) {
    KeepUntil["UntilDeleted"] = "UntilDeleted";
    KeepUntil["UntilSpaceNeeded"] = "UntilSpaceNeeded";
    KeepUntil["UntilWatched"] = "UntilWatched";
    KeepUntil["UntilDate"] = "UntilDate";
})(KeepUntil = exports.KeepUntil || (exports.KeepUntil = {}));

},{}],177:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],178:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],179:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],180:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],181:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],182:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],183:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],184:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],185:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],186:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveTvServiceStatus = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var LiveTvServiceStatus;
(function (LiveTvServiceStatus) {
    LiveTvServiceStatus["Ok"] = "Ok";
    LiveTvServiceStatus["Unavailable"] = "Unavailable";
})(LiveTvServiceStatus = exports.LiveTvServiceStatus || (exports.LiveTvServiceStatus = {}));

},{}],187:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],188:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationType = void 0;
/**
 * Enum LocationType.
 * @export
 * @enum {string}
 */
var LocationType;
(function (LocationType) {
    LocationType["FileSystem"] = "FileSystem";
    LocationType["Remote"] = "Remote";
    LocationType["Virtual"] = "Virtual";
    LocationType["Offline"] = "Offline";
})(LocationType = exports.LocationType || (exports.LocationType = {}));

},{}],189:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],190:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["Trace"] = "Trace";
    LogLevel["Debug"] = "Debug";
    LogLevel["Information"] = "Information";
    LogLevel["Warning"] = "Warning";
    LogLevel["Error"] = "Error";
    LogLevel["Critical"] = "Critical";
    LogLevel["None"] = "None";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));

},{}],191:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],192:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],193:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],194:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],195:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaProtocol = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var MediaProtocol;
(function (MediaProtocol) {
    MediaProtocol["File"] = "File";
    MediaProtocol["Http"] = "Http";
    MediaProtocol["Rtmp"] = "Rtmp";
    MediaProtocol["Rtsp"] = "Rtsp";
    MediaProtocol["Udp"] = "Udp";
    MediaProtocol["Rtp"] = "Rtp";
    MediaProtocol["Ftp"] = "Ftp";
})(MediaProtocol = exports.MediaProtocol || (exports.MediaProtocol = {}));

},{}],196:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],197:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaSourceType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var MediaSourceType;
(function (MediaSourceType) {
    MediaSourceType["Default"] = "Default";
    MediaSourceType["Grouping"] = "Grouping";
    MediaSourceType["Placeholder"] = "Placeholder";
})(MediaSourceType = exports.MediaSourceType || (exports.MediaSourceType = {}));

},{}],198:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaStreamType = void 0;
/**
 * Enum MediaStreamType.
 * @export
 * @enum {string}
 */
var MediaStreamType;
(function (MediaStreamType) {
    MediaStreamType["Audio"] = "Audio";
    MediaStreamType["Video"] = "Video";
    MediaStreamType["Subtitle"] = "Subtitle";
    MediaStreamType["EmbeddedImage"] = "EmbeddedImage";
})(MediaStreamType = exports.MediaStreamType || (exports.MediaStreamType = {}));

},{}],199:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],200:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],201:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],202:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],203:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],204:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],205:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataField = void 0;
/**
 * Enum MetadataFields.
 * @export
 * @enum {string}
 */
var MetadataField;
(function (MetadataField) {
    MetadataField["Cast"] = "Cast";
    MetadataField["Genres"] = "Genres";
    MetadataField["ProductionLocations"] = "ProductionLocations";
    MetadataField["Studios"] = "Studios";
    MetadataField["Tags"] = "Tags";
    MetadataField["Name"] = "Name";
    MetadataField["Overview"] = "Overview";
    MetadataField["Runtime"] = "Runtime";
    MetadataField["OfficialRating"] = "OfficialRating";
})(MetadataField = exports.MetadataField || (exports.MetadataField = {}));

},{}],206:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],207:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataRefreshMode = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var MetadataRefreshMode;
(function (MetadataRefreshMode) {
    MetadataRefreshMode["None"] = "None";
    MetadataRefreshMode["ValidationOnly"] = "ValidationOnly";
    MetadataRefreshMode["Default"] = "Default";
    MetadataRefreshMode["FullRefresh"] = "FullRefresh";
})(MetadataRefreshMode = exports.MetadataRefreshMode || (exports.MetadataRefreshMode = {}));

},{}],208:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],209:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],210:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],211:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],212:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],213:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],214:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],215:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],216:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],217:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],218:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],219:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationLevel = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var NotificationLevel;
(function (NotificationLevel) {
    NotificationLevel["Normal"] = "Normal";
    NotificationLevel["Warning"] = "Warning";
    NotificationLevel["Error"] = "Error";
})(NotificationLevel = exports.NotificationLevel || (exports.NotificationLevel = {}));

},{}],220:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],221:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],222:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],223:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],224:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],225:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],226:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],227:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],228:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],229:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],230:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],231:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],232:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayAccess = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var PlayAccess;
(function (PlayAccess) {
    PlayAccess["Full"] = "Full";
    PlayAccess["None"] = "None";
})(PlayAccess = exports.PlayAccess || (exports.PlayAccess = {}));

},{}],233:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayCommand = void 0;
/**
 * Enum PlayCommand.
 * @export
 * @enum {string}
 */
var PlayCommand;
(function (PlayCommand) {
    PlayCommand["PlayNow"] = "PlayNow";
    PlayCommand["PlayNext"] = "PlayNext";
    PlayCommand["PlayLast"] = "PlayLast";
    PlayCommand["PlayInstantMix"] = "PlayInstantMix";
    PlayCommand["PlayShuffle"] = "PlayShuffle";
})(PlayCommand = exports.PlayCommand || (exports.PlayCommand = {}));

},{}],234:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayMethod = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var PlayMethod;
(function (PlayMethod) {
    PlayMethod["Transcode"] = "Transcode";
    PlayMethod["DirectStream"] = "DirectStream";
    PlayMethod["DirectPlay"] = "DirectPlay";
})(PlayMethod = exports.PlayMethod || (exports.PlayMethod = {}));

},{}],235:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],236:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],237:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackErrorCode = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var PlaybackErrorCode;
(function (PlaybackErrorCode) {
    PlaybackErrorCode["NotAllowed"] = "NotAllowed";
    PlaybackErrorCode["NoCompatibleStream"] = "NoCompatibleStream";
    PlaybackErrorCode["RateLimitExceeded"] = "RateLimitExceeded";
})(PlaybackErrorCode = exports.PlaybackErrorCode || (exports.PlaybackErrorCode = {}));

},{}],238:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],239:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],240:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],241:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],242:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],243:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],244:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],245:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaystateCommand = void 0;
/**
 * Enum PlaystateCommand.
 * @export
 * @enum {string}
 */
var PlaystateCommand;
(function (PlaystateCommand) {
    PlaystateCommand["Stop"] = "Stop";
    PlaystateCommand["Pause"] = "Pause";
    PlaystateCommand["Unpause"] = "Unpause";
    PlaystateCommand["NextTrack"] = "NextTrack";
    PlaystateCommand["PreviousTrack"] = "PreviousTrack";
    PlaystateCommand["Seek"] = "Seek";
    PlaystateCommand["Rewind"] = "Rewind";
    PlaystateCommand["FastForward"] = "FastForward";
    PlaystateCommand["PlayPause"] = "PlayPause";
})(PlaystateCommand = exports.PlaystateCommand || (exports.PlaystateCommand = {}));

},{}],246:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],247:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],248:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],249:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginStatus = void 0;
/**
 * Plugin load status.
 * @export
 * @enum {string}
 */
var PluginStatus;
(function (PluginStatus) {
    PluginStatus["Active"] = "Active";
    PluginStatus["Restart"] = "Restart";
    PluginStatus["Deleted"] = "Deleted";
    PluginStatus["Superceded"] = "Superceded";
    PluginStatus["Malfunctioned"] = "Malfunctioned";
    PluginStatus["NotSupported"] = "NotSupported";
    PluginStatus["Disabled"] = "Disabled";
})(PluginStatus = exports.PluginStatus || (exports.PluginStatus = {}));

},{}],250:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],251:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],252:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileConditionType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ProfileConditionType;
(function (ProfileConditionType) {
    ProfileConditionType["Equals"] = "Equals";
    ProfileConditionType["NotEquals"] = "NotEquals";
    ProfileConditionType["LessThanEqual"] = "LessThanEqual";
    ProfileConditionType["GreaterThanEqual"] = "GreaterThanEqual";
    ProfileConditionType["EqualsAny"] = "EqualsAny";
})(ProfileConditionType = exports.ProfileConditionType || (exports.ProfileConditionType = {}));

},{}],253:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileConditionValue = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ProfileConditionValue;
(function (ProfileConditionValue) {
    ProfileConditionValue["AudioChannels"] = "AudioChannels";
    ProfileConditionValue["AudioBitrate"] = "AudioBitrate";
    ProfileConditionValue["AudioProfile"] = "AudioProfile";
    ProfileConditionValue["Width"] = "Width";
    ProfileConditionValue["Height"] = "Height";
    ProfileConditionValue["Has64BitOffsets"] = "Has64BitOffsets";
    ProfileConditionValue["PacketLength"] = "PacketLength";
    ProfileConditionValue["VideoBitDepth"] = "VideoBitDepth";
    ProfileConditionValue["VideoBitrate"] = "VideoBitrate";
    ProfileConditionValue["VideoFramerate"] = "VideoFramerate";
    ProfileConditionValue["VideoLevel"] = "VideoLevel";
    ProfileConditionValue["VideoProfile"] = "VideoProfile";
    ProfileConditionValue["VideoTimestamp"] = "VideoTimestamp";
    ProfileConditionValue["IsAnamorphic"] = "IsAnamorphic";
    ProfileConditionValue["RefFrames"] = "RefFrames";
    ProfileConditionValue["NumAudioStreams"] = "NumAudioStreams";
    ProfileConditionValue["NumVideoStreams"] = "NumVideoStreams";
    ProfileConditionValue["IsSecondaryAudio"] = "IsSecondaryAudio";
    ProfileConditionValue["VideoCodecTag"] = "VideoCodecTag";
    ProfileConditionValue["IsAvc"] = "IsAvc";
    ProfileConditionValue["IsInterlaced"] = "IsInterlaced";
    ProfileConditionValue["AudioSampleRate"] = "AudioSampleRate";
    ProfileConditionValue["AudioBitDepth"] = "AudioBitDepth";
})(ProfileConditionValue = exports.ProfileConditionValue || (exports.ProfileConditionValue = {}));

},{}],254:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],255:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgramAudio = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var ProgramAudio;
(function (ProgramAudio) {
    ProgramAudio["Mono"] = "Mono";
    ProgramAudio["Stereo"] = "Stereo";
    ProgramAudio["Dolby"] = "Dolby";
    ProgramAudio["DolbyDigital"] = "DolbyDigital";
    ProgramAudio["Thx"] = "Thx";
    ProgramAudio["Atmos"] = "Atmos";
})(ProgramAudio = exports.ProgramAudio || (exports.ProgramAudio = {}));

},{}],256:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],257:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],258:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],259:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],260:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],261:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],262:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],263:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickConnectState = void 0;
/**
 * Quick connect state.
 * @export
 * @enum {string}
 */
var QuickConnectState;
(function (QuickConnectState) {
    QuickConnectState["Unavailable"] = "Unavailable";
    QuickConnectState["Available"] = "Available";
    QuickConnectState["Active"] = "Active";
})(QuickConnectState = exports.QuickConnectState || (exports.QuickConnectState = {}));

},{}],264:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RatingType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var RatingType;
(function (RatingType) {
    RatingType["Score"] = "Score";
    RatingType["Likes"] = "Likes";
})(RatingType = exports.RatingType || (exports.RatingType = {}));

},{}],265:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],266:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],267:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationType = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var RecommendationType;
(function (RecommendationType) {
    RecommendationType["SimilarToRecentlyPlayed"] = "SimilarToRecentlyPlayed";
    RecommendationType["SimilarToLikedItem"] = "SimilarToLikedItem";
    RecommendationType["HasDirectorFromRecentlyPlayed"] = "HasDirectorFromRecentlyPlayed";
    RecommendationType["HasActorFromRecentlyPlayed"] = "HasActorFromRecentlyPlayed";
    RecommendationType["HasLikedDirector"] = "HasLikedDirector";
    RecommendationType["HasLikedActor"] = "HasLikedActor";
})(RecommendationType = exports.RecommendationType || (exports.RecommendationType = {}));

},{}],268:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordingStatus = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var RecordingStatus;
(function (RecordingStatus) {
    RecordingStatus["New"] = "New";
    RecordingStatus["InProgress"] = "InProgress";
    RecordingStatus["Completed"] = "Completed";
    RecordingStatus["Cancelled"] = "Cancelled";
    RecordingStatus["ConflictedOk"] = "ConflictedOk";
    RecordingStatus["ConflictedNotOk"] = "ConflictedNotOk";
    RecordingStatus["Error"] = "Error";
})(RecordingStatus = exports.RecordingStatus || (exports.RecordingStatus = {}));

},{}],269:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],270:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],271:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],272:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],273:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],274:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepeatMode = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var RepeatMode;
(function (RepeatMode) {
    RepeatMode["RepeatNone"] = "RepeatNone";
    RepeatMode["RepeatAll"] = "RepeatAll";
    RepeatMode["RepeatOne"] = "RepeatOne";
})(RepeatMode = exports.RepeatMode || (exports.RepeatMode = {}));

},{}],275:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],276:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],277:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrollDirection = void 0;
/**
 * An enum representing the axis that should be scrolled.
 * @export
 * @enum {string}
 */
var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection["Horizontal"] = "Horizontal";
    ScrollDirection["Vertical"] = "Vertical";
})(ScrollDirection = exports.ScrollDirection || (exports.ScrollDirection = {}));

},{}],278:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],279:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],280:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],281:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendCommandType = void 0;
/**
 * Enum SendCommandType.
 * @export
 * @enum {string}
 */
var SendCommandType;
(function (SendCommandType) {
    SendCommandType["Unpause"] = "Unpause";
    SendCommandType["Pause"] = "Pause";
    SendCommandType["Stop"] = "Stop";
    SendCommandType["Seek"] = "Seek";
})(SendCommandType = exports.SendCommandType || (exports.SendCommandType = {}));

},{}],282:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],283:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],284:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],285:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeriesStatus = void 0;
/**
 * Enum SeriesStatus.
 * @export
 * @enum {string}
 */
var SeriesStatus;
(function (SeriesStatus) {
    SeriesStatus["Continuing"] = "Continuing";
    SeriesStatus["Ended"] = "Ended";
})(SeriesStatus = exports.SeriesStatus || (exports.SeriesStatus = {}));

},{}],286:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],287:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],288:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],289:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],290:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],291:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionMessageType = void 0;
/**
 * The different kinds of messages that are used in the WebSocket api.
 * @export
 * @enum {string}
 */
var SessionMessageType;
(function (SessionMessageType) {
    SessionMessageType["ForceKeepAlive"] = "ForceKeepAlive";
    SessionMessageType["GeneralCommand"] = "GeneralCommand";
    SessionMessageType["UserDataChanged"] = "UserDataChanged";
    SessionMessageType["Sessions"] = "Sessions";
    SessionMessageType["Play"] = "Play";
    SessionMessageType["SyncPlayCommand"] = "SyncPlayCommand";
    SessionMessageType["SyncPlayGroupUpdate"] = "SyncPlayGroupUpdate";
    SessionMessageType["Playstate"] = "Playstate";
    SessionMessageType["RestartRequired"] = "RestartRequired";
    SessionMessageType["ServerShuttingDown"] = "ServerShuttingDown";
    SessionMessageType["ServerRestarting"] = "ServerRestarting";
    SessionMessageType["LibraryChanged"] = "LibraryChanged";
    SessionMessageType["UserDeleted"] = "UserDeleted";
    SessionMessageType["UserUpdated"] = "UserUpdated";
    SessionMessageType["SeriesTimerCreated"] = "SeriesTimerCreated";
    SessionMessageType["TimerCreated"] = "TimerCreated";
    SessionMessageType["SeriesTimerCancelled"] = "SeriesTimerCancelled";
    SessionMessageType["TimerCancelled"] = "TimerCancelled";
    SessionMessageType["RefreshProgress"] = "RefreshProgress";
    SessionMessageType["ScheduledTaskEnded"] = "ScheduledTaskEnded";
    SessionMessageType["PackageInstallationCancelled"] = "PackageInstallationCancelled";
    SessionMessageType["PackageInstallationFailed"] = "PackageInstallationFailed";
    SessionMessageType["PackageInstallationCompleted"] = "PackageInstallationCompleted";
    SessionMessageType["PackageInstalling"] = "PackageInstalling";
    SessionMessageType["PackageUninstalled"] = "PackageUninstalled";
    SessionMessageType["ActivityLogEntry"] = "ActivityLogEntry";
    SessionMessageType["ScheduledTasksInfo"] = "ScheduledTasksInfo";
    SessionMessageType["ActivityLogEntryStart"] = "ActivityLogEntryStart";
    SessionMessageType["ActivityLogEntryStop"] = "ActivityLogEntryStop";
    SessionMessageType["SessionsStart"] = "SessionsStart";
    SessionMessageType["SessionsStop"] = "SessionsStop";
    SessionMessageType["ScheduledTasksInfoStart"] = "ScheduledTasksInfoStart";
    SessionMessageType["ScheduledTasksInfoStop"] = "ScheduledTasksInfoStop";
    SessionMessageType["KeepAlive"] = "KeepAlive";
})(SessionMessageType = exports.SessionMessageType || (exports.SessionMessageType = {}));

},{}],292:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],293:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],294:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],295:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],296:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],297:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],298:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SortOrder = void 0;
/**
 * An enum representing the sorting order.
 * @export
 * @enum {string}
 */
var SortOrder;
(function (SortOrder) {
    SortOrder["Ascending"] = "Ascending";
    SortOrder["Descending"] = "Descending";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));

},{}],299:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],300:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],301:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],302:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],303:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleDeliveryMethod = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var SubtitleDeliveryMethod;
(function (SubtitleDeliveryMethod) {
    SubtitleDeliveryMethod["Encode"] = "Encode";
    SubtitleDeliveryMethod["Embed"] = "Embed";
    SubtitleDeliveryMethod["External"] = "External";
    SubtitleDeliveryMethod["Hls"] = "Hls";
})(SubtitleDeliveryMethod = exports.SubtitleDeliveryMethod || (exports.SubtitleDeliveryMethod = {}));

},{}],304:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitlePlaybackMode = void 0;
/**
 * An enum representing a subtitle playback mode.
 * @export
 * @enum {string}
 */
var SubtitlePlaybackMode;
(function (SubtitlePlaybackMode) {
    SubtitlePlaybackMode["Default"] = "Default";
    SubtitlePlaybackMode["Always"] = "Always";
    SubtitlePlaybackMode["OnlyForced"] = "OnlyForced";
    SubtitlePlaybackMode["None"] = "None";
    SubtitlePlaybackMode["Smart"] = "Smart";
})(SubtitlePlaybackMode = exports.SubtitlePlaybackMode || (exports.SubtitlePlaybackMode = {}));

},{}],305:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],306:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncPlayUserAccessType = void 0;
/**
 * Enum SyncPlayUserAccessType.
 * @export
 * @enum {string}
 */
var SyncPlayUserAccessType;
(function (SyncPlayUserAccessType) {
    SyncPlayUserAccessType["CreateAndJoinGroups"] = "CreateAndJoinGroups";
    SyncPlayUserAccessType["JoinGroups"] = "JoinGroups";
    SyncPlayUserAccessType["None"] = "None";
})(SyncPlayUserAccessType = exports.SyncPlayUserAccessType || (exports.SyncPlayUserAccessType = {}));

},{}],307:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],308:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskCompletionStatus = void 0;
/**
 * Enum TaskCompletionStatus.
 * @export
 * @enum {string}
 */
var TaskCompletionStatus;
(function (TaskCompletionStatus) {
    TaskCompletionStatus["Completed"] = "Completed";
    TaskCompletionStatus["Failed"] = "Failed";
    TaskCompletionStatus["Cancelled"] = "Cancelled";
    TaskCompletionStatus["Aborted"] = "Aborted";
})(TaskCompletionStatus = exports.TaskCompletionStatus || (exports.TaskCompletionStatus = {}));

},{}],309:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],310:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],311:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskState = void 0;
/**
 * Enum TaskState.
 * @export
 * @enum {string}
 */
var TaskState;
(function (TaskState) {
    TaskState["Idle"] = "Idle";
    TaskState["Cancelling"] = "Cancelling";
    TaskState["Running"] = "Running";
})(TaskState = exports.TaskState || (exports.TaskState = {}));

},{}],312:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],313:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],314:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],315:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],316:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],317:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],318:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],319:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscodeReason = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var TranscodeReason;
(function (TranscodeReason) {
    TranscodeReason["ContainerNotSupported"] = "ContainerNotSupported";
    TranscodeReason["VideoCodecNotSupported"] = "VideoCodecNotSupported";
    TranscodeReason["AudioCodecNotSupported"] = "AudioCodecNotSupported";
    TranscodeReason["ContainerBitrateExceedsLimit"] = "ContainerBitrateExceedsLimit";
    TranscodeReason["AudioBitrateNotSupported"] = "AudioBitrateNotSupported";
    TranscodeReason["AudioChannelsNotSupported"] = "AudioChannelsNotSupported";
    TranscodeReason["VideoResolutionNotSupported"] = "VideoResolutionNotSupported";
    TranscodeReason["UnknownVideoStreamInfo"] = "UnknownVideoStreamInfo";
    TranscodeReason["UnknownAudioStreamInfo"] = "UnknownAudioStreamInfo";
    TranscodeReason["AudioProfileNotSupported"] = "AudioProfileNotSupported";
    TranscodeReason["AudioSampleRateNotSupported"] = "AudioSampleRateNotSupported";
    TranscodeReason["AnamorphicVideoNotSupported"] = "AnamorphicVideoNotSupported";
    TranscodeReason["InterlacedVideoNotSupported"] = "InterlacedVideoNotSupported";
    TranscodeReason["SecondaryAudioNotSupported"] = "SecondaryAudioNotSupported";
    TranscodeReason["RefFramesNotSupported"] = "RefFramesNotSupported";
    TranscodeReason["VideoBitDepthNotSupported"] = "VideoBitDepthNotSupported";
    TranscodeReason["VideoBitrateNotSupported"] = "VideoBitrateNotSupported";
    TranscodeReason["VideoFramerateNotSupported"] = "VideoFramerateNotSupported";
    TranscodeReason["VideoLevelNotSupported"] = "VideoLevelNotSupported";
    TranscodeReason["VideoProfileNotSupported"] = "VideoProfileNotSupported";
    TranscodeReason["AudioBitDepthNotSupported"] = "AudioBitDepthNotSupported";
    TranscodeReason["SubtitleCodecNotSupported"] = "SubtitleCodecNotSupported";
    TranscodeReason["DirectPlayError"] = "DirectPlayError";
})(TranscodeReason = exports.TranscodeReason || (exports.TranscodeReason = {}));

},{}],320:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscodeSeekInfo = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var TranscodeSeekInfo;
(function (TranscodeSeekInfo) {
    TranscodeSeekInfo["Auto"] = "Auto";
    TranscodeSeekInfo["Bytes"] = "Bytes";
})(TranscodeSeekInfo = exports.TranscodeSeekInfo || (exports.TranscodeSeekInfo = {}));

},{}],321:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],322:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],323:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportStreamTimestamp = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var TransportStreamTimestamp;
(function (TransportStreamTimestamp) {
    TransportStreamTimestamp["None"] = "None";
    TransportStreamTimestamp["Zero"] = "Zero";
    TransportStreamTimestamp["Valid"] = "Valid";
})(TransportStreamTimestamp = exports.TransportStreamTimestamp || (exports.TransportStreamTimestamp = {}));

},{}],324:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],325:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],326:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],327:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnratedItem = void 0;
/**
 * An enum representing an unrated item.
 * @export
 * @enum {string}
 */
var UnratedItem;
(function (UnratedItem) {
    UnratedItem["Movie"] = "Movie";
    UnratedItem["Trailer"] = "Trailer";
    UnratedItem["Series"] = "Series";
    UnratedItem["Music"] = "Music";
    UnratedItem["Book"] = "Book";
    UnratedItem["LiveTvChannel"] = "LiveTvChannel";
    UnratedItem["LiveTvProgram"] = "LiveTvProgram";
    UnratedItem["ChannelContent"] = "ChannelContent";
    UnratedItem["Other"] = "Other";
})(UnratedItem = exports.UnratedItem || (exports.UnratedItem = {}));

},{}],328:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],329:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],330:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],331:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],332:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],333:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],334:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],335:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],336:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],337:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],338:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],339:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],340:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],341:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoType = void 0;
/**
 * Enum VideoType.
 * @export
 * @enum {string}
 */
var VideoType;
(function (VideoType) {
    VideoType["VideoFile"] = "VideoFile";
    VideoType["Iso"] = "Iso";
    VideoType["Dvd"] = "Dvd";
    VideoType["BluRay"] = "BluRay";
})(VideoType = exports.VideoType || (exports.VideoType = {}));

},{}],342:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video3DFormat = void 0;
/**
 *
 * @export
 * @enum {string}
 */
var Video3DFormat;
(function (Video3DFormat) {
    Video3DFormat["HalfSideBySide"] = "HalfSideBySide";
    Video3DFormat["FullSideBySide"] = "FullSideBySide";
    Video3DFormat["FullTopAndBottom"] = "FullTopAndBottom";
    Video3DFormat["HalfTopAndBottom"] = "HalfTopAndBottom";
    Video3DFormat["Mvc"] = "MVC";
})(Video3DFormat = exports.Video3DFormat || (exports.Video3DFormat = {}));

},{}],343:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],344:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],345:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],346:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.discovery = void 0;
// TODO: Should the generated client be exported?
exports.discovery = __importStar(require("./discovery"));
exports.utils = __importStar(require("./utils"));
__exportStar(require("./api"), exports);
__exportStar(require("./jellyfin"), exports);
__exportStar(require("./models"), exports);

},{"./api":3,"./discovery":5,"./jellyfin":347,"./models":354,"./utils":360}],347:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jellyfin = exports.MINIMUM_VERSION = exports.API_VERSION = void 0;
var api_1 = require("./api");
var discovery_1 = require("./discovery");
// NOTE: This must be updated manually on updates.
/** The current API version of the generated client. */
exports.API_VERSION = '10.7.7';
/** The minimum supported server version. */
exports.MINIMUM_VERSION = '10.7.0';
/** Class representing the Jellyfin SDK. */
var Jellyfin = /** @class */ (function () {
    function Jellyfin(parameters) {
        this.clientInfo = parameters.clientInfo;
        this.deviceInfo = parameters.deviceInfo;
        this.discovery = new discovery_1.DiscoveryService(this);
    }
    /**
     * Creates an Api instance for a given server path.
     * @param basePath A base path of a server.
     * @param accessToken An (optional) access token to use for authentication.
     * @param axiosInstance An (optional) Axios instance for the Api to use.
     * @returns An Api instance.
     */
    Jellyfin.prototype.createApi = function (basePath, accessToken, axiosInstance) {
        return new api_1.Api(basePath, this.clientInfo, this.deviceInfo, accessToken, axiosInstance);
    };
    return Jellyfin;
}());
exports.Jellyfin = Jellyfin;

},{"./api":3,"./discovery":5}],348:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseItemKind = void 0;
// NOTE: This should be included in the generated models in the 10.8 openapi spec
/**
 * An enum representing the possible base item types.
 * References: https://github.com/jellyfin/jellyfin/blob/master/Jellyfin.Data/Enums/BaseItemKind.cs
 * @export
 * @enum {string}
 */
var BaseItemKind;
(function (BaseItemKind) {
    BaseItemKind["AggregateFolder"] = "AggregateFolder";
    BaseItemKind["Audio"] = "Audio";
    BaseItemKind["AudioBook"] = "AudioBook";
    BaseItemKind["BasePluginFolder"] = "BasePluginFolder";
    BaseItemKind["Book"] = "Book";
    BaseItemKind["BoxSet"] = "BoxSet";
    BaseItemKind["Channel"] = "Channel";
    BaseItemKind["ChannelFolderItem"] = "ChannelFolderItem";
    BaseItemKind["CollectionFolder"] = "CollectionFolder";
    BaseItemKind["Episode"] = "Episode";
    BaseItemKind["Folder"] = "Folder";
    BaseItemKind["Genre"] = "Genre";
    BaseItemKind["ManualPlaylistsFolder"] = "ManualPlaylistsFolder";
    BaseItemKind["Movie"] = "Movie";
    BaseItemKind["LiveTvChannel"] = "LiveTvChannel";
    BaseItemKind["LiveTvProgram"] = "LiveTvProgram";
    BaseItemKind["MusicAlbum"] = "MusicAlbum";
    BaseItemKind["MusicArtist"] = "MusicArtist";
    BaseItemKind["MusicGenre"] = "MusicGenre";
    BaseItemKind["MusicVideo"] = "MusicVideo";
    BaseItemKind["Person"] = "Person";
    BaseItemKind["Photo"] = "Photo";
    BaseItemKind["PhotoAlbum"] = "PhotoAlbum";
    BaseItemKind["Playlist"] = "Playlist";
    BaseItemKind["PlaylistsFolder"] = "PlaylistsFolder";
    BaseItemKind["Program"] = "Program";
    BaseItemKind["Recording"] = "Recording";
    BaseItemKind["Season"] = "Season";
    BaseItemKind["Series"] = "Series";
    BaseItemKind["Studio"] = "Studio";
    BaseItemKind["Trailer"] = "Trailer";
    BaseItemKind["TvChannel"] = "TvChannel";
    BaseItemKind["TvProgram"] = "TvProgram";
    BaseItemKind["UserRootFolder"] = "UserRootFolder";
    BaseItemKind["UserView"] = "UserView";
    BaseItemKind["Video"] = "Video";
    BaseItemKind["Year"] = "Year";
})(BaseItemKind = exports.BaseItemKind || (exports.BaseItemKind = {}));

},{}],349:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });

},{}],350:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("../../generated-client/models"), exports);
__exportStar(require("./base-item-kind"), exports);
__exportStar(require("./image-request-parameters"), exports);
__exportStar(require("./item-sort-by"), exports);

},{"../../generated-client/models":168,"./base-item-kind":348,"./image-request-parameters":349,"./item-sort-by":351}],351:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSortBy = void 0;
/**
 * An enum representing the item sort by options.
 * References: https://github.com/jellyfin/jellyfin/blob/master/MediaBrowser.Model/Querying/ItemSortBy.cs
 * @export
 * @enum {string}
 */
var ItemSortBy;
(function (ItemSortBy) {
    ItemSortBy["AiredEpisodeOrder"] = "AiredEpisodeOrder";
    ItemSortBy["AirTime"] = "AirTime";
    ItemSortBy["Album"] = "Album";
    ItemSortBy["AlbumArtist"] = "AlbumArtist";
    ItemSortBy["Artist"] = "Artist";
    ItemSortBy["CommunityRating"] = "CommunityRating";
    ItemSortBy["CriticRating"] = "CriticRating";
    ItemSortBy["DateCreated"] = "DateCreated";
    ItemSortBy["DateLastContentAdded"] = "DateLastContentAdded";
    ItemSortBy["DatePlayed"] = "DatePlayed";
    ItemSortBy["IsFavoriteOrLiked"] = "IsFavoriteOrLiked";
    ItemSortBy["IsFolder"] = "IsFolder";
    ItemSortBy["IsPlayed"] = "IsPlayed";
    ItemSortBy["IsUnplayed"] = "IsUnplayed";
    ItemSortBy["Name"] = "Name";
    ItemSortBy["OfficialRating"] = "OfficialRating";
    ItemSortBy["PlayCount"] = "PlayCount";
    ItemSortBy["PremiereDate"] = "PremiereDate";
    ItemSortBy["ProductionYear"] = "ProductionYear";
    ItemSortBy["Random"] = "Random";
    ItemSortBy["Runtime"] = "Runtime";
    ItemSortBy["SeriesDatePlayed"] = "SeriesDatePlayed";
    ItemSortBy["SeriesSortName"] = "SeriesSortName";
    ItemSortBy["SortName"] = "SortName";
    ItemSortBy["StartDate"] = "StartDate";
    ItemSortBy["Studio"] = "Studio";
    ItemSortBy["VideoBitRate"] = "VideoBitRate";
})(ItemSortBy = exports.ItemSortBy || (exports.ItemSortBy = {}));

},{}],352:[function(require,module,exports){
arguments[4][349][0].apply(exports,arguments)
},{"dup":349}],353:[function(require,module,exports){
arguments[4][349][0].apply(exports,arguments)
},{"dup":349}],354:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.api = void 0;
exports.api = __importStar(require("./api"));
__exportStar(require("./client-info"), exports);
__exportStar(require("./device-info"), exports);
__exportStar(require("./recommended-server-info"), exports);
__exportStar(require("./recommended-server-issue"), exports);

},{"./api":350,"./client-info":352,"./device-info":353,"./recommended-server-info":355,"./recommended-server-issue":356}],355:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendedServerInfoScore = void 0;
/** Possible score values for recommended servers. */
var RecommendedServerInfoScore;
(function (RecommendedServerInfoScore) {
    RecommendedServerInfoScore[RecommendedServerInfoScore["GREAT"] = 2] = "GREAT";
    RecommendedServerInfoScore[RecommendedServerInfoScore["GOOD"] = 1] = "GOOD";
    RecommendedServerInfoScore[RecommendedServerInfoScore["OK"] = 0] = "OK";
    RecommendedServerInfoScore[RecommendedServerInfoScore["BAD"] = -1] = "BAD";
})(RecommendedServerInfoScore = exports.RecommendedServerInfoScore || (exports.RecommendedServerInfoScore = {}));

},{}],356:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionUnsupportedIssue = exports.VersionOutdatedIssue = exports.VersionMissingIssue = exports.SystemInfoIssue = exports.SlowResponseIssue = exports.ProductNameIssue = exports.RecommendedServerIssue = void 0;
/** Class representing an issue encountered with a recommended server. */
var RecommendedServerIssue = /** @class */ (function () {
    function RecommendedServerIssue() {
    }
    return RecommendedServerIssue;
}());
exports.RecommendedServerIssue = RecommendedServerIssue;
/** Class representing an issue with the returned product name. */
var ProductNameIssue = /** @class */ (function (_super) {
    __extends(ProductNameIssue, _super);
    function ProductNameIssue(productName) {
        var _this = _super.call(this) || this;
        _this.productName = productName;
        return _this;
    }
    return ProductNameIssue;
}(RecommendedServerIssue));
exports.ProductNameIssue = ProductNameIssue;
/** Class representing a slow response from a server. */
var SlowResponseIssue = /** @class */ (function (_super) {
    __extends(SlowResponseIssue, _super);
    function SlowResponseIssue(responseTime) {
        var _this = _super.call(this) || this;
        _this.responseTime = responseTime;
        return _this;
    }
    return SlowResponseIssue;
}(RecommendedServerIssue));
exports.SlowResponseIssue = SlowResponseIssue;
/**
 * Class representing an issue with the system information.
 * This could be due to a networking error or invalid address.
 */
var SystemInfoIssue = /** @class */ (function (_super) {
    __extends(SystemInfoIssue, _super);
    function SystemInfoIssue(error) {
        var _this = _super.call(this) || this;
        _this.error = error;
        return _this;
    }
    return SystemInfoIssue;
}(RecommendedServerIssue));
exports.SystemInfoIssue = SystemInfoIssue;
/** Class representing the version was missing from system information. */
var VersionMissingIssue = /** @class */ (function (_super) {
    __extends(VersionMissingIssue, _super);
    function VersionMissingIssue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return VersionMissingIssue;
}(RecommendedServerIssue));
exports.VersionMissingIssue = VersionMissingIssue;
/**
 * Class representing the server version is outdated.
 * (The version is lower than the generated client, but higher than the minimum supported.)
 */
var VersionOutdatedIssue = /** @class */ (function (_super) {
    __extends(VersionOutdatedIssue, _super);
    function VersionOutdatedIssue(version) {
        var _this = _super.call(this) || this;
        _this.version = version;
        return _this;
    }
    return VersionOutdatedIssue;
}(RecommendedServerIssue));
exports.VersionOutdatedIssue = VersionOutdatedIssue;
/**
 * Class representing the server version is unsupported.
 * (The version is lower than the minimum supported.)
 */
var VersionUnsupportedIssue = /** @class */ (function (_super) {
    __extends(VersionUnsupportedIssue, _super);
    function VersionUnsupportedIssue(version) {
        var _this = _super.call(this) || this;
        _this.version = version;
        return _this;
    }
    return VersionUnsupportedIssue;
}(RecommendedServerIssue));
exports.VersionUnsupportedIssue = VersionUnsupportedIssue;

},{}],357:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddressCandidates = exports.JF_HTTPS_PORT = exports.JF_HTTP_PORT = void 0;
var url_1 = require("./url");
/** The default http port for Jellyfin servers. */
exports.JF_HTTP_PORT = 8096;
/** The default https port for Jellyfin servers. */
exports.JF_HTTPS_PORT = 8920;
/**
 * Gets the score of a url based on common server setups.
 * @param url The url to evaluate.
 * @returns The score.
 */
function getScore(url) {
    var score = 0;
    // Prefer secure connections
    if (url.protocol === url_1.HTTPS_PROTOCOL) {
        score += 5;
    }
    else {
        score -= 5;
    }
    if (url.port === exports.JF_HTTP_PORT.toString()) {
        score += 2; // Using the Jellyfin http port is common
    }
    else if (url.port === exports.JF_HTTPS_PORT.toString()) {
        score -= 1; // Using the Jellyfin https port is not common
    }
    // Prefer default ports for http(s) protocols
    if (url.protocol === url_1.HTTPS_PROTOCOL && (!url.port || url.port === url_1.HTTPS_PORT.toString())) {
        score += 3;
    }
    else if (url.protocol === url_1.HTTP_PROTOCOL && (!url.port || url.port === url_1.HTTP_PORT.toString())) {
        score += 3;
    }
    return score;
}
/**
 * Gets a list of address candidates url strings
 * from a provided url address string.
 * @param input A server url address string.
 * @returns A list of potential server addresses.
 */
function getAddressCandidates(input) {
    var candidates = [];
    try {
        var url = (0, url_1.parseUrl)(input);
        candidates.push(url);
        if (url.protocol === url_1.HTTP_PROTOCOL) {
            var copy = (0, url_1.copyUrl)(url);
            copy.protocol = url_1.HTTPS_PROTOCOL;
            candidates.push(copy);
        }
        candidates
            .filter(function (val) { return !val.port || val.port === (0, url_1.getDefaultPort)(val.protocol).toString(); })
            .forEach(function (val) {
            if (val.protocol === url_1.HTTP_PROTOCOL) {
                var copy = (0, url_1.copyUrl)(val);
                copy.port = exports.JF_HTTP_PORT.toString();
                candidates.push(copy);
            }
            else if (val.protocol === url_1.HTTPS_PROTOCOL) {
                var copy = (0, url_1.copyUrl)(val);
                copy.port = exports.JF_HTTP_PORT.toString();
                candidates.push(copy);
                copy = (0, url_1.copyUrl)(val);
                copy.port = exports.JF_HTTPS_PORT.toString();
                candidates.push(copy);
            }
        });
        return candidates
            .sort(function (a, b) { return getScore(b) - getScore(a); })
            .map(function (candidate) { return candidate.toString(); });
    }
    catch (err) {
        console.warn(err);
        return [];
    }
}
exports.getAddressCandidates = getAddressCandidates;

},{"./url":361}],358:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthorizationHeader = void 0;
/**
 * Returns a valid authorization header string.
 */
function getAuthorizationHeader(clientInfo, deviceInfo, accessToken) {
    if (accessToken === void 0) { accessToken = ''; }
    // TODO: We should ensure values are properly escaped
    return [
        "MediaBrowser Client=\"".concat(clientInfo.name, "\""),
        "Device=\"".concat(deviceInfo.name, "\""),
        "DeviceId=\"".concat(deviceInfo.id, "\""),
        "Version=\"".concat(clientInfo.version, "\""),
        "Token=\"".concat(accessToken, "\"")
    ].join(', ');
}
exports.getAuthorizationHeader = getAuthorizationHeader;

},{}],359:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBrowserDeviceProfile = void 0;
var generated_client_1 = require("../generated-client");
/**
 * Generates a list of subtitle profiles
 * @param {HTMLVideoElement} videoElement - HTML video element to test again
 * @param {DeviceProfileGeneratorOptions} options - Options to pass to the subtitle generator
 * @returns List of subtitle profiles
 */
var getBrowserSubtitleProfiles = function (videoElement, options) {
    var subtitleProfiles = [];
    if (videoElement.textTracks !== null) {
        subtitleProfiles.push({ Format: 'vtt', Method: generated_client_1.SubtitleDeliveryMethod.External });
    }
    if (options === null || options === void 0 ? void 0 : options.ssaExternal) {
        subtitleProfiles.push({ Format: 'ssa', Method: generated_client_1.SubtitleDeliveryMethod.External }, { Format: 'ass', Method: generated_client_1.SubtitleDeliveryMethod.External });
    }
    else {
        subtitleProfiles.push({ Format: 'ssa', Method: generated_client_1.SubtitleDeliveryMethod.Encode }, { Format: 'ass', Method: generated_client_1.SubtitleDeliveryMethod.Encode });
    }
    return subtitleProfiles;
};
/**
 * Generates a device profile based on a few options and the current browser capabilites
 * @exports
 * @param {DeviceProfileGeneratorOptions} options - Options to pass to the different profiles generators
 * @param {HTMLVideoElement} videoElement - Optionnal HTML video element to use, else it'll create one
 * @returns A detected device profile
 */
var getBrowserDeviceProfile = function (options, videoElement) {
    var deviceProfile = {};
    if (!videoElement) {
        videoElement = document.createElement('video');
    }
    deviceProfile.SubtitleProfiles = getBrowserSubtitleProfiles(videoElement, options);
    return deviceProfile;
};
exports.getBrowserDeviceProfile = getBrowserDeviceProfile;

},{"../generated-client":71}],360:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./address-candidates"), exports);
__exportStar(require("./authentication"), exports);
__exportStar(require("./url"), exports);
__exportStar(require("./browser-profiles"), exports);

},{"./address-candidates":357,"./authentication":358,"./browser-profiles":359,"./url":361}],361:[function(require,module,exports){
"use strict";
/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUrl = exports.getDefaultPort = exports.copyUrl = exports.HTTPS_PORT = exports.HTTP_PORT = exports.HTTPS_PROTOCOL = exports.HTTP_PROTOCOL = void 0;
var normalize_url_1 = __importDefault(require("normalize-url"));
/** The http protocol string. */
exports.HTTP_PROTOCOL = 'http:';
/** The https protocol string. */
exports.HTTPS_PROTOCOL = 'https:';
/** The default port for the http protocol. */
exports.HTTP_PORT = 80;
/** The default port for the https protocol. */
exports.HTTPS_PORT = 443;
/**
 * Copies a URL instance.
 * @param original The original URL.
 * @returns A copy of the original URL.
 */
function copyUrl(original) {
    return new URL(original.toString());
}
exports.copyUrl = copyUrl;
/**
 * Returns the default port number for a given protocol.
 * @param protocol The protocol string.
 * @returns The default port number of the protocol.
 */
function getDefaultPort(protocol) {
    if (protocol === exports.HTTP_PROTOCOL)
        return exports.HTTP_PORT;
    if (protocol === exports.HTTPS_PROTOCOL)
        return exports.HTTPS_PORT;
    throw new Error('Unsupported protocol');
}
exports.getDefaultPort = getDefaultPort;
/**
 * Parses a string to a Url object.
 * @param input A string representing a url.
 * @returns The Url object.
 */
function parseUrl(input) {
    if (!(input === null || input === void 0 ? void 0 : input.trim())) {
        throw new Error('Input is required');
    }
    return new URL((0, normalize_url_1.default)(input, { stripWWW: false }));
}
exports.parseUrl = parseUrl;

},{"normalize-url":393}],362:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":364}],363:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var transitionalDefaults = require('../defaults/transitional');
var Cancel = require('../cancel/Cancel');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

},{"../cancel/Cancel":365,"../core/buildFullPath":370,"../core/createError":371,"../defaults/transitional":378,"./../core/settle":375,"./../helpers/buildURL":381,"./../helpers/cookies":383,"./../helpers/isURLSameOrigin":386,"./../helpers/parseHeaders":388,"./../utils":391}],364:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
axios.VERSION = require('./env/data').version;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":365,"./cancel/CancelToken":366,"./cancel/isCancel":367,"./core/Axios":368,"./core/mergeConfig":374,"./defaults":377,"./env/data":379,"./helpers/bind":380,"./helpers/isAxiosError":385,"./helpers/spread":389,"./utils":391}],365:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],366:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":365}],367:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],368:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
var validator = require('../helpers/validator');

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"../helpers/buildURL":381,"../helpers/validator":390,"./../utils":391,"./InterceptorManager":369,"./dispatchRequest":372,"./mergeConfig":374}],369:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":391}],370:[function(require,module,exports){
'use strict';

var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

},{"../helpers/combineURLs":382,"../helpers/isAbsoluteURL":384}],371:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":373}],372:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var Cancel = require('../cancel/Cancel');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/Cancel":365,"../cancel/isCancel":367,"../defaults":377,"./../utils":391,"./transformData":376}],373:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};

},{}],374:[function(require,module,exports){
'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};

},{"../utils":391}],375:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":371}],376:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var defaults = require('../defaults');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

},{"../defaults":377,"./../utils":391}],377:[function(require,module,exports){
(function (process){(function (){
'use strict';

var utils = require('../utils');
var normalizeHeaderName = require('../helpers/normalizeHeaderName');
var enhanceError = require('../core/enhanceError');
var transitionalDefaults = require('./transitional');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('../adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('../adapters/http');
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this)}).call(this,require('_process'))
},{"../adapters/http":363,"../adapters/xhr":363,"../core/enhanceError":373,"../helpers/normalizeHeaderName":387,"../utils":391,"./transitional":378,"_process":1}],378:[function(require,module,exports){
'use strict';

module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

},{}],379:[function(require,module,exports){
module.exports = {
  "version": "0.26.1"
};
},{}],380:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],381:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":391}],382:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],383:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

},{"./../utils":391}],384:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],385:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};

},{"./../utils":391}],386:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

},{"./../utils":391}],387:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":391}],388:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":391}],389:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],390:[function(require,module,exports){
'use strict';

var VERSION = require('../env/data').version;

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

},{"../env/data":379}],391:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

},{"./helpers/bind":380}],392:[function(require,module,exports){
/* global define */
(function (root, factory) {
  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.compareVersions = factory();
  }
})(this, function () {
  var semver =
    /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;

  function indexOrEnd(str, q) {
    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
  }

  function split(v) {
    var c = v.replace(/^v/, '').replace(/\+.*$/, '');
    var patchIndex = indexOrEnd(c, '-');
    var arr = c.substring(0, patchIndex).split('.');
    arr.push(c.substring(patchIndex + 1));
    return arr;
  }

  function tryParse(v) {
    var n = parseInt(v, 10);
    return isNaN(n) ? v : n;
  }

  function validateAndParse(v) {
    if (typeof v !== 'string') {
      throw new TypeError('Invalid argument expected string');
    }
    var match = v.match(semver);
    if (!match) {
      throw new Error(
        "Invalid argument not valid semver ('" + v + "' received)"
      );
    }
    match.shift();
    return match;
  }

  function forceType(a, b) {
    return typeof a !== typeof b ? [String(a), String(b)] : [a, b];
  }

  function compareStrings(a, b) {
    var [ap, bp] = forceType(tryParse(a), tryParse(b));
    if (ap > bp) return 1;
    if (ap < bp) return -1;
    return 0;
  }

  function compareSegments(a, b) {
    for (var i = 0; i < Math.max(a.length, b.length); i++) {
      var r = compareStrings(a[i] || 0, b[i] || 0);
      if (r !== 0) return r;
    }
    return 0;
  }

  function compareVersions(v1, v2) {
    [v1, v2].forEach(validateAndParse);

    var s1 = split(v1);
    var s2 = split(v2);

    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
      var n1 = parseInt(s1[i] || 0, 10);
      var n2 = parseInt(s2[i] || 0, 10);

      if (n1 > n2) return 1;
      if (n2 > n1) return -1;
    }

    var sp1 = s1[s1.length - 1];
    var sp2 = s2[s2.length - 1];

    if (sp1 && sp2) {
      var p1 = sp1.split('.').map(tryParse);
      var p2 = sp2.split('.').map(tryParse);

      for (i = 0; i < Math.max(p1.length, p2.length); i++) {
        if (
          p1[i] === undefined ||
          (typeof p2[i] === 'string' && typeof p1[i] === 'number')
        )
          return -1;
        if (
          p2[i] === undefined ||
          (typeof p1[i] === 'string' && typeof p2[i] === 'number')
        )
          return 1;

        if (p1[i] > p2[i]) return 1;
        if (p2[i] > p1[i]) return -1;
      }
    } else if (sp1 || sp2) {
      return sp1 ? -1 : 1;
    }

    return 0;
  }

  var allowedOperators = ['>', '>=', '=', '<', '<='];

  var operatorResMap = {
    '>': [1],
    '>=': [0, 1],
    '=': [0],
    '<=': [-1, 0],
    '<': [-1],
  };

  function validateOperator(op) {
    if (typeof op !== 'string') {
      throw new TypeError(
        'Invalid operator type, expected string but got ' + typeof op
      );
    }
    if (allowedOperators.indexOf(op) === -1) {
      throw new TypeError(
        'Invalid operator, expected one of ' + allowedOperators.join('|')
      );
    }
  }

  compareVersions.validate = function (version) {
    return typeof version === 'string' && semver.test(version);
  };

  compareVersions.compare = function (v1, v2, operator) {
    // Validate operator
    validateOperator(operator);

    // since result of compareVersions can only be -1 or 0 or 1
    // a simple map can be used to replace switch
    var res = compareVersions(v1, v2);
    return operatorResMap[operator].indexOf(res) > -1;
  };

  compareVersions.satisfies = function (v, r) {
    // if no range operator then "="
    var match = r.match(/^([<>=~^]+)/);
    var op = match ? match[1] : '=';

    // if gt/lt/eq then operator compare
    if (op !== '^' && op !== '~') return compareVersions.compare(v, r, op);

    // else range of either "~" or "^" is assumed
    var [v1, v2, v3] = validateAndParse(v);
    var [m1, m2, m3] = validateAndParse(r);
    if (compareStrings(v1, m1) !== 0) return false;
    if (op === '^') {
      return compareSegments([v2, v3], [m2, m3]) >= 0;
    }
    if (compareStrings(v2, m2) !== 0) return false;
    return compareStrings(v3, m3) >= 0;
  };

  return compareVersions;
});

},{}],393:[function(require,module,exports){
'use strict';

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
const DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';
const DATA_URL_DEFAULT_CHARSET = 'us-ascii';

const testParameter = (name, filters) => {
	return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);
};

const normalizeDataURL = (urlString, {stripHash}) => {
	const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);

	if (!match) {
		throw new Error(`Invalid URL: ${urlString}`);
	}

	let {type, data, hash} = match.groups;
	const mediaType = type.split(';');
	hash = stripHash ? '' : hash;

	let isBase64 = false;
	if (mediaType[mediaType.length - 1] === 'base64') {
		mediaType.pop();
		isBase64 = true;
	}

	// Lowercase MIME type
	const mimeType = (mediaType.shift() || '').toLowerCase();
	const attributes = mediaType
		.map(attribute => {
			let [key, value = ''] = attribute.split('=').map(string => string.trim());

			// Lowercase `charset`
			if (key === 'charset') {
				value = value.toLowerCase();

				if (value === DATA_URL_DEFAULT_CHARSET) {
					return '';
				}
			}

			return `${key}${value ? `=${value}` : ''}`;
		})
		.filter(Boolean);

	const normalizedMediaType = [
		...attributes
	];

	if (isBase64) {
		normalizedMediaType.push('base64');
	}

	if (normalizedMediaType.length !== 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {
		normalizedMediaType.unshift(mimeType);
	}

	return `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;
};

const normalizeUrl = (urlString, options) => {
	options = {
		defaultProtocol: 'http:',
		normalizeProtocol: true,
		forceHttp: false,
		forceHttps: false,
		stripAuthentication: true,
		stripHash: false,
		stripTextFragment: true,
		stripWWW: true,
		removeQueryParameters: [/^utm_\w+/i],
		removeTrailingSlash: true,
		removeSingleSlash: true,
		removeDirectoryIndex: false,
		sortQueryParameters: true,
		...options
	};

	urlString = urlString.trim();

	// Data URL
	if (/^data:/i.test(urlString)) {
		return normalizeDataURL(urlString, options);
	}

	if (/^view-source:/i.test(urlString)) {
		throw new Error('`view-source:` is not supported as it is a non-standard protocol');
	}

	const hasRelativeProtocol = urlString.startsWith('//');
	const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);

	// Prepend protocol
	if (!isRelativeUrl) {
		urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
	}

	const urlObj = new URL(urlString);

	if (options.forceHttp && options.forceHttps) {
		throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');
	}

	if (options.forceHttp && urlObj.protocol === 'https:') {
		urlObj.protocol = 'http:';
	}

	if (options.forceHttps && urlObj.protocol === 'http:') {
		urlObj.protocol = 'https:';
	}

	// Remove auth
	if (options.stripAuthentication) {
		urlObj.username = '';
		urlObj.password = '';
	}

	// Remove hash
	if (options.stripHash) {
		urlObj.hash = '';
	} else if (options.stripTextFragment) {
		urlObj.hash = urlObj.hash.replace(/#?:~:text.*?$/i, '');
	}

	// Remove duplicate slashes if not preceded by a protocol
	if (urlObj.pathname) {
		urlObj.pathname = urlObj.pathname.replace(/(?<!\b(?:[a-z][a-z\d+\-.]{1,50}:))\/{2,}/g, '/');
	}

	// Decode URI octets
	if (urlObj.pathname) {
		try {
			urlObj.pathname = decodeURI(urlObj.pathname);
		} catch (_) {}
	}

	// Remove directory index
	if (options.removeDirectoryIndex === true) {
		options.removeDirectoryIndex = [/^index\.[a-z]+$/];
	}

	if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
		let pathComponents = urlObj.pathname.split('/');
		const lastComponent = pathComponents[pathComponents.length - 1];

		if (testParameter(lastComponent, options.removeDirectoryIndex)) {
			pathComponents = pathComponents.slice(0, pathComponents.length - 1);
			urlObj.pathname = pathComponents.slice(1).join('/') + '/';
		}
	}

	if (urlObj.hostname) {
		// Remove trailing dot
		urlObj.hostname = urlObj.hostname.replace(/\.$/, '');

		// Remove `www.`
		if (options.stripWWW && /^www\.(?!www\.)(?:[a-z\-\d]{1,63})\.(?:[a-z.\-\d]{2,63})$/.test(urlObj.hostname)) {
			// Each label should be max 63 at length (min: 1).
			// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names
			// Each TLD should be up to 63 characters long (min: 2).
			// It is technically possible to have a single character TLD, but none currently exist.
			urlObj.hostname = urlObj.hostname.replace(/^www\./, '');
		}
	}

	// Remove query unwanted parameters
	if (Array.isArray(options.removeQueryParameters)) {
		for (const key of [...urlObj.searchParams.keys()]) {
			if (testParameter(key, options.removeQueryParameters)) {
				urlObj.searchParams.delete(key);
			}
		}
	}

	if (options.removeQueryParameters === true) {
		urlObj.search = '';
	}

	// Sort query parameters
	if (options.sortQueryParameters) {
		urlObj.searchParams.sort();
	}

	if (options.removeTrailingSlash) {
		urlObj.pathname = urlObj.pathname.replace(/\/$/, '');
	}

	const oldUrlString = urlString;

	// Take advantage of many of the Node `url` normalizations
	urlString = urlObj.toString();

	if (!options.removeSingleSlash && urlObj.pathname === '/' && !oldUrlString.endsWith('/') && urlObj.hash === '') {
		urlString = urlString.replace(/\/$/, '');
	}

	// Remove ending `/` unless removeSingleSlash is false
	if ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '' && options.removeSingleSlash) {
		urlString = urlString.replace(/\/$/, '');
	}

	// Restore relative protocol, if applicable
	if (hasRelativeProtocol && !options.normalizeProtocol) {
		urlString = urlString.replace(/^http:\/\//, '//');
	}

	// Remove http/https
	if (options.stripProtocol) {
		urlString = urlString.replace(/^(?:https?:)?\/\//, '');
	}

	return urlString;
};

module.exports = normalizeUrl;

},{}]},{},[2]);
